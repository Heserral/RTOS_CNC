
C:\Users\s1\workspace\D\Debug\D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002980  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  08002a8c  08002a8c  00012a8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d90  08002d90  00012d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d94  08002d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001970  2000000c  08002da4  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000197c  08002da4  0002197c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001202d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e60  00000000  00000000  00032062  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b4b0  00000000  00000000  00034ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000df8  00000000  00000000  00040378  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001370  00000000  00000000  00041170  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006e42  00000000  00000000  000424e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004ee4  00000000  00000000  00049322  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0004e206  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000029c0  00000000  00000000  0004e284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a74 	.word	0x08002a74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002a74 	.word	0x08002a74

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000150:	f000 fcd6 	bl	8000b00 <HAL_RCC_GetHCLKFreq>
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb0 f0f3 	udiv	r0, r0, r3
 800015c:	f000 f87c 	bl	8000258 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295
 8000168:	f000 f842 	bl	80001f0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}

08000170 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000170:	4a07      	ldr	r2, [pc, #28]	; (8000190 <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000172:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000176:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000178:	f043 0310 	orr.w	r3, r3, #16
 800017c:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800017e:	f000 f825 	bl	80001cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000182:	200f      	movs	r0, #15
 8000184:	f7ff ffe2 	bl	800014c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000188:	f001 fd1e 	bl	8001bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800018c:	2000      	movs	r0, #0
 800018e:	bd08      	pop	{r3, pc}
 8000190:	40022000 	.word	0x40022000

08000194 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000194:	4a02      	ldr	r2, [pc, #8]	; (80001a0 <HAL_IncTick+0xc>)
 8000196:	6813      	ldr	r3, [r2, #0]
 8000198:	3301      	adds	r3, #1
 800019a:	6013      	str	r3, [r2, #0]
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	20000028 	.word	0x20000028

080001a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001a4:	4b01      	ldr	r3, [pc, #4]	; (80001ac <HAL_GetTick+0x8>)
 80001a6:	6818      	ldr	r0, [r3, #0]
}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000028 	.word	0x20000028

080001b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001b0:	b513      	push	{r0, r1, r4, lr}
 80001b2:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80001b4:	f7ff fff6 	bl	80001a4 <HAL_GetTick>
 80001b8:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80001ba:	f7ff fff3 	bl	80001a4 <HAL_GetTick>
 80001be:	9b01      	ldr	r3, [sp, #4]
 80001c0:	1b00      	subs	r0, r0, r4
 80001c2:	4298      	cmp	r0, r3
 80001c4:	d3f9      	bcc.n	80001ba <HAL_Delay+0xa>
  {
  }
}
 80001c6:	b002      	add	sp, #8
 80001c8:	bd10      	pop	{r4, pc}
	...

080001cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001cc:	4a07      	ldr	r2, [pc, #28]	; (80001ec <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80001ce:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d0:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80001d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80001d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001da:	041b      	lsls	r3, r3, #16
 80001dc:	0c1b      	lsrs	r3, r3, #16
 80001de:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e6:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80001e8:	60d3      	str	r3, [r2, #12]
 80001ea:	4770      	bx	lr
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001f0:	4b17      	ldr	r3, [pc, #92]	; (8000250 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80001f2:	b530      	push	{r4, r5, lr}
 80001f4:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80001f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001fa:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001fe:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000200:	2c04      	cmp	r4, #4
 8000202:	bf28      	it	cs
 8000204:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000206:	2d06      	cmp	r5, #6

  return (
 8000208:	f04f 0501 	mov.w	r5, #1
 800020c:	fa05 f404 	lsl.w	r4, r5, r4
 8000210:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000214:	bf8c      	ite	hi
 8000216:	3b03      	subhi	r3, #3
 8000218:	2300      	movls	r3, #0

  return (
 800021a:	400c      	ands	r4, r1
 800021c:	409c      	lsls	r4, r3
 800021e:	fa05 f303 	lsl.w	r3, r5, r3
 8000222:	3b01      	subs	r3, #1
 8000224:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000226:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000228:	ea42 0204 	orr.w	r2, r2, r4
 800022c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000230:	bfaf      	iteee	ge
 8000232:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000236:	4b07      	ldrlt	r3, [pc, #28]	; (8000254 <HAL_NVIC_SetPriority+0x64>)
 8000238:	f000 000f 	andlt.w	r0, r0, #15
 800023c:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023e:	bfa5      	ittet	ge
 8000240:	b2d2      	uxtbge	r2, r2
 8000242:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000246:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800024c:	bd30      	pop	{r4, r5, pc}
 800024e:	bf00      	nop
 8000250:	e000ed00 	.word	0xe000ed00
 8000254:	e000ed14 	.word	0xe000ed14

08000258 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000258:	3801      	subs	r0, #1
 800025a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800025e:	d20a      	bcs.n	8000276 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000262:	4a07      	ldr	r2, [pc, #28]	; (8000280 <HAL_SYSTICK_Config+0x28>)
 8000264:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000266:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800026c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800026e:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000270:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000276:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	e000e010 	.word	0xe000e010
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000286:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	bf0c      	ite	eq
 800028c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000290:	f022 0204 	bicne.w	r2, r2, #4
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	4770      	bx	lr
 8000298:	e000e010 	.word	0xe000e010

0800029c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800029c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 80002a0:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80002a2:	4626      	mov	r6, r4
 80002a4:	4b62      	ldr	r3, [pc, #392]	; (8000430 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002a6:	f8df e194 	ldr.w	lr, [pc, #404]	; 800043c <HAL_GPIO_Init+0x1a0>
 80002aa:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000440 <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80002ae:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80002b0:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80002b2:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80002b4:	ea32 0505 	bics.w	r5, r2, r5
 80002b8:	f040 80b3 	bne.w	8000422 <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002bc:	684d      	ldr	r5, [r1, #4]
 80002be:	2d12      	cmp	r5, #18
 80002c0:	d028      	beq.n	8000314 <HAL_GPIO_Init+0x78>
 80002c2:	d80e      	bhi.n	80002e2 <HAL_GPIO_Init+0x46>
 80002c4:	2d02      	cmp	r5, #2
 80002c6:	d022      	beq.n	800030e <HAL_GPIO_Init+0x72>
 80002c8:	d804      	bhi.n	80002d4 <HAL_GPIO_Init+0x38>
 80002ca:	b335      	cbz	r5, 800031a <HAL_GPIO_Init+0x7e>
 80002cc:	2d01      	cmp	r5, #1
 80002ce:	d12d      	bne.n	800032c <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80002d0:	68cc      	ldr	r4, [r1, #12]
          break;
 80002d2:	e02b      	b.n	800032c <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002d4:	2d03      	cmp	r5, #3
 80002d6:	d018      	beq.n	800030a <HAL_GPIO_Init+0x6e>
 80002d8:	2d11      	cmp	r5, #17
 80002da:	d127      	bne.n	800032c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80002dc:	68cc      	ldr	r4, [r1, #12]
 80002de:	3404      	adds	r4, #4
          break;
 80002e0:	e024      	b.n	800032c <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002e2:	4f54      	ldr	r7, [pc, #336]	; (8000434 <HAL_GPIO_Init+0x198>)
 80002e4:	42bd      	cmp	r5, r7
 80002e6:	d018      	beq.n	800031a <HAL_GPIO_Init+0x7e>
 80002e8:	d806      	bhi.n	80002f8 <HAL_GPIO_Init+0x5c>
 80002ea:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8000444 <HAL_GPIO_Init+0x1a8>
 80002ee:	4545      	cmp	r5, r8
 80002f0:	d013      	beq.n	800031a <HAL_GPIO_Init+0x7e>
 80002f2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80002f6:	e005      	b.n	8000304 <HAL_GPIO_Init+0x68>
 80002f8:	4575      	cmp	r5, lr
 80002fa:	d00e      	beq.n	800031a <HAL_GPIO_Init+0x7e>
 80002fc:	4565      	cmp	r5, ip
 80002fe:	d00c      	beq.n	800031a <HAL_GPIO_Init+0x7e>
 8000300:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000448 <HAL_GPIO_Init+0x1ac>
 8000304:	4545      	cmp	r5, r8
 8000306:	d111      	bne.n	800032c <HAL_GPIO_Init+0x90>
 8000308:	e007      	b.n	800031a <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800030a:	2400      	movs	r4, #0
 800030c:	e00e      	b.n	800032c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800030e:	68cc      	ldr	r4, [r1, #12]
 8000310:	3408      	adds	r4, #8
          break;
 8000312:	e00b      	b.n	800032c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000314:	68cc      	ldr	r4, [r1, #12]
 8000316:	340c      	adds	r4, #12
          break;
 8000318:	e008      	b.n	800032c <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800031a:	688c      	ldr	r4, [r1, #8]
 800031c:	b12c      	cbz	r4, 800032a <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800031e:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8000320:	bf0c      	ite	eq
 8000322:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000324:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000326:	2408      	movs	r4, #8
 8000328:	e000      	b.n	800032c <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800032a:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800032c:	2aff      	cmp	r2, #255	; 0xff
 800032e:	bf97      	itett	ls
 8000330:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000332:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000336:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 800033a:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800033c:	bf84      	itt	hi
 800033e:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000342:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000344:	f04f 080f 	mov.w	r8, #15
 8000348:	fa08 fa05 	lsl.w	sl, r8, r5
 800034c:	ea29 090a 	bic.w	r9, r9, sl
 8000350:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000354:	bf88      	it	hi
 8000356:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800035a:	ea49 0505 	orr.w	r5, r9, r5
 800035e:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000362:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8000366:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 800036a:	d05a      	beq.n	8000422 <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800036c:	4d32      	ldr	r5, [pc, #200]	; (8000438 <HAL_GPIO_Init+0x19c>)
 800036e:	4f32      	ldr	r7, [pc, #200]	; (8000438 <HAL_GPIO_Init+0x19c>)
 8000370:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000372:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000376:	f045 0501 	orr.w	r5, r5, #1
 800037a:	61bd      	str	r5, [r7, #24]
 800037c:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800037e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000382:	f005 0501 	and.w	r5, r5, #1
 8000386:	9501      	str	r5, [sp, #4]
 8000388:	9d01      	ldr	r5, [sp, #4]
 800038a:	f026 0503 	bic.w	r5, r6, #3
 800038e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8000392:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 8000396:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800039a:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800039e:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003a2:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80003a4:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003a8:	d010      	beq.n	80003cc <HAL_GPIO_Init+0x130>
 80003aa:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80003ae:	42b8      	cmp	r0, r7
 80003b0:	d00f      	beq.n	80003d2 <HAL_GPIO_Init+0x136>
 80003b2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80003b6:	42b8      	cmp	r0, r7
 80003b8:	d00e      	beq.n	80003d8 <HAL_GPIO_Init+0x13c>
 80003ba:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80003be:	42b8      	cmp	r0, r7
 80003c0:	bf0c      	ite	eq
 80003c2:	f04f 0b03 	moveq.w	fp, #3
 80003c6:	f04f 0b04 	movne.w	fp, #4
 80003ca:	e007      	b.n	80003dc <HAL_GPIO_Init+0x140>
 80003cc:	f04f 0b00 	mov.w	fp, #0
 80003d0:	e004      	b.n	80003dc <HAL_GPIO_Init+0x140>
 80003d2:	f04f 0b01 	mov.w	fp, #1
 80003d6:	e001      	b.n	80003dc <HAL_GPIO_Init+0x140>
 80003d8:	f04f 0b02 	mov.w	fp, #2
 80003dc:	fa0b fa0a 	lsl.w	sl, fp, sl
 80003e0:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 80003e4:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80003e8:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003ea:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80003ee:	bf14      	ite	ne
 80003f0:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80003f2:	4395      	biceq	r5, r2
 80003f4:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80003f6:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003f8:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80003fc:	bf14      	ite	ne
 80003fe:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000400:	4395      	biceq	r5, r2
 8000402:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000404:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000406:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800040a:	bf14      	ite	ne
 800040c:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 800040e:	4395      	biceq	r5, r2
 8000410:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000412:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000414:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000418:	bf14      	ite	ne
 800041a:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 800041c:	ea25 0202 	biceq.w	r2, r5, r2
 8000420:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000422:	3601      	adds	r6, #1
 8000424:	2e10      	cmp	r6, #16
 8000426:	f47f af42 	bne.w	80002ae <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 800042a:	b003      	add	sp, #12
 800042c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000430:	40010400 	.word	0x40010400
 8000434:	10210000 	.word	0x10210000
 8000438:	40021000 	.word	0x40021000
 800043c:	10310000 	.word	0x10310000
 8000440:	10320000 	.word	0x10320000
 8000444:	10110000 	.word	0x10110000
 8000448:	10220000 	.word	0x10220000

0800044c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800044c:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800044e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000452:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000454:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000456:	d403      	bmi.n	8000460 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000458:	682b      	ldr	r3, [r5, #0]
 800045a:	0798      	lsls	r0, r3, #30
 800045c:	d473      	bmi.n	8000546 <HAL_RCC_OscConfig+0xfa>
 800045e:	e0f2      	b.n	8000646 <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000460:	4cb9      	ldr	r4, [pc, #740]	; (8000748 <HAL_RCC_OscConfig+0x2fc>)
 8000462:	6863      	ldr	r3, [r4, #4]
 8000464:	f003 030c 	and.w	r3, r3, #12
 8000468:	2b04      	cmp	r3, #4
 800046a:	d007      	beq.n	800047c <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800046c:	6863      	ldr	r3, [r4, #4]
 800046e:	f003 030c 	and.w	r3, r3, #12
 8000472:	2b08      	cmp	r3, #8
 8000474:	d116      	bne.n	80004a4 <HAL_RCC_OscConfig+0x58>
 8000476:	6863      	ldr	r3, [r4, #4]
 8000478:	03d9      	lsls	r1, r3, #15
 800047a:	d513      	bpl.n	80004a4 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800047c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000480:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000484:	6822      	ldr	r2, [r4, #0]
 8000486:	fa93 f3a3 	rbit	r3, r3
 800048a:	fab3 f383 	clz	r3, r3
 800048e:	f003 031f 	and.w	r3, r3, #31
 8000492:	fa22 f303 	lsr.w	r3, r2, r3
 8000496:	07da      	lsls	r2, r3, #31
 8000498:	d5de      	bpl.n	8000458 <HAL_RCC_OscConfig+0xc>
 800049a:	686b      	ldr	r3, [r5, #4]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d1db      	bne.n	8000458 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80004a0:	2001      	movs	r0, #1
 80004a2:	e22d      	b.n	8000900 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004a4:	686b      	ldr	r3, [r5, #4]
 80004a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004aa:	d015      	beq.n	80004d8 <HAL_RCC_OscConfig+0x8c>
 80004ac:	b96b      	cbnz	r3, 80004ca <HAL_RCC_OscConfig+0x7e>
 80004ae:	6823      	ldr	r3, [r4, #0]
 80004b0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80004b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004b8:	6023      	str	r3, [r4, #0]
 80004ba:	6823      	ldr	r3, [r4, #0]
 80004bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004c0:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80004c2:	f7ff fe6f 	bl	80001a4 <HAL_GetTick>
 80004c6:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80004c8:	e02f      	b.n	800052a <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80004ce:	6823      	ldr	r3, [r4, #0]
 80004d0:	d106      	bne.n	80004e0 <HAL_RCC_OscConfig+0x94>
 80004d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004d6:	6023      	str	r3, [r4, #0]
 80004d8:	6823      	ldr	r3, [r4, #0]
 80004da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004de:	e005      	b.n	80004ec <HAL_RCC_OscConfig+0xa0>
 80004e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004e4:	6023      	str	r3, [r4, #0]
 80004e6:	6823      	ldr	r3, [r4, #0]
 80004e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004ec:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80004ee:	f7ff fe59 	bl	80001a4 <HAL_GetTick>
 80004f2:	4607      	mov	r7, r0
 80004f4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80004f8:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80004fc:	6822      	ldr	r2, [r4, #0]
 80004fe:	fa96 f3a6 	rbit	r3, r6
 8000502:	fab3 f383 	clz	r3, r3
 8000506:	f003 031f 	and.w	r3, r3, #31
 800050a:	fa22 f303 	lsr.w	r3, r2, r3
 800050e:	07db      	lsls	r3, r3, #31
 8000510:	d4a2      	bmi.n	8000458 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000512:	f7ff fe47 	bl	80001a4 <HAL_GetTick>
 8000516:	1bc0      	subs	r0, r0, r7
 8000518:	2864      	cmp	r0, #100	; 0x64
 800051a:	d9ed      	bls.n	80004f8 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 800051c:	2003      	movs	r0, #3
 800051e:	e1ef      	b.n	8000900 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000520:	f7ff fe40 	bl	80001a4 <HAL_GetTick>
 8000524:	1bc0      	subs	r0, r0, r7
 8000526:	2864      	cmp	r0, #100	; 0x64
 8000528:	d8f8      	bhi.n	800051c <HAL_RCC_OscConfig+0xd0>
 800052a:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800052e:	6822      	ldr	r2, [r4, #0]
 8000530:	fa96 f3a6 	rbit	r3, r6
 8000534:	fab3 f383 	clz	r3, r3
 8000538:	f003 031f 	and.w	r3, r3, #31
 800053c:	fa22 f303 	lsr.w	r3, r2, r3
 8000540:	07d8      	lsls	r0, r3, #31
 8000542:	d4ed      	bmi.n	8000520 <HAL_RCC_OscConfig+0xd4>
 8000544:	e788      	b.n	8000458 <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000546:	4c80      	ldr	r4, [pc, #512]	; (8000748 <HAL_RCC_OscConfig+0x2fc>)
 8000548:	6863      	ldr	r3, [r4, #4]
 800054a:	f013 0f0c 	tst.w	r3, #12
 800054e:	d007      	beq.n	8000560 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000550:	6863      	ldr	r3, [r4, #4]
 8000552:	f003 030c 	and.w	r3, r3, #12
 8000556:	2b08      	cmp	r3, #8
 8000558:	d121      	bne.n	800059e <HAL_RCC_OscConfig+0x152>
 800055a:	6863      	ldr	r3, [r4, #4]
 800055c:	03d9      	lsls	r1, r3, #15
 800055e:	d41e      	bmi.n	800059e <HAL_RCC_OscConfig+0x152>
 8000560:	2302      	movs	r3, #2
 8000562:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000566:	6822      	ldr	r2, [r4, #0]
 8000568:	fa93 f3a3 	rbit	r3, r3
 800056c:	fab3 f383 	clz	r3, r3
 8000570:	f003 031f 	and.w	r3, r3, #31
 8000574:	fa22 f303 	lsr.w	r3, r2, r3
 8000578:	07da      	lsls	r2, r3, #31
 800057a:	d502      	bpl.n	8000582 <HAL_RCC_OscConfig+0x136>
 800057c:	692b      	ldr	r3, [r5, #16]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d18e      	bne.n	80004a0 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000582:	6823      	ldr	r3, [r4, #0]
 8000584:	22f8      	movs	r2, #248	; 0xf8
 8000586:	fa92 f2a2 	rbit	r2, r2
 800058a:	fab2 f282 	clz	r2, r2
 800058e:	6969      	ldr	r1, [r5, #20]
 8000590:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000594:	fa01 f202 	lsl.w	r2, r1, r2
 8000598:	4313      	orrs	r3, r2
 800059a:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800059c:	e053      	b.n	8000646 <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800059e:	692a      	ldr	r2, [r5, #16]
 80005a0:	2301      	movs	r3, #1
 80005a2:	b37a      	cbz	r2, 8000604 <HAL_RCC_OscConfig+0x1b8>
 80005a4:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80005a8:	fab2 f282 	clz	r2, r2
 80005ac:	0092      	lsls	r2, r2, #2
 80005ae:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 80005b2:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 80005b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005b8:	f7ff fdf4 	bl	80001a4 <HAL_GetTick>
 80005bc:	4607      	mov	r7, r0
 80005be:	2602      	movs	r6, #2
 80005c0:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005c4:	4860      	ldr	r0, [pc, #384]	; (8000748 <HAL_RCC_OscConfig+0x2fc>)
 80005c6:	6822      	ldr	r2, [r4, #0]
 80005c8:	fa96 f3a6 	rbit	r3, r6
 80005cc:	fab3 f383 	clz	r3, r3
 80005d0:	f003 031f 	and.w	r3, r3, #31
 80005d4:	fa22 f303 	lsr.w	r3, r2, r3
 80005d8:	07db      	lsls	r3, r3, #31
 80005da:	d405      	bmi.n	80005e8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005dc:	f7ff fde2 	bl	80001a4 <HAL_GetTick>
 80005e0:	1bc0      	subs	r0, r0, r7
 80005e2:	2802      	cmp	r0, #2
 80005e4:	d9ec      	bls.n	80005c0 <HAL_RCC_OscConfig+0x174>
 80005e6:	e799      	b.n	800051c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005e8:	6803      	ldr	r3, [r0, #0]
 80005ea:	22f8      	movs	r2, #248	; 0xf8
 80005ec:	fa92 f2a2 	rbit	r2, r2
 80005f0:	fab2 f282 	clz	r2, r2
 80005f4:	6969      	ldr	r1, [r5, #20]
 80005f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005fa:	fa01 f202 	lsl.w	r2, r1, r2
 80005fe:	4313      	orrs	r3, r2
 8000600:	6003      	str	r3, [r0, #0]
 8000602:	e020      	b.n	8000646 <HAL_RCC_OscConfig+0x1fa>
 8000604:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000608:	fab3 f383 	clz	r3, r3
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000612:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000616:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000618:	f7ff fdc4 	bl	80001a4 <HAL_GetTick>
 800061c:	4607      	mov	r7, r0
 800061e:	2602      	movs	r6, #2
 8000620:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000624:	6822      	ldr	r2, [r4, #0]
 8000626:	fa96 f3a6 	rbit	r3, r6
 800062a:	fab3 f383 	clz	r3, r3
 800062e:	f003 031f 	and.w	r3, r3, #31
 8000632:	fa22 f303 	lsr.w	r3, r2, r3
 8000636:	07d9      	lsls	r1, r3, #31
 8000638:	d505      	bpl.n	8000646 <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800063a:	f7ff fdb3 	bl	80001a4 <HAL_GetTick>
 800063e:	1bc0      	subs	r0, r0, r7
 8000640:	2802      	cmp	r0, #2
 8000642:	d9ed      	bls.n	8000620 <HAL_RCC_OscConfig+0x1d4>
 8000644:	e76a      	b.n	800051c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000646:	682b      	ldr	r3, [r5, #0]
 8000648:	071a      	lsls	r2, r3, #28
 800064a:	d546      	bpl.n	80006da <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800064c:	69aa      	ldr	r2, [r5, #24]
 800064e:	4c3e      	ldr	r4, [pc, #248]	; (8000748 <HAL_RCC_OscConfig+0x2fc>)
 8000650:	2301      	movs	r3, #1
 8000652:	493e      	ldr	r1, [pc, #248]	; (800074c <HAL_RCC_OscConfig+0x300>)
 8000654:	b312      	cbz	r2, 800069c <HAL_RCC_OscConfig+0x250>
 8000656:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800065a:	fab2 f282 	clz	r2, r2
 800065e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000662:	f7ff fd9f 	bl	80001a4 <HAL_GetTick>
 8000666:	4607      	mov	r7, r0
 8000668:	2602      	movs	r6, #2
 800066a:	fa96 f3a6 	rbit	r3, r6
 800066e:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000672:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000674:	fa96 f3a6 	rbit	r3, r6
 8000678:	fab3 f383 	clz	r3, r3
 800067c:	f003 031f 	and.w	r3, r3, #31
 8000680:	fa22 f303 	lsr.w	r3, r2, r3
 8000684:	07db      	lsls	r3, r3, #31
 8000686:	d405      	bmi.n	8000694 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000688:	f7ff fd8c 	bl	80001a4 <HAL_GetTick>
 800068c:	1bc0      	subs	r0, r0, r7
 800068e:	2802      	cmp	r0, #2
 8000690:	d9eb      	bls.n	800066a <HAL_RCC_OscConfig+0x21e>
 8000692:	e743      	b.n	800051c <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8000694:	2001      	movs	r0, #1
 8000696:	f7ff fd8b 	bl	80001b0 <HAL_Delay>
 800069a:	e01e      	b.n	80006da <HAL_RCC_OscConfig+0x28e>
 800069c:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80006a0:	fab3 f383 	clz	r3, r3
 80006a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80006a8:	f7ff fd7c 	bl	80001a4 <HAL_GetTick>
 80006ac:	4607      	mov	r7, r0
 80006ae:	2602      	movs	r6, #2
 80006b0:	fa96 f3a6 	rbit	r3, r6
 80006b4:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80006ba:	fa96 f3a6 	rbit	r3, r6
 80006be:	fab3 f383 	clz	r3, r3
 80006c2:	f003 031f 	and.w	r3, r3, #31
 80006c6:	fa22 f303 	lsr.w	r3, r2, r3
 80006ca:	07d8      	lsls	r0, r3, #31
 80006cc:	d505      	bpl.n	80006da <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006ce:	f7ff fd69 	bl	80001a4 <HAL_GetTick>
 80006d2:	1bc0      	subs	r0, r0, r7
 80006d4:	2802      	cmp	r0, #2
 80006d6:	d9eb      	bls.n	80006b0 <HAL_RCC_OscConfig+0x264>
 80006d8:	e720      	b.n	800051c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006da:	682b      	ldr	r3, [r5, #0]
 80006dc:	0759      	lsls	r1, r3, #29
 80006de:	d404      	bmi.n	80006ea <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80006e0:	69ea      	ldr	r2, [r5, #28]
 80006e2:	2a00      	cmp	r2, #0
 80006e4:	f040 8081 	bne.w	80007ea <HAL_RCC_OscConfig+0x39e>
 80006e8:	e0d8      	b.n	800089c <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	4c17      	ldr	r4, [pc, #92]	; (8000748 <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006ec:	4e18      	ldr	r6, [pc, #96]	; (8000750 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	69e3      	ldr	r3, [r4, #28]
 80006f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f4:	61e3      	str	r3, [r4, #28]
 80006f6:	69e3      	ldr	r3, [r4, #28]
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000700:	6833      	ldr	r3, [r6, #0]
 8000702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000706:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000708:	f7ff fd4c 	bl	80001a4 <HAL_GetTick>
 800070c:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800070e:	6833      	ldr	r3, [r6, #0]
 8000710:	05da      	lsls	r2, r3, #23
 8000712:	d405      	bmi.n	8000720 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000714:	f7ff fd46 	bl	80001a4 <HAL_GetTick>
 8000718:	1bc0      	subs	r0, r0, r7
 800071a:	2864      	cmp	r0, #100	; 0x64
 800071c:	d9f7      	bls.n	800070e <HAL_RCC_OscConfig+0x2c2>
 800071e:	e6fd      	b.n	800051c <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000720:	68eb      	ldr	r3, [r5, #12]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d01c      	beq.n	8000760 <HAL_RCC_OscConfig+0x314>
 8000726:	b9ab      	cbnz	r3, 8000754 <HAL_RCC_OscConfig+0x308>
 8000728:	6a23      	ldr	r3, [r4, #32]
 800072a:	2602      	movs	r6, #2
 800072c:	f023 0301 	bic.w	r3, r3, #1
 8000730:	6223      	str	r3, [r4, #32]
 8000732:	6a23      	ldr	r3, [r4, #32]
 8000734:	4637      	mov	r7, r6
 8000736:	f023 0304 	bic.w	r3, r3, #4
 800073a:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800073c:	f7ff fd32 	bl	80001a4 <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000740:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000744:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000746:	e048      	b.n	80007da <HAL_RCC_OscConfig+0x38e>
 8000748:	40021000 	.word	0x40021000
 800074c:	42420480 	.word	0x42420480
 8000750:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000754:	2b05      	cmp	r3, #5
 8000756:	6a23      	ldr	r3, [r4, #32]
 8000758:	d106      	bne.n	8000768 <HAL_RCC_OscConfig+0x31c>
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	6223      	str	r3, [r4, #32]
 8000760:	6a23      	ldr	r3, [r4, #32]
 8000762:	f043 0301 	orr.w	r3, r3, #1
 8000766:	e005      	b.n	8000774 <HAL_RCC_OscConfig+0x328>
 8000768:	f023 0301 	bic.w	r3, r3, #1
 800076c:	6223      	str	r3, [r4, #32]
 800076e:	6a23      	ldr	r3, [r4, #32]
 8000770:	f023 0304 	bic.w	r3, r3, #4
 8000774:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000776:	f7ff fd15 	bl	80001a4 <HAL_GetTick>
 800077a:	2602      	movs	r6, #2
 800077c:	4681      	mov	r9, r0
 800077e:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000780:	f241 3788 	movw	r7, #5000	; 0x1388
 8000784:	fa96 f3a6 	rbit	r3, r6
 8000788:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800078c:	b10b      	cbz	r3, 8000792 <HAL_RCC_OscConfig+0x346>
 800078e:	6a22      	ldr	r2, [r4, #32]
 8000790:	e000      	b.n	8000794 <HAL_RCC_OscConfig+0x348>
 8000792:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000794:	fa98 f3a8 	rbit	r3, r8
 8000798:	fab3 f383 	clz	r3, r3
 800079c:	f003 031f 	and.w	r3, r3, #31
 80007a0:	fa22 f303 	lsr.w	r3, r2, r3
 80007a4:	07db      	lsls	r3, r3, #31
 80007a6:	d49b      	bmi.n	80006e0 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007a8:	f7ff fcfc 	bl	80001a4 <HAL_GetTick>
 80007ac:	ebc9 0000 	rsb	r0, r9, r0
 80007b0:	42b8      	cmp	r0, r7
 80007b2:	d9e7      	bls.n	8000784 <HAL_RCC_OscConfig+0x338>
 80007b4:	e6b2      	b.n	800051c <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007b8:	fa97 f3a7 	rbit	r3, r7
 80007bc:	fab3 f383 	clz	r3, r3
 80007c0:	f003 031f 	and.w	r3, r3, #31
 80007c4:	fa22 f303 	lsr.w	r3, r2, r3
 80007c8:	07d8      	lsls	r0, r3, #31
 80007ca:	d589      	bpl.n	80006e0 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007cc:	f7ff fcea 	bl	80001a4 <HAL_GetTick>
 80007d0:	ebc8 0000 	rsb	r0, r8, r0
 80007d4:	4548      	cmp	r0, r9
 80007d6:	f63f aea1 	bhi.w	800051c <HAL_RCC_OscConfig+0xd0>
 80007da:	fa96 f3a6 	rbit	r3, r6
 80007de:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0e7      	beq.n	80007b6 <HAL_RCC_OscConfig+0x36a>
 80007e6:	6a22      	ldr	r2, [r4, #32]
 80007e8:	e7e6      	b.n	80007b8 <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007ea:	4c47      	ldr	r4, [pc, #284]	; (8000908 <HAL_RCC_OscConfig+0x4bc>)
 80007ec:	6863      	ldr	r3, [r4, #4]
 80007ee:	f003 030c 	and.w	r3, r3, #12
 80007f2:	2b08      	cmp	r3, #8
 80007f4:	f43f ae54 	beq.w	80004a0 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007f8:	2a02      	cmp	r2, #2
 80007fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007fe:	d15c      	bne.n	80008ba <HAL_RCC_OscConfig+0x46e>
 8000800:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000804:	fab3 f383 	clz	r3, r3
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800080e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000816:	f7ff fcc5 	bl	80001a4 <HAL_GetTick>
 800081a:	4680      	mov	r8, r0
 800081c:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000820:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000824:	4f38      	ldr	r7, [pc, #224]	; (8000908 <HAL_RCC_OscConfig+0x4bc>)
 8000826:	6822      	ldr	r2, [r4, #0]
 8000828:	fa96 f3a6 	rbit	r3, r6
 800082c:	fab3 f383 	clz	r3, r3
 8000830:	f003 031f 	and.w	r3, r3, #31
 8000834:	fa22 f303 	lsr.w	r3, r2, r3
 8000838:	07d9      	lsls	r1, r3, #31
 800083a:	d431      	bmi.n	80008a0 <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800083c:	6a2e      	ldr	r6, [r5, #32]
 800083e:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8000842:	d105      	bne.n	8000850 <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000844:	6879      	ldr	r1, [r7, #4]
 8000846:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 800084a:	68a9      	ldr	r1, [r5, #8]
 800084c:	4301      	orrs	r1, r0
 800084e:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000850:	6863      	ldr	r3, [r4, #4]
 8000852:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000854:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000858:	4332      	orrs	r2, r6
 800085a:	4313      	orrs	r3, r2
 800085c:	6063      	str	r3, [r4, #4]
 800085e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000862:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000866:	fab3 f383 	clz	r3, r3
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000870:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000874:	2201      	movs	r2, #1
 8000876:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000878:	f7ff fc94 	bl	80001a4 <HAL_GetTick>
 800087c:	4606      	mov	r6, r0
 800087e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000882:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000886:	6822      	ldr	r2, [r4, #0]
 8000888:	fa95 f3a5 	rbit	r3, r5
 800088c:	fab3 f383 	clz	r3, r3
 8000890:	f003 031f 	and.w	r3, r3, #31
 8000894:	fa22 f303 	lsr.w	r3, r2, r3
 8000898:	07da      	lsls	r2, r3, #31
 800089a:	d508      	bpl.n	80008ae <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800089c:	2000      	movs	r0, #0
 800089e:	e02f      	b.n	8000900 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008a0:	f7ff fc80 	bl	80001a4 <HAL_GetTick>
 80008a4:	ebc8 0000 	rsb	r0, r8, r0
 80008a8:	2802      	cmp	r0, #2
 80008aa:	d9b9      	bls.n	8000820 <HAL_RCC_OscConfig+0x3d4>
 80008ac:	e636      	b.n	800051c <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008ae:	f7ff fc79 	bl	80001a4 <HAL_GetTick>
 80008b2:	1b80      	subs	r0, r0, r6
 80008b4:	2802      	cmp	r0, #2
 80008b6:	d9e4      	bls.n	8000882 <HAL_RCC_OscConfig+0x436>
 80008b8:	e630      	b.n	800051c <HAL_RCC_OscConfig+0xd0>
 80008ba:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80008be:	fab3 f383 	clz	r3, r3
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80008c8:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008d0:	f7ff fc68 	bl	80001a4 <HAL_GetTick>
 80008d4:	4606      	mov	r6, r0
 80008d6:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80008da:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008de:	6822      	ldr	r2, [r4, #0]
 80008e0:	fa95 f3a5 	rbit	r3, r5
 80008e4:	fab3 f383 	clz	r3, r3
 80008e8:	f003 031f 	and.w	r3, r3, #31
 80008ec:	fa22 f303 	lsr.w	r3, r2, r3
 80008f0:	07db      	lsls	r3, r3, #31
 80008f2:	d5d3      	bpl.n	800089c <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008f4:	f7ff fc56 	bl	80001a4 <HAL_GetTick>
 80008f8:	1b80      	subs	r0, r0, r6
 80008fa:	2802      	cmp	r0, #2
 80008fc:	d9ed      	bls.n	80008da <HAL_RCC_OscConfig+0x48e>
 80008fe:	e60d      	b.n	800051c <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000900:	b003      	add	sp, #12
 8000902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 800090c:	4b1f      	ldr	r3, [pc, #124]	; (800098c <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800090e:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000910:	f103 0510 	add.w	r5, r3, #16
 8000914:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000916:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000918:	ac02      	add	r4, sp, #8
 800091a:	4622      	mov	r2, r4
 800091c:	6818      	ldr	r0, [r3, #0]
 800091e:	6859      	ldr	r1, [r3, #4]
 8000920:	3308      	adds	r3, #8
 8000922:	c203      	stmia	r2!, {r0, r1}
 8000924:	42ab      	cmp	r3, r5
 8000926:	4614      	mov	r4, r2
 8000928:	d1f7      	bne.n	800091a <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 800092a:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 800092c:	4c18      	ldr	r4, [pc, #96]	; (8000990 <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 800092e:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000932:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000934:	f000 030c 	and.w	r3, r0, #12
 8000938:	2b08      	cmp	r3, #8
 800093a:	d124      	bne.n	8000986 <HAL_RCC_GetSysClockFreq+0x7a>
 800093c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000940:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000944:	fab3 f383 	clz	r3, r3
 8000948:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 800094c:	fa22 f303 	lsr.w	r3, r2, r3
 8000950:	aa06      	add	r2, sp, #24
 8000952:	4413      	add	r3, r2
 8000954:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000958:	03c3      	lsls	r3, r0, #15
 800095a:	d511      	bpl.n	8000980 <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 800095c:	6862      	ldr	r2, [r4, #4]
 800095e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000962:	fa93 f3a3 	rbit	r3, r3
 8000966:	fab3 f083 	clz	r0, r3
 800096a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800096e:	40c3      	lsrs	r3, r0
 8000970:	aa06      	add	r2, sp, #24
 8000972:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000974:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_RCC_GetSysClockFreq+0x88>)
 800097a:	fbb3 f0f0 	udiv	r0, r3, r0
 800097e:	e000      	b.n	8000982 <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000982:	4348      	muls	r0, r1
 8000984:	e000      	b.n	8000988 <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000988:	b006      	add	sp, #24
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	08002a8c 	.word	0x08002a8c
 8000990:	40021000 	.word	0x40021000
 8000994:	007a1200 	.word	0x007a1200
 8000998:	003d0900 	.word	0x003d0900

0800099c <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800099c:	4a54      	ldr	r2, [pc, #336]	; (8000af0 <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800099e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009a2:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80009a4:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80009ac:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009ae:	d30a      	bcc.n	80009c6 <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009b0:	6831      	ldr	r1, [r6, #0]
 80009b2:	078c      	lsls	r4, r1, #30
 80009b4:	d514      	bpl.n	80009e0 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009b6:	484f      	ldr	r0, [pc, #316]	; (8000af4 <HAL_RCC_ClockConfig+0x158>)
 80009b8:	6843      	ldr	r3, [r0, #4]
 80009ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009be:	68b3      	ldr	r3, [r6, #8]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	6043      	str	r3, [r0, #4]
 80009c4:	e00c      	b.n	80009e0 <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009c6:	6813      	ldr	r3, [r2, #0]
 80009c8:	f023 0307 	bic.w	r3, r3, #7
 80009cc:	430b      	orrs	r3, r1
 80009ce:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009d0:	6813      	ldr	r3, [r2, #0]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	4299      	cmp	r1, r3
 80009d8:	d0ea      	beq.n	80009b0 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 80009da:	2001      	movs	r0, #1
 80009dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009e0:	07c8      	lsls	r0, r1, #31
 80009e2:	d406      	bmi.n	80009f2 <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80009e4:	4a42      	ldr	r2, [pc, #264]	; (8000af0 <HAL_RCC_ClockConfig+0x154>)
 80009e6:	6813      	ldr	r3, [r2, #0]
 80009e8:	f003 0307 	and.w	r3, r3, #7
 80009ec:	429d      	cmp	r5, r3
 80009ee:	d34a      	bcc.n	8000a86 <HAL_RCC_ClockConfig+0xea>
 80009f0:	e053      	b.n	8000a9a <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009f2:	6872      	ldr	r2, [r6, #4]
 80009f4:	4c3f      	ldr	r4, [pc, #252]	; (8000af4 <HAL_RCC_ClockConfig+0x158>)
 80009f6:	2a01      	cmp	r2, #1
 80009f8:	d102      	bne.n	8000a00 <HAL_RCC_ClockConfig+0x64>
 80009fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009fe:	e004      	b.n	8000a0a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a00:	2a02      	cmp	r2, #2
 8000a02:	bf0c      	ite	eq
 8000a04:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000a08:	2302      	movne	r3, #2
 8000a0a:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a0e:	6821      	ldr	r1, [r4, #0]
 8000a10:	fa93 f3a3 	rbit	r3, r3
 8000a14:	fab3 f383 	clz	r3, r3
 8000a18:	f003 031f 	and.w	r3, r3, #31
 8000a1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000a20:	07d9      	lsls	r1, r3, #31
 8000a22:	d5da      	bpl.n	80009da <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a24:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a26:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a2a:	f023 0303 	bic.w	r3, r3, #3
 8000a2e:	431a      	orrs	r2, r3
 8000a30:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000a32:	f7ff fbb7 	bl	80001a4 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a36:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000a38:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d10c      	bne.n	8000a58 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a3e:	6863      	ldr	r3, [r4, #4]
 8000a40:	f003 030c 	and.w	r3, r3, #12
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d0cd      	beq.n	80009e4 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a48:	f7ff fbac 	bl	80001a4 <HAL_GetTick>
 8000a4c:	1bc0      	subs	r0, r0, r7
 8000a4e:	4540      	cmp	r0, r8
 8000a50:	d9f5      	bls.n	8000a3e <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8000a52:	2003      	movs	r0, #3
 8000a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d10f      	bne.n	8000a7c <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a5c:	6863      	ldr	r3, [r4, #4]
 8000a5e:	f003 030c 	and.w	r3, r3, #12
 8000a62:	2b08      	cmp	r3, #8
 8000a64:	d0be      	beq.n	80009e4 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a66:	f7ff fb9d 	bl	80001a4 <HAL_GetTick>
 8000a6a:	1bc0      	subs	r0, r0, r7
 8000a6c:	4540      	cmp	r0, r8
 8000a6e:	d9f5      	bls.n	8000a5c <HAL_RCC_ClockConfig+0xc0>
 8000a70:	e7ef      	b.n	8000a52 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a72:	f7ff fb97 	bl	80001a4 <HAL_GetTick>
 8000a76:	1bc0      	subs	r0, r0, r7
 8000a78:	4540      	cmp	r0, r8
 8000a7a:	d8ea      	bhi.n	8000a52 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a7c:	6863      	ldr	r3, [r4, #4]
 8000a7e:	f013 0f0c 	tst.w	r3, #12
 8000a82:	d1f6      	bne.n	8000a72 <HAL_RCC_ClockConfig+0xd6>
 8000a84:	e7ae      	b.n	80009e4 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a86:	6813      	ldr	r3, [r2, #0]
 8000a88:	f023 0307 	bic.w	r3, r3, #7
 8000a8c:	432b      	orrs	r3, r5
 8000a8e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a90:	6813      	ldr	r3, [r2, #0]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	429d      	cmp	r5, r3
 8000a98:	d19f      	bne.n	80009da <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a9a:	6831      	ldr	r1, [r6, #0]
 8000a9c:	4c15      	ldr	r4, [pc, #84]	; (8000af4 <HAL_RCC_ClockConfig+0x158>)
 8000a9e:	f011 0f04 	tst.w	r1, #4
 8000aa2:	d005      	beq.n	8000ab0 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000aa4:	6863      	ldr	r3, [r4, #4]
 8000aa6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000aaa:	68f3      	ldr	r3, [r6, #12]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ab0:	070b      	lsls	r3, r1, #28
 8000ab2:	d506      	bpl.n	8000ac2 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ab4:	6863      	ldr	r3, [r4, #4]
 8000ab6:	6932      	ldr	r2, [r6, #16]
 8000ab8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000abc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ac0:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ac2:	f7ff ff23 	bl	800090c <HAL_RCC_GetSysClockFreq>
 8000ac6:	6863      	ldr	r3, [r4, #4]
 8000ac8:	22f0      	movs	r2, #240	; 0xf0
 8000aca:	fa92 f2a2 	rbit	r2, r2
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ad6:	40d3      	lsrs	r3, r2
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_RCC_ClockConfig+0x15c>)
 8000ada:	5cd3      	ldrb	r3, [r2, r3]
 8000adc:	40d8      	lsrs	r0, r3
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <HAL_RCC_ClockConfig+0x160>)
 8000ae0:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ae2:	200f      	movs	r0, #15
 8000ae4:	f7ff fb32 	bl	800014c <HAL_InitTick>
  
  return HAL_OK;
 8000ae8:	2000      	movs	r0, #0
}
 8000aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000aee:	bf00      	nop
 8000af0:	40022000 	.word	0x40022000
 8000af4:	40021000 	.word	0x40021000
 8000af8:	08002aaf 	.word	0x08002aaf
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000b00:	4b01      	ldr	r3, [pc, #4]	; (8000b08 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b02:	6818      	ldr	r0, [r3, #0]
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000004 	.word	0x20000004

08000b0c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	fa92 f2a2 	rbit	r2, r2
 8000b18:	fab2 f282 	clz	r2, r2
 8000b1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b20:	40d3      	lsrs	r3, r2
 8000b22:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000b24:	5cd3      	ldrb	r3, [r2, r3]
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000b28:	6810      	ldr	r0, [r2, #0]
}    
 8000b2a:	40d8      	lsrs	r0, r3
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000
 8000b34:	08002abf 	.word	0x08002abf
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000b3e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	fa92 f2a2 	rbit	r2, r2
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000b50:	40d3      	lsrs	r3, r2
 8000b52:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000b54:	5cd3      	ldrb	r3, [r2, r3]
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000b58:	6810      	ldr	r0, [r2, #0]
} 
 8000b5a:	40d8      	lsrs	r0, r3
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000
 8000b64:	08002abf 	.word	0x08002abf
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000b6c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8000b70:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	f04f 0302 	mov.w	r3, #2
 8000b78:	f000 80b0 	beq.w	8000cdc <HAL_TIM_ConfigClockSource+0x170>

  htim->State = HAL_TIM_STATE_BUSY;
 8000b7c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000b80:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000b82:	2201      	movs	r2, #1
 8000b84:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000b88:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000b8a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000b8e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000b92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000b94:	680a      	ldr	r2, [r1, #0]
 8000b96:	2a40      	cmp	r2, #64	; 0x40
 8000b98:	d077      	beq.n	8000c8a <HAL_TIM_ConfigClockSource+0x11e>
 8000b9a:	d818      	bhi.n	8000bce <HAL_TIM_ConfigClockSource+0x62>
 8000b9c:	2a10      	cmp	r2, #16
 8000b9e:	f000 808b 	beq.w	8000cb8 <HAL_TIM_ConfigClockSource+0x14c>
 8000ba2:	d808      	bhi.n	8000bb6 <HAL_TIM_ConfigClockSource+0x4a>
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	f040 8093 	bne.w	8000cd0 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000baa:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000bac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000bb0:	f042 0207 	orr.w	r2, r2, #7
 8000bb4:	e08b      	b.n	8000cce <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8000bb6:	2a20      	cmp	r2, #32
 8000bb8:	f000 8084 	beq.w	8000cc4 <HAL_TIM_ConfigClockSource+0x158>
 8000bbc:	2a30      	cmp	r2, #48	; 0x30
 8000bbe:	f040 8087 	bne.w	8000cd0 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000bc2:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000bc4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000bc8:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000bcc:	e07f      	b.n	8000cce <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8000bce:	2a70      	cmp	r2, #112	; 0x70
 8000bd0:	d035      	beq.n	8000c3e <HAL_TIM_ConfigClockSource+0xd2>
 8000bd2:	d81b      	bhi.n	8000c0c <HAL_TIM_ConfigClockSource+0xa0>
 8000bd4:	2a50      	cmp	r2, #80	; 0x50
 8000bd6:	d041      	beq.n	8000c5c <HAL_TIM_ConfigClockSource+0xf0>
 8000bd8:	2a60      	cmp	r2, #96	; 0x60
 8000bda:	d179      	bne.n	8000cd0 <HAL_TIM_ConfigClockSource+0x164>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000bdc:	6a1c      	ldr	r4, [r3, #32]

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8000bde:	684d      	ldr	r5, [r1, #4]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000be0:	f024 0410 	bic.w	r4, r4, #16

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8000be4:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000be6:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000be8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000bea:	6a1a      	ldr	r2, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000bec:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000bf0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8000bf4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 8000bf8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000bfc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000bfe:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c00:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000c06:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000c0a:	e060      	b.n	8000cce <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8000c0c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000c10:	d011      	beq.n	8000c36 <HAL_TIM_ConfigClockSource+0xca>
 8000c12:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000c16:	d15b      	bne.n	8000cd0 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8000c18:	689c      	ldr	r4, [r3, #8]
 8000c1a:	688d      	ldr	r5, [r1, #8]
 8000c1c:	684a      	ldr	r2, [r1, #4]
 8000c1e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000c22:	68c9      	ldr	r1, [r1, #12]
 8000c24:	432a      	orrs	r2, r5
 8000c26:	4322      	orrs	r2, r4
 8000c28:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000c2c:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c34:	e04b      	b.n	8000cce <HAL_TIM_ConfigClockSource+0x162>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	f022 0207 	bic.w	r2, r2, #7
 8000c3c:	e047      	b.n	8000cce <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8000c3e:	689c      	ldr	r4, [r3, #8]
 8000c40:	688d      	ldr	r5, [r1, #8]
 8000c42:	684a      	ldr	r2, [r1, #4]
 8000c44:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000c48:	68c9      	ldr	r1, [r1, #12]
 8000c4a:	432a      	orrs	r2, r5
 8000c4c:	4322      	orrs	r2, r4
 8000c4e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000c52:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8000c54:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000c56:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000c5a:	e038      	b.n	8000cce <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000c5c:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c5e:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000c60:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c62:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000c66:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c68:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000c6a:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000c6c:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000c70:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000c74:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8000c76:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000c7a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c7c:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c7e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000c84:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000c88:	e021      	b.n	8000cce <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000c8a:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c8c:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8000c8e:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c90:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8000c94:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c96:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000c98:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000c9a:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000c9e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000ca2:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8000ca4:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000ca8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000caa:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000cac:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000cae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000cb2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000cb6:	e00a      	b.n	8000cce <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000cb8:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000cba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000cbe:	f042 0217 	orr.w	r2, r2, #23
 8000cc2:	e004      	b.n	8000cce <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000cc4:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000cc6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000cca:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8000cce:	609a      	str	r2, [r3, #8]
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000cdc:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8000cde:	bd70      	pop	{r4, r5, r6, pc}

08000ce0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ce0:	4a18      	ldr	r2, [pc, #96]	; (8000d44 <TIM_Base_SetConfig+0x64>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8000ce2:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	d00a      	beq.n	8000cfe <TIM_Base_SetConfig+0x1e>
 8000ce8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cec:	d007      	beq.n	8000cfe <TIM_Base_SetConfig+0x1e>
 8000cee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	d003      	beq.n	8000cfe <TIM_Base_SetConfig+0x1e>
 8000cf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d115      	bne.n	8000d2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000cfe:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000d04:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d06:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <TIM_Base_SetConfig+0x64>)
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	d00a      	beq.n	8000d22 <TIM_Base_SetConfig+0x42>
 8000d0c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d10:	d007      	beq.n	8000d22 <TIM_Base_SetConfig+0x42>
 8000d12:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d003      	beq.n	8000d22 <TIM_Base_SetConfig+0x42>
 8000d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	d103      	bne.n	8000d2a <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d22:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d28:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8000d2a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d2c:	688b      	ldr	r3, [r1, #8]
 8000d2e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d30:	680b      	ldr	r3, [r1, #0]
 8000d32:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <TIM_Base_SetConfig+0x64>)
 8000d36:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000d38:	bf04      	itt	eq
 8000d3a:	690b      	ldreq	r3, [r1, #16]
 8000d3c:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	6143      	str	r3, [r0, #20]
 8000d42:	4770      	bx	lr
 8000d44:	40012c00 	.word	0x40012c00

08000d48 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000d48:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	b1a0      	cbz	r0, 8000d78 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8000d4e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000d52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d56:	b91b      	cbnz	r3, 8000d60 <HAL_TIM_Base_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000d58:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000d5c:	f000 ff7a 	bl	8001c54 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000d60:	2302      	movs	r3, #2
 8000d62:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d66:	6820      	ldr	r0, [r4, #0]
 8000d68:	1d21      	adds	r1, r4, #4
 8000d6a:	f7ff ffb9 	bl	8000ce0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8000d74:	2000      	movs	r0, #0
 8000d76:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8000d78:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8000d7a:	bd10      	pop	{r4, pc}

08000d7c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000d7c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8000d80:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	f04f 0302 	mov.w	r3, #2
 8000d88:	d018      	beq.n	8000dbc <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000d8a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d8e:	6803      	ldr	r3, [r0, #0]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000d96:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000d98:	685c      	ldr	r4, [r3, #4]
 8000d9a:	680a      	ldr	r2, [r1, #0]
 8000d9c:	4322      	orrs	r2, r4
 8000d9e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000da6:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000da8:	689c      	ldr	r4, [r3, #8]
 8000daa:	684a      	ldr	r2, [r1, #4]
 8000dac:	4322      	orrs	r2, r4
 8000dae:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000db0:	2301      	movs	r3, #1
 8000db2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8000db6:	2300      	movs	r3, #0
 8000db8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000dbc:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8000dbe:	bd10      	pop	{r4, pc}

08000dc0 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000dc4:	6806      	ldr	r6, [r0, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 8000dc6:	6881      	ldr	r1, [r0, #8]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000dc8:	6933      	ldr	r3, [r6, #16]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000dca:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000dcc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000dd0:	68c3      	ldr	r3, [r0, #12]
 8000dd2:	2419      	movs	r4, #25
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	6133      	str	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 8000dd8:	6903      	ldr	r3, [r0, #16]
 8000dda:	68f2      	ldr	r2, [r6, #12]
 8000ddc:	4319      	orrs	r1, r3
 8000dde:	6943      	ldr	r3, [r0, #20]
 8000de0:	4319      	orrs	r1, r3
 8000de2:	f422 53b0 	bic.w	r3, r2, #5632	; 0x1600
 8000de6:	f023 030c 	bic.w	r3, r3, #12
 8000dea:	430b      	orrs	r3, r1
 8000dec:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000dee:	6973      	ldr	r3, [r6, #20]
 8000df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000df4:	6983      	ldr	r3, [r0, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	6173      	str	r3, [r6, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 8000dfa:	4b3d      	ldr	r3, [pc, #244]	; (8000ef0 <UART_SetConfig+0x130>)
 8000dfc:	429e      	cmp	r6, r3
 8000dfe:	d131      	bne.n	8000e64 <UART_SetConfig+0xa4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000e00:	f7ff fe9c 	bl	8000b3c <HAL_RCC_GetPCLK2Freq>
 8000e04:	4360      	muls	r0, r4
 8000e06:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000e0a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e0e:	00bf      	lsls	r7, r7, #2
 8000e10:	fbb0 f7f7 	udiv	r7, r0, r7
 8000e14:	f7ff fe92 	bl	8000b3c <HAL_RCC_GetPCLK2Freq>
 8000e18:	4360      	muls	r0, r4
 8000e1a:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8000e1e:	fbb7 f7f8 	udiv	r7, r7, r8
 8000e22:	00ad      	lsls	r5, r5, #2
 8000e24:	fbb0 f5f5 	udiv	r5, r0, r5
 8000e28:	f7ff fe88 	bl	8000b3c <HAL_RCC_GetPCLK2Freq>
 8000e2c:	4360      	muls	r0, r4
 8000e2e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e32:	013f      	lsls	r7, r7, #4
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e3a:	fbb0 f0f8 	udiv	r0, r0, r8
 8000e3e:	fb08 5510 	mls	r5, r8, r0, r5
 8000e42:	f7ff fe7b 	bl	8000b3c <HAL_RCC_GetPCLK2Freq>
 8000e46:	012d      	lsls	r5, r5, #4
 8000e48:	3532      	adds	r5, #50	; 0x32
 8000e4a:	fbb5 f5f8 	udiv	r5, r5, r8
 8000e4e:	4360      	muls	r0, r4
 8000e50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8000e54:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8000e58:	0089      	lsls	r1, r1, #2
 8000e5a:	fbb0 faf1 	udiv	sl, r0, r1
 8000e5e:	f7ff fe6d 	bl	8000b3c <HAL_RCC_GetPCLK2Freq>
 8000e62:	e030      	b.n	8000ec6 <UART_SetConfig+0x106>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e64:	f7ff fe52 	bl	8000b0c <HAL_RCC_GetPCLK1Freq>
 8000e68:	4360      	muls	r0, r4
 8000e6a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000e6e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e72:	00bf      	lsls	r7, r7, #2
 8000e74:	fbb0 f7f7 	udiv	r7, r0, r7
 8000e78:	f7ff fe48 	bl	8000b0c <HAL_RCC_GetPCLK1Freq>
 8000e7c:	4360      	muls	r0, r4
 8000e7e:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8000e82:	fbb7 f7f8 	udiv	r7, r7, r8
 8000e86:	00ad      	lsls	r5, r5, #2
 8000e88:	fbb0 f5f5 	udiv	r5, r0, r5
 8000e8c:	f7ff fe3e 	bl	8000b0c <HAL_RCC_GetPCLK1Freq>
 8000e90:	4360      	muls	r0, r4
 8000e92:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e96:	013f      	lsls	r7, r7, #4
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e9e:	fbb0 f0f8 	udiv	r0, r0, r8
 8000ea2:	fb08 5510 	mls	r5, r8, r0, r5
 8000ea6:	f7ff fe31 	bl	8000b0c <HAL_RCC_GetPCLK1Freq>
 8000eaa:	012d      	lsls	r5, r5, #4
 8000eac:	3532      	adds	r5, #50	; 0x32
 8000eae:	fbb5 f5f8 	udiv	r5, r5, r8
 8000eb2:	4360      	muls	r0, r4
 8000eb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8000eb8:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8000ebc:	0089      	lsls	r1, r1, #2
 8000ebe:	fbb0 faf1 	udiv	sl, r0, r1
 8000ec2:	f7ff fe23 	bl	8000b0c <HAL_RCC_GetPCLK1Freq>
 8000ec6:	4344      	muls	r4, r0
 8000ec8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8000ecc:	0080      	lsls	r0, r0, #2
 8000ece:	fbb4 f0f0 	udiv	r0, r4, r0
 8000ed2:	fbb0 f0f8 	udiv	r0, r0, r8
 8000ed6:	fb08 a210 	mls	r2, r8, r0, sl
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	3232      	adds	r2, #50	; 0x32
 8000ede:	fbb2 f3f8 	udiv	r3, r2, r8
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	442b      	add	r3, r5
 8000ee8:	441f      	add	r7, r3
 8000eea:	60b7      	str	r7, [r6, #8]
 8000eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef0:	40013800 	.word	0x40013800

08000ef4 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000ef4:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	b330      	cbz	r0, 8000f48 <HAL_UART_Init+0x54>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 8000efa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000efe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f02:	b91b      	cbnz	r3, 8000f0c <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000f04:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8000f08:	f000 feb6 	bl	8001c78 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000f0c:	6822      	ldr	r2, [r4, #0]
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->State = HAL_UART_STATE_BUSY;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000f14:	68d3      	ldr	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000f16:	4620      	mov	r0, r4
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000f18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f1c:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000f1e:	f7ff ff4f 	bl	8000dc0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f22:	6823      	ldr	r3, [r4, #0]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f24:	2000      	movs	r0, #0
  UART_SetConfig(huart);
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f26:	691a      	ldr	r2, [r3, #16]
 8000f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f2e:	695a      	ldr	r2, [r3, #20]
 8000f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000f34:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f3c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
 8000f3e:	2301      	movs	r3, #1
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f40:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8000f42:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8000f46:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8000f48:	2001      	movs	r0, #1
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8000f4a:	bd10      	pop	{r4, pc}

08000f4c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8000f4c:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f4e:	f000 fd6d 	bl	8001a2c <xTaskGetSchedulerState>
 8000f52:	2801      	cmp	r0, #1
 8000f54:	d003      	beq.n	8000f5e <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8000f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8000f5a:	f000 b8e7 	b.w	800112c <xPortSysTickHandler>
 8000f5e:	bd08      	pop	{r3, pc}

08000f60 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f60:	f100 0308 	add.w	r3, r0, #8
 8000f64:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000f66:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f6a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f6c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000f6e:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000f70:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000f72:	6003      	str	r3, [r0, #0]
 8000f74:	4770      	bx	lr

08000f76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	6103      	str	r3, [r0, #16]
 8000f7a:	4770      	bx	lr

08000f7c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000f7c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000f7e:	689a      	ldr	r2, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000f80:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000f82:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000f88:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000f8a:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000f8c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000f8e:	3301      	adds	r3, #1
 8000f90:	6003      	str	r3, [r0, #0]
 8000f92:	4770      	bx	lr

08000f94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000f94:	680a      	ldr	r2, [r1, #0]
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000f96:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000f98:	1c53      	adds	r3, r2, #1
 8000f9a:	d101      	bne.n	8000fa0 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000f9c:	6903      	ldr	r3, [r0, #16]
 8000f9e:	e007      	b.n	8000fb0 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fa0:	f100 0308 	add.w	r3, r0, #8
 8000fa4:	685c      	ldr	r4, [r3, #4]
 8000fa6:	6825      	ldr	r5, [r4, #0]
 8000fa8:	42aa      	cmp	r2, r5
 8000faa:	d301      	bcc.n	8000fb0 <vListInsert+0x1c>
 8000fac:	4623      	mov	r3, r4
 8000fae:	e7f9      	b.n	8000fa4 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000fb4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000fb6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000fb8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000fba:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000fbc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	6003      	str	r3, [r0, #0]
 8000fc2:	bd30      	pop	{r4, r5, pc}

08000fc4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000fc4:	6841      	ldr	r1, [r0, #4]
 8000fc6:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000fc8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000fca:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000fcc:	6882      	ldr	r2, [r0, #8]
 8000fce:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000fd0:	6859      	ldr	r1, [r3, #4]
 8000fd2:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000fd4:	bf08      	it	eq
 8000fd6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	3801      	subs	r0, #1
 8000fe0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8000fe2:	4770      	bx	lr

08000fe4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000fe4:	4806      	ldr	r0, [pc, #24]	; (8001000 <prvPortStartFirstTask+0x1c>)
 8000fe6:	6800      	ldr	r0, [r0, #0]
 8000fe8:	6800      	ldr	r0, [r0, #0]
 8000fea:	f380 8808 	msr	MSP, r0
 8000fee:	b662      	cpsie	i
 8000ff0:	b661      	cpsie	f
 8000ff2:	f3bf 8f4f 	dsb	sy
 8000ff6:	f3bf 8f6f 	isb	sy
 8000ffa:	df00      	svc	0
 8000ffc:	bf00      	nop
 8000ffe:	0000      	.short	0x0000
 8001000:	e000ed08 	.word	0xe000ed08

08001004 <pxPortInitialiseStack>:
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8001008:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <pxPortInitialiseStack+0x18>)
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800100e:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001012:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8001016:	3840      	subs	r0, #64	; 0x40
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	0800106d 	.word	0x0800106d

08001020 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <pxCurrentTCBConst2>)
 8001022:	6819      	ldr	r1, [r3, #0]
 8001024:	6808      	ldr	r0, [r1, #0]
 8001026:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800102a:	f380 8809 	msr	PSP, r0
 800102e:	f3bf 8f6f 	isb	sy
 8001032:	f04f 0000 	mov.w	r0, #0
 8001036:	f380 8811 	msr	BASEPRI, r0
 800103a:	f04e 0e0d 	orr.w	lr, lr, #13
 800103e:	4770      	bx	lr

08001040 <pxCurrentTCBConst2>:
 8001040:	20000d14 	.word	0x20000d14

08001044 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <vPortYield+0x14>)
 8001046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800104a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 800104c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001050:	f3bf 8f6f 	isb	sy
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000ed04 	.word	0xe000ed04

0800105c <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
 800105c:	f3ef 8011 	mrs	r0, BASEPRI
 8001060:	f04f 0150 	mov.w	r1, #80	; 0x50
 8001064:	f381 8811 	msr	BASEPRI, r1
 8001068:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
 800106a:	2000      	movs	r0, #0

0800106c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800106c:	b508      	push	{r3, lr}
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800106e:	4b05      	ldr	r3, [pc, #20]	; (8001084 <prvTaskExitError+0x18>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	d002      	beq.n	800107c <prvTaskExitError+0x10>
 8001076:	f7ff fff1 	bl	800105c <ulPortSetInterruptMask>
 800107a:	e7fe      	b.n	800107a <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 800107c:	f7ff ffee 	bl	800105c <ulPortSetInterruptMask>
 8001080:	e7fe      	b.n	8001080 <prvTaskExitError+0x14>
 8001082:	bf00      	nop
 8001084:	20000000 	.word	0x20000000

08001088 <vPortEnterCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001088:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
 800108a:	f7ff ffe7 	bl	800105c <ulPortSetInterruptMask>
	uxCriticalNesting++;
 800108e:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <vPortEnterCritical+0x2c>)
 8001090:	6813      	ldr	r3, [r2, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 8001096:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800109a:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d107      	bne.n	80010b2 <vPortEnterCritical+0x2a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <vPortEnterCritical+0x30>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80010aa:	d002      	beq.n	80010b2 <vPortEnterCritical+0x2a>
 80010ac:	f7ff ffd6 	bl	800105c <ulPortSetInterruptMask>
 80010b0:	e7fe      	b.n	80010b0 <vPortEnterCritical+0x28>
 80010b2:	bd08      	pop	{r3, pc}
 80010b4:	20000000 	.word	0x20000000
 80010b8:	e000ed04 	.word	0xe000ed04

080010bc <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
 80010bc:	f380 8811 	msr	BASEPRI, r0
 80010c0:	4770      	bx	lr
	...

080010c4 <vPortExitCritical>:
	}
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80010c4:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <vPortExitCritical+0x20>)
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	b910      	cbnz	r0, 80010d2 <vPortExitCritical+0xe>
 80010cc:	f7ff ffc6 	bl	800105c <ulPortSetInterruptMask>
 80010d0:	e7fe      	b.n	80010d0 <vPortExitCritical+0xc>
	uxCriticalNesting--;
 80010d2:	3801      	subs	r0, #1
 80010d4:	6018      	str	r0, [r3, #0]
	if( uxCriticalNesting == 0 )
 80010d6:	b918      	cbnz	r0, 80010e0 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
	}
}
 80010d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
	if( uxCriticalNesting == 0 )
	{
		portENABLE_INTERRUPTS();
 80010dc:	f7ff bfee 	b.w	80010bc <vPortClearInterruptMask>
 80010e0:	bd08      	pop	{r3, pc}
 80010e2:	bf00      	nop
 80010e4:	20000000 	.word	0x20000000

080010e8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80010e8:	f3ef 8009 	mrs	r0, PSP
 80010ec:	f3bf 8f6f 	isb	sy
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <pxCurrentTCBConst>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80010f8:	6010      	str	r0, [r2, #0]
 80010fa:	e92d 4008 	stmdb	sp!, {r3, lr}
 80010fe:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001102:	f380 8811 	msr	BASEPRI, r0
 8001106:	f000 fc49 	bl	800199c <vTaskSwitchContext>
 800110a:	f04f 0000 	mov.w	r0, #0
 800110e:	f380 8811 	msr	BASEPRI, r0
 8001112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001116:	6819      	ldr	r1, [r3, #0]
 8001118:	6808      	ldr	r0, [r1, #0]
 800111a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800111e:	f380 8809 	msr	PSP, r0
 8001122:	f3bf 8f6f 	isb	sy
 8001126:	4770      	bx	lr

08001128 <pxCurrentTCBConst>:
 8001128:	20000d14 	.word	0x20000d14

0800112c <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800112c:	b508      	push	{r3, lr}
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 800112e:	f7ff ff95 	bl	800105c <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001132:	f000 fab7 	bl	80016a4 <xTaskIncrementTick>
 8001136:	b118      	cbz	r0, 8001140 <xPortSysTickHandler+0x14>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <xPortSysTickHandler+0x20>)
 800113a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800113e:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8001140:	2000      	movs	r0, #0
}
 8001142:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8001146:	f7ff bfb9 	b.w	80010bc <vPortClearInterruptMask>
 800114a:	bf00      	nop
 800114c:	e000ed04 	.word	0xe000ed04

08001150 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <vPortSetupTimerInterrupt+0x1c>)
 8001152:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	fbb3 f3f2 	udiv	r3, r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <vPortSetupTimerInterrupt+0x20>)
 800115e:	3b01      	subs	r3, #1
 8001160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <vPortSetupTimerInterrupt+0x24>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000004 	.word	0x20000004
 8001170:	e000e014 	.word	0xe000e014
 8001174:	e000e010 	.word	0xe000e010

08001178 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001178:	b513      	push	{r0, r1, r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <xPortStartScheduler+0x80>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800117c:	2100      	movs	r1, #0
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800117e:	781a      	ldrb	r2, [r3, #0]
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001184:	22ff      	movs	r2, #255	; 0xff
 8001186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001188:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800118a:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <xPortStartScheduler+0x84>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001192:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001196:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800119a:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <xPortStartScheduler+0x88>)
 800119e:	2207      	movs	r2, #7
 80011a0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80011a2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80011a6:	1e54      	subs	r4, r2, #1
 80011a8:	0600      	lsls	r0, r0, #24
 80011aa:	d508      	bpl.n	80011be <xPortStartScheduler+0x46>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80011ac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80011b0:	2101      	movs	r1, #1
 80011b2:	0052      	lsls	r2, r2, #1
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	f88d 2003 	strb.w	r2, [sp, #3]
 80011ba:	4622      	mov	r2, r4
 80011bc:	e7f1      	b.n	80011a2 <xPortStartScheduler+0x2a>
 80011be:	b101      	cbz	r1, 80011c2 <xPortStartScheduler+0x4a>
 80011c0:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	0212      	lsls	r2, r2, #8
 80011c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80011ca:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80011cc:	9b01      	ldr	r3, [sp, #4]
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <xPortStartScheduler+0x80>)
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <xPortStartScheduler+0x8c>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80011dc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80011e4:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80011e6:	f7ff ffb3 	bl	8001150 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <xPortStartScheduler+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80011f0:	f7ff fef8 	bl	8000fe4 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80011f4:	f7ff ff3a 	bl	800106c <prvTaskExitError>
 80011f8:	e000e400 	.word	0xe000e400
 80011fc:	2000002c 	.word	0x2000002c
 8001200:	20000030 	.word	0x20000030
 8001204:	e000ed20 	.word	0xe000ed20
 8001208:	20000000 	.word	0x20000000

0800120c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800120c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <prvInsertBlockIntoFreeList+0x40>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4282      	cmp	r2, r0
 8001214:	d201      	bcs.n	800121a <prvInsertBlockIntoFreeList+0xe>
 8001216:	4613      	mov	r3, r2
 8001218:	e7fa      	b.n	8001210 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800121a:	6859      	ldr	r1, [r3, #4]
 800121c:	185c      	adds	r4, r3, r1
 800121e:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001220:	bf01      	itttt	eq
 8001222:	6840      	ldreq	r0, [r0, #4]
 8001224:	1809      	addeq	r1, r1, r0
 8001226:	4618      	moveq	r0, r3
 8001228:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800122a:	6841      	ldr	r1, [r0, #4]
 800122c:	1844      	adds	r4, r0, r1
 800122e:	42a2      	cmp	r2, r4
 8001230:	d107      	bne.n	8001242 <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001232:	4c07      	ldr	r4, [pc, #28]	; (8001250 <prvInsertBlockIntoFreeList+0x44>)
 8001234:	6824      	ldr	r4, [r4, #0]
 8001236:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001238:	bf1f      	itttt	ne
 800123a:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800123c:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800123e:	1909      	addne	r1, r1, r4
 8001240:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001242:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001244:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001246:	bf18      	it	ne
 8001248:	6018      	strne	r0, [r3, #0]
 800124a:	bd10      	pop	{r4, pc}
 800124c:	2000003c 	.word	0x2000003c
 8001250:	20000038 	.word	0x20000038

08001254 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001258:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800125a:	f000 fa1b 	bl	8001694 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800125e:	493e      	ldr	r1, [pc, #248]	; (8001358 <pvPortMalloc+0x104>)
 8001260:	4d3e      	ldr	r5, [pc, #248]	; (800135c <pvPortMalloc+0x108>)
 8001262:	680b      	ldr	r3, [r1, #0]
 8001264:	bb0b      	cbnz	r3, 80012aa <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001266:	4a3e      	ldr	r2, [pc, #248]	; (8001360 <pvPortMalloc+0x10c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001268:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800126a:	bf1f      	itttt	ne
 800126c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800126e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001272:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001276:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001278:	bf14      	ite	ne
 800127a:	1a1b      	subne	r3, r3, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800127c:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001280:	4413      	add	r3, r2

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001282:	4e38      	ldr	r6, [pc, #224]	; (8001364 <pvPortMalloc+0x110>)
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
 8001284:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001286:	f023 0307 	bic.w	r3, r3, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 800128a:	2000      	movs	r0, #0
 800128c:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800128e:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 8001290:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001292:	6018      	str	r0, [r3, #0]
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8001294:	600b      	str	r3, [r1, #0]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001296:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001298:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800129a:	4b33      	ldr	r3, [pc, #204]	; (8001368 <pvPortMalloc+0x114>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800129c:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800129e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80012a0:	4b32      	ldr	r3, [pc, #200]	; (800136c <pvPortMalloc+0x118>)
 80012a2:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80012a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80012a8:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80012aa:	f8d5 9000 	ldr.w	r9, [r5]
 80012ae:	ea19 0f04 	tst.w	r9, r4
 80012b2:	d140      	bne.n	8001336 <pvPortMalloc+0xe2>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80012b4:	2c00      	cmp	r4, #0
 80012b6:	d03c      	beq.n	8001332 <pvPortMalloc+0xde>
			{
				xWantedSize += xHeapStructSize;
 80012b8:	3408      	adds	r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80012ba:	0760      	lsls	r0, r4, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80012bc:	bf1c      	itt	ne
 80012be:	f024 0407 	bicne.w	r4, r4, #7
 80012c2:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	d034      	beq.n	8001332 <pvPortMalloc+0xde>
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <pvPortMalloc+0x118>)
 80012ca:	681f      	ldr	r7, [r3, #0]
 80012cc:	4698      	mov	r8, r3
 80012ce:	42bc      	cmp	r4, r7
 80012d0:	d831      	bhi.n	8001336 <pvPortMalloc+0xe2>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <pvPortMalloc+0x110>)
 80012d4:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80012d6:	6868      	ldr	r0, [r5, #4]
 80012d8:	4284      	cmp	r4, r0
 80012da:	d803      	bhi.n	80012e4 <pvPortMalloc+0x90>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80012dc:	680a      	ldr	r2, [r1, #0]
 80012de:	4295      	cmp	r5, r2
 80012e0:	d106      	bne.n	80012f0 <pvPortMalloc+0x9c>
 80012e2:	e028      	b.n	8001336 <pvPortMalloc+0xe2>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80012e4:	682a      	ldr	r2, [r5, #0]
 80012e6:	2a00      	cmp	r2, #0
 80012e8:	d0f8      	beq.n	80012dc <pvPortMalloc+0x88>
 80012ea:	462b      	mov	r3, r5
 80012ec:	4615      	mov	r5, r2
 80012ee:	e7f2      	b.n	80012d6 <pvPortMalloc+0x82>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80012f0:	682a      	ldr	r2, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80012f2:	681e      	ldr	r6, [r3, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80012f4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80012f6:	1b03      	subs	r3, r0, r4
 80012f8:	2b10      	cmp	r3, #16
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80012fa:	f106 0608 	add.w	r6, r6, #8
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80012fe:	d909      	bls.n	8001314 <pvPortMalloc+0xc0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001300:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001302:	0742      	lsls	r2, r0, #29
 8001304:	d002      	beq.n	800130c <pvPortMalloc+0xb8>
 8001306:	f7ff fea9 	bl	800105c <ulPortSetInterruptMask>
 800130a:	e7fe      	b.n	800130a <pvPortMalloc+0xb6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800130c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800130e:	606c      	str	r4, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001310:	f7ff ff7c 	bl	800120c <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001314:	4914      	ldr	r1, [pc, #80]	; (8001368 <pvPortMalloc+0x114>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001316:	686a      	ldr	r2, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001318:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800131a:	1abb      	subs	r3, r7, r2

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800131c:	4283      	cmp	r3, r0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800131e:	f8c8 3000 	str.w	r3, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001322:	bf38      	it	cc
 8001324:	600b      	strcc	r3, [r1, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001326:	ea49 0202 	orr.w	r2, r9, r2
					pxBlock->pxNextFreeBlock = NULL;
 800132a:	2300      	movs	r3, #0
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800132c:	606a      	str	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800132e:	602b      	str	r3, [r5, #0]
 8001330:	e002      	b.n	8001338 <pvPortMalloc+0xe4>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001332:	4626      	mov	r6, r4
 8001334:	e000      	b.n	8001338 <pvPortMalloc+0xe4>
 8001336:	2600      	movs	r6, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 8001338:	4622      	mov	r2, r4
 800133a:	4631      	mov	r1, r6
 800133c:	2038      	movs	r0, #56	; 0x38
 800133e:	f001 f9d5 	bl	80026ec <prvTraceStoreEvent2>
	}
	( void ) xTaskResumeAll();
 8001342:	f000 fa55 	bl	80017f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001346:	0773      	lsls	r3, r6, #29
 8001348:	d002      	beq.n	8001350 <pvPortMalloc+0xfc>
 800134a:	f7ff fe87 	bl	800105c <ulPortSetInterruptMask>
 800134e:	e7fe      	b.n	800134e <pvPortMalloc+0xfa>
	return pvReturn;
}
 8001350:	4630      	mov	r0, r6
 8001352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001356:	bf00      	nop
 8001358:	20000038 	.word	0x20000038
 800135c:	20000c44 	.word	0x20000c44
 8001360:	20000044 	.word	0x20000044
 8001364:	2000003c 	.word	0x2000003c
 8001368:	20000c48 	.word	0x20000c48
 800136c:	20000034 	.word	0x20000034

08001370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001370:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8001372:	4604      	mov	r4, r0
 8001374:	b338      	cbz	r0, 80013c6 <vPortFree+0x56>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <vPortFree+0x58>)
 8001378:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	4213      	tst	r3, r2
 8001380:	d102      	bne.n	8001388 <vPortFree+0x18>
 8001382:	f7ff fe6b 	bl	800105c <ulPortSetInterruptMask>
 8001386:	e7fe      	b.n	8001386 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001388:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800138c:	b111      	cbz	r1, 8001394 <vPortFree+0x24>
 800138e:	f7ff fe65 	bl	800105c <ulPortSetInterruptMask>
 8001392:	e7fe      	b.n	8001392 <vPortFree+0x22>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001394:	ea23 0302 	bic.w	r3, r3, r2
 8001398:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 800139c:	f000 f97a 	bl	8001694 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80013a0:	490a      	ldr	r1, [pc, #40]	; (80013cc <vPortFree+0x5c>)
 80013a2:	f854 2c04 	ldr.w	r2, [r4, #-4]
 80013a6:	680b      	ldr	r3, [r1, #0]
					traceFREE( pv, pxLink->xBlockSize );
 80013a8:	2039      	movs	r0, #57	; 0x39
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80013aa:	4413      	add	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
					traceFREE( pv, pxLink->xBlockSize );
 80013ae:	4252      	negs	r2, r2
 80013b0:	4621      	mov	r1, r4
 80013b2:	f001 f99b 	bl	80026ec <prvTraceStoreEvent2>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80013b6:	f1a4 0008 	sub.w	r0, r4, #8
 80013ba:	f7ff ff27 	bl	800120c <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80013be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 80013c2:	f000 ba15 	b.w	80017f0 <xTaskResumeAll>
 80013c6:	bd10      	pop	{r4, pc}
 80013c8:	20000c44 	.word	0x20000c44
 80013cc:	20000034 	.word	0x20000034

080013d0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013d0:	4a06      	ldr	r2, [pc, #24]	; (80013ec <prvResetNextTaskUnblockTime+0x1c>)
 80013d2:	6813      	ldr	r3, [r2, #0]
 80013d4:	6819      	ldr	r1, [r3, #0]
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <prvResetNextTaskUnblockTime+0x20>)
 80013d8:	b911      	cbnz	r1, 80013e0 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80013da:	f04f 32ff 	mov.w	r2, #4294967295
 80013de:	e003      	b.n	80013e8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80013e4:	68d2      	ldr	r2, [r2, #12]
 80013e6:	6852      	ldr	r2, [r2, #4]
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	4770      	bx	lr
 80013ec:	20000c50 	.word	0x20000c50
 80013f0:	20000d18 	.word	0x20000d18

080013f4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <prvAddCurrentTaskToDelayedList+0x3c>)
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80013f6:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80013f8:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80013fa:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80013fc:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 80013fe:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <prvAddCurrentTaskToDelayedList+0x40>)
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	4290      	cmp	r0, r2
 8001404:	d207      	bcs.n	8001416 <prvAddCurrentTaskToDelayedList+0x22>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <prvAddCurrentTaskToDelayedList+0x44>)
 800140c:	6810      	ldr	r0, [r2, #0]
 800140e:	6819      	ldr	r1, [r3, #0]
 8001410:	3104      	adds	r1, #4
 8001412:	f7ff bdbf 	b.w	8000f94 <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001416:	4a09      	ldr	r2, [pc, #36]	; (800143c <prvAddCurrentTaskToDelayedList+0x48>)
 8001418:	6810      	ldr	r0, [r2, #0]
 800141a:	6819      	ldr	r1, [r3, #0]
 800141c:	3104      	adds	r1, #4
 800141e:	f7ff fdb9 	bl	8000f94 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <prvAddCurrentTaskToDelayedList+0x4c>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8001428:	bf38      	it	cc
 800142a:	601c      	strcc	r4, [r3, #0]
 800142c:	bd10      	pop	{r4, pc}
 800142e:	bf00      	nop
 8001430:	20000d14 	.word	0x20000d14
 8001434:	20000d20 	.word	0x20000d20
 8001438:	20000d24 	.word	0x20000d24
 800143c:	20000c50 	.word	0x20000c50
 8001440:	20000d18 	.word	0x20000d18

08001444 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001448:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800144a:	469a      	mov	sl, r3
 800144c:	460f      	mov	r7, r1
 800144e:	4615      	mov	r5, r2
 8001450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8001452:	4681      	mov	r9, r0
 8001454:	b910      	cbnz	r0, 800145c <xTaskGenericCreate+0x18>
 8001456:	f7ff fe01 	bl	800105c <ulPortSetInterruptMask>
 800145a:	e7fe      	b.n	800145a <xTaskGenericCreate+0x16>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800145c:	2e06      	cmp	r6, #6
 800145e:	d902      	bls.n	8001466 <xTaskGenericCreate+0x22>
 8001460:	f7ff fdfc 	bl	800105c <ulPortSetInterruptMask>
 8001464:	e7fe      	b.n	8001464 <xTaskGenericCreate+0x20>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001466:	b93b      	cbnz	r3, 8001478 <xTaskGenericCreate+0x34>
 8001468:	0090      	lsls	r0, r2, #2
 800146a:	f7ff fef3 	bl	8001254 <pvPortMalloc>

		if( pxStack != NULL )
 800146e:	4683      	mov	fp, r0
 8001470:	2800      	cmp	r0, #0
 8001472:	f000 80bd 	beq.w	80015f0 <xTaskGenericCreate+0x1ac>
 8001476:	e000      	b.n	800147a <xTaskGenericCreate+0x36>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001478:	469b      	mov	fp, r3

		if( pxStack != NULL )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800147a:	205c      	movs	r0, #92	; 0x5c
 800147c:	f7ff feea 	bl	8001254 <pvPortMalloc>

			if( pxNewTCB != NULL )
 8001480:	4604      	mov	r4, r0
 8001482:	b190      	cbz	r0, 80014aa <xTaskGenericCreate+0x66>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8001484:	00ad      	lsls	r5, r5, #2
 8001486:	462a      	mov	r2, r5
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8001488:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800148c:	21a5      	movs	r1, #165	; 0xa5
 800148e:	4658      	mov	r0, fp
 8001490:	f001 fadf 	bl	8002a52 <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001494:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001496:	3d04      	subs	r5, #4
 8001498:	441d      	add	r5, r3
 800149a:	f025 0507 	bic.w	r5, r5, #7
 800149e:	1e7b      	subs	r3, r7, #1
 80014a0:	f104 0233 	add.w	r2, r4, #51	; 0x33
 80014a4:	f107 010f 	add.w	r1, r7, #15
 80014a8:	e005      	b.n	80014b6 <xTaskGenericCreate+0x72>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 80014aa:	4658      	mov	r0, fp
 80014ac:	f7ff ff60 	bl	8001370 <vPortFree>
 80014b0:	e09e      	b.n	80015f0 <xTaskGenericCreate+0x1ac>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80014b2:	428b      	cmp	r3, r1
 80014b4:	d006      	beq.n	80014c4 <xTaskGenericCreate+0x80>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80014b6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80014ba:	f802 0f01 	strb.w	r0, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80014be:	7818      	ldrb	r0, [r3, #0]
 80014c0:	2800      	cmp	r0, #0
 80014c2:	d1f6      	bne.n	80014b2 <xTaskGenericCreate+0x6e>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80014c4:	f04f 0800 	mov.w	r8, #0
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80014c8:	f104 0b04 	add.w	fp, r4, #4
 80014cc:	4658      	mov	r0, fp
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80014ce:	f884 8043 	strb.w	r8, [r4, #67]	; 0x43
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 80014d2:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80014d4:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 80014d6:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80014da:	f7ff fd4c 	bl	8000f76 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80014de:	f104 0018 	add.w	r0, r4, #24
 80014e2:	f7ff fd48 	bl	8000f76 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014e6:	f1c6 0207 	rsb	r2, r6, #7
 80014ea:	61a2      	str	r2, [r4, #24]
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 80014ec:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80014f0:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80014f2:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 80014f4:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80014f8:	4652      	mov	r2, sl
 80014fa:	4649      	mov	r1, r9
 80014fc:	4628      	mov	r0, r5
 80014fe:	f7ff fd81 	bl	8001004 <pxPortInitialiseStack>
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8001502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001504:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8001506:	b103      	cbz	r3, 800150a <xTaskGenericCreate+0xc6>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001508:	601c      	str	r4, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 800150a:	f7ff fdbd 	bl	8001088 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 800150e:	4a3c      	ldr	r2, [pc, #240]	; (8001600 <xTaskGenericCreate+0x1bc>)
			if( pxCurrentTCB == NULL )
 8001510:	4d3c      	ldr	r5, [pc, #240]	; (8001604 <xTaskGenericCreate+0x1c0>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8001512:	6813      	ldr	r3, [r2, #0]
 8001514:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8001628 <xTaskGenericCreate+0x1e4>
 8001518:	3301      	adds	r3, #1
 800151a:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800151c:	682b      	ldr	r3, [r5, #0]
 800151e:	bb3b      	cbnz	r3, 8001570 <xTaskGenericCreate+0x12c>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8001520:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	2a01      	cmp	r2, #1
 8001526:	d12b      	bne.n	8001580 <xTaskGenericCreate+0x13c>
 8001528:	4698      	mov	r8, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800152a:	eb09 0008 	add.w	r0, r9, r8
 800152e:	f108 0814 	add.w	r8, r8, #20
 8001532:	f7ff fd15 	bl	8000f60 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001536:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 800153a:	d1f6      	bne.n	800152a <xTaskGenericCreate+0xe6>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800153c:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 800162c <xTaskGenericCreate+0x1e8>
	vListInitialise( &xDelayedTaskList2 );
 8001540:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8001630 <xTaskGenericCreate+0x1ec>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8001544:	4650      	mov	r0, sl
 8001546:	f7ff fd0b 	bl	8000f60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800154a:	4640      	mov	r0, r8
 800154c:	f7ff fd08 	bl	8000f60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001550:	482d      	ldr	r0, [pc, #180]	; (8001608 <xTaskGenericCreate+0x1c4>)
 8001552:	f7ff fd05 	bl	8000f60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001556:	482d      	ldr	r0, [pc, #180]	; (800160c <xTaskGenericCreate+0x1c8>)
 8001558:	f7ff fd02 	bl	8000f60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800155c:	482c      	ldr	r0, [pc, #176]	; (8001610 <xTaskGenericCreate+0x1cc>)
 800155e:	f7ff fcff 	bl	8000f60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001562:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <xTaskGenericCreate+0x1d0>)
 8001564:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <xTaskGenericCreate+0x1d4>)
 800156a:	f8c3 8000 	str.w	r8, [r3]
 800156e:	e007      	b.n	8001580 <xTaskGenericCreate+0x13c>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <xTaskGenericCreate+0x1d8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	b923      	cbnz	r3, 8001580 <xTaskGenericCreate+0x13c>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8001576:	682b      	ldr	r3, [r5, #0]
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	429e      	cmp	r6, r3
					{
						pxCurrentTCB = pxNewTCB;
 800157c:	bf28      	it	cs
 800157e:	602c      	strcs	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001580:	4a27      	ldr	r2, [pc, #156]	; (8001620 <xTaskGenericCreate+0x1dc>)
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );
 8001582:	4620      	mov	r0, r4
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001584:	6813      	ldr	r3, [r2, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );
 8001586:	4639      	mov	r1, r7
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001588:	3301      	adds	r3, #1

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800158a:	6463      	str	r3, [r4, #68]	; 0x44
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 800158c:	6013      	str	r3, [r2, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );
 800158e:	f000 fe73 	bl	8002278 <prvTraceSaveSymbol>
 8001592:	4620      	mov	r0, r4
 8001594:	4631      	mov	r1, r6
 8001596:	f000 febb 	bl	8002310 <prvTraceSaveObjectData>
 800159a:	4623      	mov	r3, r4
 800159c:	463a      	mov	r2, r7
 800159e:	2103      	movs	r1, #3
 80015a0:	2001      	movs	r0, #1
 80015a2:	f001 f82d 	bl	8002600 <prvTraceStoreStringEvent>
 80015a6:	4632      	mov	r2, r6
 80015a8:	4621      	mov	r1, r4
 80015aa:	2010      	movs	r0, #16
 80015ac:	f001 f89e 	bl	80026ec <prvTraceStoreEvent2>

			prvAddTaskToReadyList( pxNewTCB );
 80015b0:	4621      	mov	r1, r4
 80015b2:	2030      	movs	r0, #48	; 0x30
 80015b4:	f001 f86c 	bl	8002690 <prvTraceStoreEvent1>
 80015b8:	491a      	ldr	r1, [pc, #104]	; (8001624 <xTaskGenericCreate+0x1e0>)
 80015ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015bc:	680b      	ldr	r3, [r1, #0]
 80015be:	2401      	movs	r4, #1
 80015c0:	fa04 f002 	lsl.w	r0, r4, r2
 80015c4:	4303      	orrs	r3, r0
 80015c6:	2014      	movs	r0, #20
 80015c8:	600b      	str	r3, [r1, #0]
 80015ca:	fb00 9002 	mla	r0, r0, r2, r9
 80015ce:	4659      	mov	r1, fp
 80015d0:	f7ff fcd4 	bl	8000f7c <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80015d4:	f7ff fd76 	bl	80010c4 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <xTaskGenericCreate+0x1d8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	b12b      	cbz	r3, 80015ea <xTaskGenericCreate+0x1a6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80015de:	682b      	ldr	r3, [r5, #0]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	429e      	cmp	r6, r3
 80015e4:	d901      	bls.n	80015ea <xTaskGenericCreate+0x1a6>
			{
				taskYIELD_IF_USING_PREEMPTION();
 80015e6:	f7ff fd2d 	bl	8001044 <vPortYield>
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
 80015ea:	4620      	mov	r0, r4
 80015ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		traceTASK_CREATE_FAILED();
 80015f0:	2040      	movs	r0, #64	; 0x40
 80015f2:	f001 f823 	bl	800263c <prvTraceStoreEvent0>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80015f6:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 80015fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015fe:	bf00      	nop
 8001600:	20000d40 	.word	0x20000d40
 8001604:	20000d14 	.word	0x20000d14
 8001608:	20000d28 	.word	0x20000d28
 800160c:	20000d00 	.word	0x20000d00
 8001610:	20000d58 	.word	0x20000d58
 8001614:	20000c50 	.word	0x20000c50
 8001618:	20000d24 	.word	0x20000d24
 800161c:	20000c54 	.word	0x20000c54
 8001620:	20000d3c 	.word	0x20000d3c
 8001624:	20000d6c 	.word	0x20000d6c
 8001628:	20000c74 	.word	0x20000c74
 800162c:	20000c5c 	.word	0x20000c5c
 8001630:	20000d44 	.word	0x20000d44

08001634 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001634:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8001636:	2400      	movs	r4, #0

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001638:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800163a:	9403      	str	r4, [sp, #12]
 800163c:	9402      	str	r4, [sp, #8]
 800163e:	9401      	str	r4, [sp, #4]
 8001640:	9400      	str	r4, [sp, #0]
 8001642:	4623      	mov	r3, r4
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	490e      	ldr	r1, [pc, #56]	; (8001680 <vTaskStartScheduler+0x4c>)
 8001648:	480e      	ldr	r0, [pc, #56]	; (8001684 <vTaskStartScheduler+0x50>)
 800164a:	f7ff fefb 	bl	8001444 <xTaskGenericCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800164e:	2801      	cmp	r0, #1
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8001650:	4605      	mov	r5, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001652:	d10e      	bne.n	8001672 <vTaskStartScheduler+0x3e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8001654:	f7ff fd02 	bl	800105c <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <vTaskStartScheduler+0x54>)
 800165a:	f04f 32ff 	mov.w	r2, #4294967295
 800165e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <vTaskStartScheduler+0x58>)
 8001662:	601d      	str	r5, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <vTaskStartScheduler+0x5c>)
 8001666:	601c      	str	r4, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8001668:	b005      	add	sp, #20
 800166a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800166e:	f7ff bd83 	b.w	8001178 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8001672:	b910      	cbnz	r0, 800167a <vTaskStartScheduler+0x46>
 8001674:	f7ff fcf2 	bl	800105c <ulPortSetInterruptMask>
 8001678:	e7fe      	b.n	8001678 <vTaskStartScheduler+0x44>
	}
}
 800167a:	b005      	add	sp, #20
 800167c:	bd30      	pop	{r4, r5, pc}
 800167e:	bf00      	nop
 8001680:	08002a9e 	.word	0x08002a9e
 8001684:	08001935 	.word	0x08001935
 8001688:	20000d18 	.word	0x20000d18
 800168c:	20000c54 	.word	0x20000c54
 8001690:	20000d20 	.word	0x20000d20

08001694 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001694:	4a02      	ldr	r2, [pc, #8]	; (80016a0 <vTaskSuspendAll+0xc>)
 8001696:	6813      	ldr	r3, [r2, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000d1c 	.word	0x20000d1c

080016a4 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80016a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
BaseType_t xSwitchRequired = pdFALSE;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 80016a8:	4c45      	ldr	r4, [pc, #276]	; (80017c0 <xTaskIncrementTick+0x11c>)
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d002      	beq.n	80016b6 <xTaskIncrementTick+0x12>
 80016b0:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <xTaskIncrementTick+0x120>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b91b      	cbnz	r3, 80016be <xTaskIncrementTick+0x1a>
 80016b6:	4a44      	ldr	r2, [pc, #272]	; (80017c8 <xTaskIncrementTick+0x124>)
 80016b8:	6813      	ldr	r3, [r2, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	6823      	ldr	r3, [r4, #0]
 80016c0:	b92b      	cbnz	r3, 80016ce <xTaskIncrementTick+0x2a>
 80016c2:	4b42      	ldr	r3, [pc, #264]	; (80017cc <xTaskIncrementTick+0x128>)
 80016c4:	2031      	movs	r0, #49	; 0x31
 80016c6:	6819      	ldr	r1, [r3, #0]
 80016c8:	3101      	adds	r1, #1
 80016ca:	f000 ffe1 	bl	8002690 <prvTraceStoreEvent1>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d136      	bne.n	8001742 <xTaskIncrementTick+0x9e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 80016d4:	4b3d      	ldr	r3, [pc, #244]	; (80017cc <xTaskIncrementTick+0x128>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	3201      	adds	r2, #1
 80016da:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80016dc:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 80016de:	b98e      	cbnz	r6, 8001704 <xTaskIncrementTick+0x60>
			{
				taskSWITCH_DELAYED_LISTS();
 80016e0:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <xTaskIncrementTick+0x12c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	b112      	cbz	r2, 80016ee <xTaskIncrementTick+0x4a>
 80016e8:	f7ff fcb8 	bl	800105c <ulPortSetInterruptMask>
 80016ec:	e7fe      	b.n	80016ec <xTaskIncrementTick+0x48>
 80016ee:	4a39      	ldr	r2, [pc, #228]	; (80017d4 <xTaskIncrementTick+0x130>)
 80016f0:	6819      	ldr	r1, [r3, #0]
 80016f2:	6810      	ldr	r0, [r2, #0]
 80016f4:	6018      	str	r0, [r3, #0]
 80016f6:	6011      	str	r1, [r2, #0]
 80016f8:	4a37      	ldr	r2, [pc, #220]	; (80017d8 <xTaskIncrementTick+0x134>)
 80016fa:	6813      	ldr	r3, [r2, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	f7ff fe66 	bl	80013d0 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8001704:	4d35      	ldr	r5, [pc, #212]	; (80017dc <xTaskIncrementTick+0x138>)
 8001706:	2400      	movs	r4, #0
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	9501      	str	r5, [sp, #4]
 800170c:	429e      	cmp	r6, r3
 800170e:	4f34      	ldr	r7, [pc, #208]	; (80017e0 <xTaskIncrementTick+0x13c>)
 8001710:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80017e8 <xTaskIncrementTick+0x144>
 8001714:	d30b      	bcc.n	800172e <xTaskIncrementTick+0x8a>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001716:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80017d0 <xTaskIncrementTick+0x12c>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800171a:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 80017ec <xTaskIncrementTick+0x148>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800171e:	f8d9 3000 	ldr.w	r3, [r9]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	b99b      	cbnz	r3, 800174e <xTaskIncrementTick+0xaa>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8001726:	9a01      	ldr	r2, [sp, #4]
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	6013      	str	r3, [r2, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800172e:	f8d8 3000 	ldr.w	r3, [r8]
 8001732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001734:	2314      	movs	r3, #20
 8001736:	4353      	muls	r3, r2
 8001738:	58fb      	ldr	r3, [r7, r3]
			{
				xSwitchRequired = pdTRUE;
 800173a:	2b02      	cmp	r3, #2
 800173c:	bf28      	it	cs
 800173e:	2401      	movcs	r4, #1
 8001740:	e034      	b.n	80017ac <xTaskIncrementTick+0x108>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001742:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <xTaskIncrementTick+0x120>)

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001744:	2400      	movs	r4, #0
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001746:	6813      	ldr	r3, [r2, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	e02e      	b.n	80017ac <xTaskIncrementTick+0x108>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800174e:	f8d9 3000 	ldr.w	r3, [r9]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001756:	686a      	ldr	r2, [r5, #4]

						if( xConstTickCount < xItemValue )
 8001758:	4296      	cmp	r6, r2
 800175a:	d202      	bcs.n	8001762 <xTaskIncrementTick+0xbe>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 800175c:	9b01      	ldr	r3, [sp, #4]
 800175e:	601a      	str	r2, [r3, #0]
							break;
 8001760:	e7e5      	b.n	800172e <xTaskIncrementTick+0x8a>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001762:	f105 0b04 	add.w	fp, r5, #4
 8001766:	4658      	mov	r0, fp
 8001768:	f7ff fc2c 	bl	8000fc4 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800176c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800176e:	b11a      	cbz	r2, 8001778 <xTaskIncrementTick+0xd4>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001770:	f105 0018 	add.w	r0, r5, #24
 8001774:	f7ff fc26 	bl	8000fc4 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8001778:	4629      	mov	r1, r5
 800177a:	2030      	movs	r0, #48	; 0x30
 800177c:	f000 ff88 	bl	8002690 <prvTraceStoreEvent1>
 8001780:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001782:	f8da 1000 	ldr.w	r1, [sl]
 8001786:	2201      	movs	r2, #1
 8001788:	4082      	lsls	r2, r0
 800178a:	430a      	orrs	r2, r1
 800178c:	f8ca 2000 	str.w	r2, [sl]
 8001790:	2214      	movs	r2, #20
 8001792:	4659      	mov	r1, fp
 8001794:	fb02 7000 	mla	r0, r2, r0, r7
 8001798:	f7ff fbf0 	bl	8000f7c <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800179c:	f8d8 1000 	ldr.w	r1, [r8]
 80017a0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80017a2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 80017a4:	429a      	cmp	r2, r3
 80017a6:	bf28      	it	cs
 80017a8:	2401      	movcs	r4, #1
 80017aa:	e7b8      	b.n	800171e <xTaskIncrementTick+0x7a>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80017ac:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <xTaskIncrementTick+0x140>)
 80017ae:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf18      	it	ne
 80017b4:	2401      	movne	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 80017b6:	4620      	mov	r0, r4
 80017b8:	b003      	add	sp, #12
 80017ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017be:	bf00      	nop
 80017c0:	20000d1c 	.word	0x20000d1c
 80017c4:	20000c70 	.word	0x20000c70
 80017c8:	20001450 	.word	0x20001450
 80017cc:	20000d20 	.word	0x20000d20
 80017d0:	20000c50 	.word	0x20000c50
 80017d4:	20000d24 	.word	0x20000d24
 80017d8:	20000c4c 	.word	0x20000c4c
 80017dc:	20000d18 	.word	0x20000d18
 80017e0:	20000c74 	.word	0x20000c74
 80017e4:	20000d70 	.word	0x20000d70
 80017e8:	20000d14 	.word	0x20000d14
 80017ec:	20000d6c 	.word	0x20000d6c

080017f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80017f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80017f4:	4c2c      	ldr	r4, [pc, #176]	; (80018a8 <xTaskResumeAll+0xb8>)
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	b913      	cbnz	r3, 8001800 <xTaskResumeAll+0x10>
 80017fa:	f7ff fc2f 	bl	800105c <ulPortSetInterruptMask>
 80017fe:	e7fe      	b.n	80017fe <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001800:	f7ff fc42 	bl	8001088 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001804:	6823      	ldr	r3, [r4, #0]
 8001806:	3b01      	subs	r3, #1
 8001808:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	b10b      	cbz	r3, 8001812 <xTaskResumeAll+0x22>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 800180e:	2400      	movs	r4, #0
 8001810:	e045      	b.n	800189e <xTaskResumeAll+0xae>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001812:	4b26      	ldr	r3, [pc, #152]	; (80018ac <xTaskResumeAll+0xbc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f9      	beq.n	800180e <xTaskResumeAll+0x1e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800181a:	4d25      	ldr	r5, [pc, #148]	; (80018b0 <xTaskResumeAll+0xc0>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 800181c:	4e25      	ldr	r6, [pc, #148]	; (80018b4 <xTaskResumeAll+0xc4>)
 800181e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80018c4 <xTaskResumeAll+0xd4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001822:	682b      	ldr	r3, [r5, #0]
 8001824:	b323      	cbz	r3, 8001870 <xTaskResumeAll+0x80>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001826:	68eb      	ldr	r3, [r5, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8001828:	2701      	movs	r7, #1
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800182a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800182c:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001830:	f104 0018 	add.w	r0, r4, #24
 8001834:	f7ff fbc6 	bl	8000fc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001838:	4648      	mov	r0, r9
 800183a:	f7ff fbc3 	bl	8000fc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800183e:	4621      	mov	r1, r4
 8001840:	2030      	movs	r0, #48	; 0x30
 8001842:	f000 ff25 	bl	8002690 <prvTraceStoreEvent1>
 8001846:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001848:	6833      	ldr	r3, [r6, #0]
 800184a:	fa07 f102 	lsl.w	r1, r7, r2
 800184e:	2014      	movs	r0, #20
 8001850:	430b      	orrs	r3, r1
 8001852:	fb00 8002 	mla	r0, r0, r2, r8
 8001856:	4649      	mov	r1, r9
 8001858:	6033      	str	r3, [r6, #0]
 800185a:	f7ff fb8f 	bl	8000f7c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <xTaskResumeAll+0xc8>)
 8001860:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	429a      	cmp	r2, r3
 8001868:	d3db      	bcc.n	8001822 <xTaskResumeAll+0x32>
					{
						xYieldPending = pdTRUE;
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <xTaskResumeAll+0xcc>)
 800186c:	601f      	str	r7, [r3, #0]
 800186e:	e7d6      	b.n	800181e <xTaskResumeAll+0x2e>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8001870:	4c13      	ldr	r4, [pc, #76]	; (80018c0 <xTaskResumeAll+0xd0>)
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	b933      	cbnz	r3, 8001884 <xTaskResumeAll+0x94>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <xTaskResumeAll+0xcc>)
 8001878:	681c      	ldr	r4, [r3, #0]
 800187a:	2c01      	cmp	r4, #1
 800187c:	d1c7      	bne.n	800180e <xTaskResumeAll+0x1e>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800187e:	f7ff fbe1 	bl	8001044 <vPortYield>
 8001882:	e00c      	b.n	800189e <xTaskResumeAll+0xae>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 8001884:	4d0d      	ldr	r5, [pc, #52]	; (80018bc <xTaskResumeAll+0xcc>)
 8001886:	2601      	movs	r6, #1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f3      	beq.n	8001876 <xTaskResumeAll+0x86>
					{
						if( xTaskIncrementTick() != pdFALSE )
 800188e:	f7ff ff09 	bl	80016a4 <xTaskIncrementTick>
 8001892:	b100      	cbz	r0, 8001896 <xTaskResumeAll+0xa6>
						{
							xYieldPending = pdTRUE;
 8001894:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	3b01      	subs	r3, #1
 800189a:	6023      	str	r3, [r4, #0]
 800189c:	e7f4      	b.n	8001888 <xTaskResumeAll+0x98>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800189e:	f7ff fc11 	bl	80010c4 <vPortExitCritical>

	return xAlreadyYielded;
}
 80018a2:	4620      	mov	r0, r4
 80018a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018a8:	20000d1c 	.word	0x20000d1c
 80018ac:	20000d40 	.word	0x20000d40
 80018b0:	20000d28 	.word	0x20000d28
 80018b4:	20000d6c 	.word	0x20000d6c
 80018b8:	20000d14 	.word	0x20000d14
 80018bc:	20000d70 	.word	0x20000d70
 80018c0:	20000c70 	.word	0x20000c70
 80018c4:	20000c74 	.word	0x20000c74

080018c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80018c8:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80018ca:	4604      	mov	r4, r0
 80018cc:	b918      	cbnz	r0, 80018d6 <vTaskDelay+0xe>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80018ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 80018d2:	f7ff bbb7 	b.w	8001044 <vPortYield>


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <vTaskDelay+0x5c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	b113      	cbz	r3, 80018e2 <vTaskDelay+0x1a>
 80018dc:	f7ff fbbe 	bl	800105c <ulPortSetInterruptMask>
 80018e0:	e7fe      	b.n	80018e0 <vTaskDelay+0x18>
			vTaskSuspendAll();
 80018e2:	f7ff fed7 	bl	8001694 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80018e6:	4601      	mov	r1, r0
 80018e8:	207a      	movs	r0, #122	; 0x7a
 80018ea:	f000 fed1 	bl	8002690 <prvTraceStoreEvent1>
				xTimeToWake = xTickCount + xTicksToDelay;

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80018ee:	4d0e      	ldr	r5, [pc, #56]	; (8001928 <vTaskDelay+0x60>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <vTaskDelay+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80018f4:	6828      	ldr	r0, [r5, #0]
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80018f6:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80018f8:	3004      	adds	r0, #4
 80018fa:	f7ff fb63 	bl	8000fc4 <uxListRemove>
 80018fe:	b940      	cbnz	r0, 8001912 <vTaskDelay+0x4a>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001900:	682b      	ldr	r3, [r5, #0]
 8001902:	490b      	ldr	r1, [pc, #44]	; (8001930 <vTaskDelay+0x68>)
 8001904:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001906:	680a      	ldr	r2, [r1, #0]
 8001908:	2301      	movs	r3, #1
 800190a:	4083      	lsls	r3, r0
 800190c:	ea22 0303 	bic.w	r3, r2, r3
 8001910:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001912:	4620      	mov	r0, r4
 8001914:	f7ff fd6e 	bl	80013f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001918:	f7ff ff6a 	bl	80017f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800191c:	2800      	cmp	r0, #0
 800191e:	d0d6      	beq.n	80018ce <vTaskDelay+0x6>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001920:	bd38      	pop	{r3, r4, r5, pc}
 8001922:	bf00      	nop
 8001924:	20000d1c 	.word	0x20000d1c
 8001928:	20000d14 	.word	0x20000d14
 800192c:	20000d20 	.word	0x20000d20
 8001930:	20000d6c 	.word	0x20000d6c

08001934 <prvIdleTask>:
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8001934:	4d15      	ldr	r5, [pc, #84]	; (800198c <prvIdleTask+0x58>)
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001936:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8001938:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800193a:	4f15      	ldr	r7, [pc, #84]	; (8001990 <prvIdleTask+0x5c>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800193c:	682b      	ldr	r3, [r5, #0]
 800193e:	b1f3      	cbz	r3, 800197e <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 8001940:	f7ff fea8 	bl	8001694 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001944:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 8001946:	f7ff ff53 	bl	80017f0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800194a:	2c00      	cmp	r4, #0
 800194c:	d0f6      	beq.n	800193c <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800194e:	f7ff fb9b 	bl	8001088 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <prvIdleTask+0x5c>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001958:	1d20      	adds	r0, r4, #4
 800195a:	f7ff fb33 	bl	8000fc4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800195e:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <prvIdleTask+0x60>)
 8001960:	6813      	ldr	r3, [r2, #0]
 8001962:	3b01      	subs	r3, #1
 8001964:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8001966:	6833      	ldr	r3, [r6, #0]
 8001968:	3b01      	subs	r3, #1
 800196a:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 800196c:	f7ff fbaa 	bl	80010c4 <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8001970:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001972:	f7ff fcfd 	bl	8001370 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 8001976:	4620      	mov	r0, r4
 8001978:	f7ff fcfa 	bl	8001370 <vPortFree>
 800197c:	e7de      	b.n	800193c <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <prvIdleTask+0x64>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d9d9      	bls.n	800193a <prvIdleTask+0x6>
			{
				taskYIELD();
 8001986:	f7ff fb5d 	bl	8001044 <vPortYield>
 800198a:	e7d6      	b.n	800193a <prvIdleTask+0x6>
 800198c:	20000c58 	.word	0x20000c58
 8001990:	20000d00 	.word	0x20000d00
 8001994:	20000d40 	.word	0x20000d40
 8001998:	20000c74 	.word	0x20000c74

0800199c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <vTaskSwitchContext+0x70>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800199e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <vTaskSwitchContext+0x74>)
 80019a4:	b112      	cbz	r2, 80019ac <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	bd10      	pop	{r4, pc}
	}
	else
	{
		xYieldPending = pdFALSE;
 80019ac:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80019ae:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <vTaskSwitchContext+0x78>)
 80019b0:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f1c3 031f 	rsb	r3, r3, #31
 80019bc:	2214      	movs	r2, #20
 80019be:	435a      	muls	r2, r3
 80019c0:	4915      	ldr	r1, [pc, #84]	; (8001a18 <vTaskSwitchContext+0x7c>)
 80019c2:	588c      	ldr	r4, [r1, r2]
 80019c4:	1888      	adds	r0, r1, r2
 80019c6:	b914      	cbnz	r4, 80019ce <vTaskSwitchContext+0x32>
 80019c8:	f7ff fb48 	bl	800105c <ulPortSetInterruptMask>
 80019cc:	e7fe      	b.n	80019cc <vTaskSwitchContext+0x30>
 80019ce:	6844      	ldr	r4, [r0, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	6864      	ldr	r4, [r4, #4]
 80019d4:	440a      	add	r2, r1
 80019d6:	4294      	cmp	r4, r2
 80019d8:	bf08      	it	eq
 80019da:	6862      	ldreq	r2, [r4, #4]
 80019dc:	6044      	str	r4, [r0, #4]
 80019de:	bf08      	it	eq
 80019e0:	6042      	streq	r2, [r0, #4]
 80019e2:	2214      	movs	r2, #20
 80019e4:	fb02 1303 	mla	r3, r2, r3, r1
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4c0c      	ldr	r4, [pc, #48]	; (8001a1c <vTaskSwitchContext+0x80>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	6023      	str	r3, [r4, #0]
		traceTASK_SWITCHED_IN();
 80019f0:	6820      	ldr	r0, [r4, #0]
 80019f2:	f000 fc37 	bl	8002264 <prvIsNewTCB>
 80019f6:	b138      	cbz	r0, 8001a08 <vTaskSwitchContext+0x6c>
 80019f8:	6821      	ldr	r1, [r4, #0]
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	2037      	movs	r0, #55	; 0x37
 80019fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
		traceTASK_SWITCHED_IN();
 8001a04:	f000 be72 	b.w	80026ec <prvTraceStoreEvent2>
 8001a08:	bd10      	pop	{r4, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000d1c 	.word	0x20000d1c
 8001a10:	20000d70 	.word	0x20000d70
 8001a14:	20000d6c 	.word	0x20000d6c
 8001a18:	20000c74 	.word	0x20000c74
 8001a1c:	20000d14 	.word	0x20000d14

08001a20 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8001a20:	4b01      	ldr	r3, [pc, #4]	; (8001a28 <xTaskGetCurrentTaskHandle+0x8>)
 8001a22:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000d14 	.word	0x20000d14

08001a2c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <xTaskGetSchedulerState+0x18>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	b133      	cbz	r3, 8001a40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <xTaskGetSchedulerState+0x1c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001a38:	bf0c      	ite	eq
 8001a3a:	2002      	moveq	r0, #2
 8001a3c:	2000      	movne	r0, #0
 8001a3e:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001a40:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8001a42:	4770      	bx	lr
 8001a44:	20000c54 	.word	0x20000c54
 8001a48:	20000d1c 	.word	0x20000d1c

08001a4c <TIM2_IRQHandler>:
#include "queue.h"




void TIM2_IRQHandler(void){
 8001a4c:	4770      	bx	lr

08001a4e <task1>:

  while (1){}
}

void task1(void const * argument)
{
 8001a4e:	b508      	push	{r3, lr}

  for(;;)
  {
    vTaskDelay(50/portTICK_RATE_MS);
 8001a50:	2032      	movs	r0, #50	; 0x32
 8001a52:	f7ff ff39 	bl	80018c8 <vTaskDelay>
 8001a56:	e7fb      	b.n	8001a50 <task1+0x2>

08001a58 <task2>:
  }

}

void task2(void const * argument)
{
 8001a58:	b508      	push	{r3, lr}
 8001a5a:	f242 7311 	movw	r3, #10001	; 0x2711

  for(;;)
  {
	for(uint32_t a=0; a<=10000; a++);
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	d1fd      	bne.n	8001a5e <task2+0x6>
	vTaskDelay(10/portTICK_RATE_MS);
 8001a62:	200a      	movs	r0, #10
 8001a64:	f7ff ff30 	bl	80018c8 <vTaskDelay>
  }
 8001a68:	e7f7      	b.n	8001a5a <task2+0x2>

08001a6a <SystemClock_Config>:


//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
void SystemClock_Config(void)
{
 8001a6a:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a6c:	2301      	movs	r3, #1


//----------------------------------------------------------------------------------
//----------------------------------------------------------------------------------
void SystemClock_Config(void)
{
 8001a6e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a70:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a76:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a78:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a7a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a7c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a7e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a80:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a84:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a86:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a88:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8a:	f7fe fcdf 	bl	800044c <HAL_RCC_OscConfig>
 8001a8e:	b100      	cbz	r0, 8001a92 <SystemClock_Config+0x28>
 8001a90:	e7fe      	b.n	8001a90 <SystemClock_Config+0x26>
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a92:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a98:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a9a:	4621      	mov	r1, r4
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9c:	250f      	movs	r5, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a9e:	a801      	add	r0, sp, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa0:	9402      	str	r4, [sp, #8]
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa2:	9501      	str	r5, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aa6:	f7fe ff79 	bl	800099c <HAL_RCC_ClockConfig>
 8001aaa:	4604      	mov	r4, r0
 8001aac:	b100      	cbz	r0, 8001ab0 <SystemClock_Config+0x46>
 8001aae:	e7fe      	b.n	8001aae <SystemClock_Config+0x44>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001ab0:	f7ff f826 	bl	8000b00 <HAL_RCC_GetHCLKFreq>
 8001ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001abc:	f7fe fbcc 	bl	8000258 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001ac0:	2004      	movs	r0, #4
 8001ac2:	f7fe fbdf 	bl	8000284 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	4629      	mov	r1, r5
 8001aca:	f04f 30ff 	mov.w	r0, #4294967295
 8001ace:	f7fe fb8f 	bl	80001f0 <HAL_NVIC_SetPriority>
}
 8001ad2:	b011      	add	sp, #68	; 0x44
 8001ad4:	bd30      	pop	{r4, r5, pc}
	...

08001ad8 <main>:

void task1(void const * argument);
void task2(void const * argument);

int main(void)
{
 8001ad8:	b500      	push	{lr}
 8001ada:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001adc:	f7fe fb48 	bl	8000170 <HAL_Init>

  SystemClock_Config();
 8001ae0:	f7ff ffc3 	bl	8001a6a <SystemClock_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
}

static void MX_GPIO_Init(void)
{
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae4:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <main+0xd0>)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8001ae6:	4c31      	ldr	r4, [pc, #196]	; (8001bac <main+0xd4>)
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
}

static void MX_GPIO_Init(void)
{
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae8:	699a      	ldr	r2, [r3, #24]
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 0;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aea:	4620      	mov	r0, r4
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
}

static void MX_GPIO_Init(void)
{
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aec:	f042 0220 	orr.w	r2, r2, #32
 8001af0:	619a      	str	r2, [r3, #24]
 8001af2:	699a      	ldr	r2, [r3, #24]
 8001af4:	f002 0220 	and.w	r2, r2, #32
 8001af8:	9204      	str	r2, [sp, #16]
 8001afa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afc:	699a      	ldr	r2, [r3, #24]
 8001afe:	f042 0204 	orr.w	r2, r2, #4
 8001b02:	619a      	str	r2, [r3, #24]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	9305      	str	r3, [sp, #20]
 8001b0c:	9b05      	ldr	r3, [sp, #20]
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8001b0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b12:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b18:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 0;
 8001b1a:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1c:	6123      	str	r3, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b1e:	f7ff f913 	bl	8000d48 <HAL_TIM_Base_Init>
 8001b22:	b100      	cbz	r0, 8001b26 <main+0x4e>
 8001b24:	e7fe      	b.n	8001b24 <main+0x4c>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b26:	a90c      	add	r1, sp, #48	; 0x30
 8001b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2c:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7ff f81b 	bl	8000b6c <HAL_TIM_ConfigClockSource>
 8001b36:	b100      	cbz	r0, 8001b3a <main+0x62>
 8001b38:	e7fe      	b.n	8001b38 <main+0x60>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3a:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3c:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b3e:	a906      	add	r1, sp, #24
 8001b40:	4620      	mov	r0, r4
 8001b42:	f7ff f91b 	bl	8000d7c <HAL_TIMEx_MasterConfigSynchronization>
 8001b46:	b100      	cbz	r0, 8001b4a <main+0x72>
 8001b48:	e7fe      	b.n	8001b48 <main+0x70>
}

static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8001b4a:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <main+0xd8>)
  huart1.Init.BaudRate = 115200;
 8001b4c:	4919      	ldr	r1, [pc, #100]	; (8001bb4 <main+0xdc>)
 8001b4e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b52:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b56:	6098      	str	r0, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b58:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b5a:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b5c:	220c      	movs	r2, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5e:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b60:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b62:	4618      	mov	r0, r3
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b66:	f7ff f9c5 	bl	8000ef4 <HAL_UART_Init>
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	b100      	cbz	r0, 8001b70 <main+0x98>
 8001b6e:	e7fe      	b.n	8001b6e <main+0x96>

  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();

  xTaskCreate(task1,"task1",128,NULL,1,NULL);
 8001b70:	2501      	movs	r5, #1
 8001b72:	4603      	mov	r3, r0
 8001b74:	9003      	str	r0, [sp, #12]
 8001b76:	9002      	str	r0, [sp, #8]
 8001b78:	9001      	str	r0, [sp, #4]
 8001b7a:	2280      	movs	r2, #128	; 0x80
 8001b7c:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <main+0xe0>)
 8001b7e:	9500      	str	r5, [sp, #0]
 8001b80:	480e      	ldr	r0, [pc, #56]	; (8001bbc <main+0xe4>)
 8001b82:	f7ff fc5f 	bl	8001444 <xTaskGenericCreate>
  xTaskCreate(task2,"task2",128,NULL,1,NULL);
 8001b86:	4623      	mov	r3, r4
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	490d      	ldr	r1, [pc, #52]	; (8001bc0 <main+0xe8>)
 8001b8c:	9403      	str	r4, [sp, #12]
 8001b8e:	9402      	str	r4, [sp, #8]
 8001b90:	9401      	str	r4, [sp, #4]
 8001b92:	9500      	str	r5, [sp, #0]
 8001b94:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <main+0xec>)
 8001b96:	f7ff fc55 	bl	8001444 <xTaskGenericCreate>

  vTraceEnable(TRC_START_AWAIT_HOST);
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	f000 faea 	bl	8002174 <vTraceEnable>

  vTaskStartScheduler();
 8001ba0:	f7ff fd48 	bl	8001634 <vTaskStartScheduler>
 8001ba4:	e7fe      	b.n	8001ba4 <main+0xcc>
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	200014ac 	.word	0x200014ac
 8001bb0:	2000146c 	.word	0x2000146c
 8001bb4:	40013800 	.word	0x40013800
 8001bb8:	08002aa3 	.word	0x08002aa3
 8001bbc:	08001a4f 	.word	0x08001a4f
 8001bc0:	08002aa9 	.word	0x08002aa9
 8001bc4:	08001a59 	.word	0x08001a59

08001bc8 <HAL_MspInit>:


void HAL_MspInit(void)
{

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_MspInit+0x84>)

extern void Error_Handler(void);


void HAL_MspInit(void)
{
 8001bca:	b507      	push	{r0, r1, r2, lr}

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bcc:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bce:	2003      	movs	r0, #3


void HAL_MspInit(void)
{

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	619a      	str	r2, [r3, #24]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	f7fe faf4 	bl	80001cc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	4611      	mov	r1, r2
 8001be8:	f06f 000b 	mvn.w	r0, #11
 8001bec:	f7fe fb00 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	f06f 000a 	mvn.w	r0, #10
 8001bf8:	f7fe fafa 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4611      	mov	r1, r2
 8001c00:	f06f 0009 	mvn.w	r0, #9
 8001c04:	f7fe faf4 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	f06f 0004 	mvn.w	r0, #4
 8001c10:	f7fe faee 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	4611      	mov	r1, r2
 8001c18:	f06f 0003 	mvn.w	r0, #3
 8001c1c:	f7fe fae8 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	210f      	movs	r1, #15
 8001c24:	f06f 0001 	mvn.w	r0, #1
 8001c28:	f7fe fae2 	bl	80001f0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	210f      	movs	r1, #15
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f7fe fadc 	bl	80001f0 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c38:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <HAL_MspInit+0x88>)
 8001c3a:	6853      	ldr	r3, [r2, #4]
 8001c3c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c44:	6053      	str	r3, [r2, #4]


}
 8001c46:	b003      	add	sp, #12
 8001c48:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40010000 	.word	0x40010000

08001c54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8001c54:	6803      	ldr	r3, [r0, #0]


}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c56:	b082      	sub	sp, #8

  if(htim_base->Instance==TIM2)
 8001c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5c:	d10a      	bne.n	8001c74 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c5e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001c62:	69da      	ldr	r2, [r3, #28]
 8001c64:	f042 0201 	orr.w	r2, r2, #1
 8001c68:	61da      	str	r2, [r3, #28]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c74:	b002      	add	sp, #8
 8001c76:	4770      	bx	lr

08001c78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001c7a:	6802      	ldr	r2, [r0, #0]
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_UART_MspInit+0x50>)
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d11f      	bne.n	8001cc2 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c82:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001c86:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c8e:	619a      	str	r2, [r3, #24]
 8001c90:	699b      	ldr	r3, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	480e      	ldr	r0, [pc, #56]	; (8001ccc <HAL_UART_MspInit+0x54>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	9b01      	ldr	r3, [sp, #4]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f7fe faf7 	bl	800029c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb6:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f7fe faed 	bl	800029c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cc2:	b007      	add	sp, #28
 8001cc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	40010800 	.word	0x40010800

08001cd0 <NMI_Handler>:
 8001cd0:	4770      	bx	lr

08001cd2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001cd2:	e7fe      	b.n	8001cd2 <HardFault_Handler>

08001cd4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001cd4:	e7fe      	b.n	8001cd4 <MemManage_Handler>

08001cd6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001cd6:	e7fe      	b.n	8001cd6 <BusFault_Handler>

08001cd8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001cd8:	e7fe      	b.n	8001cd8 <UsageFault_Handler>

08001cda <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001cda:	4770      	bx	lr

08001cdc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001cdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cde:	f7fe fa59 	bl	8000194 <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  osSystickHandler();
 8001ce6:	f7ff b931 	b.w	8000f4c <osSystickHandler>
	...

08001cec <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <SystemInit+0x40>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	f042 0201 	orr.w	r2, r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <SystemInit+0x44>)
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001d04:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d08:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d10:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001d18:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001d1a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001d1e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SystemInit+0x48>)
 8001d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	f8ff0000 	.word	0xf8ff0000
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d3a:	e003      	b.n	8001d44 <LoopCopyDataInit>

08001d3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d42:	3104      	adds	r1, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d44:	480a      	ldr	r0, [pc, #40]	; (8001d70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d4c:	d3f6      	bcc.n	8001d3c <CopyDataInit>
  ldr r2, =_sbss
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d50:	e002      	b.n	8001d58 <LoopFillZerobss>

08001d52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d54:	f842 3b04 	str.w	r3, [r2], #4

08001d58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d5c:	d3f9      	bcc.n	8001d52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d5e:	f7ff ffc5 	bl	8001cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d62:	f000 fe45 	bl	80029f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d66:	f7ff feb7 	bl	8001ad8 <main>
  bx lr
 8001d6a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001d6c:	08002d98 	.word	0x08002d98
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d74:	2000000c 	.word	0x2000000c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001d78:	2000000c 	.word	0x2000000c
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001d7c:	2000197c 	.word	0x2000197c

08001d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d80:	e7fe      	b.n	8001d80 <ADC1_2_IRQHandler>

08001d82 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8001d82:	6902      	ldr	r2, [r0, #16]
  WrOff = pRing->WrOff;
 8001d84:	68c3      	ldr	r3, [r0, #12]
  if (RdOff <= WrOff) {
 8001d86:	429a      	cmp	r2, r3
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8001d88:	bf97      	itett	ls
 8001d8a:	6880      	ldrls	r0, [r0, #8]
  } else {
    r = RdOff - WrOff - 1u;
 8001d8c:	f102 30ff 	addhi.w	r0, r2, #4294967295
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
  WrOff = pRing->WrOff;
  if (RdOff <= WrOff) {
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8001d90:	1880      	addls	r0, r0, r2
 8001d92:	f100 30ff 	addls.w	r0, r0, #4294967295
  } else {
    r = RdOff - WrOff - 1u;
 8001d96:	1ac0      	subs	r0, r0, r3
  }
  return r;
}
 8001d98:	4770      	bx	lr

08001d9a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8001d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;

  WrOff = pRing->WrOff;
 8001d9e:	68c7      	ldr	r7, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
 8001da0:	6886      	ldr	r6, [r0, #8]
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8001da2:	4605      	mov	r5, r0
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;

  WrOff = pRing->WrOff;
  Rem = pRing->SizeOfBuffer - WrOff;
 8001da4:	1bf6      	subs	r6, r6, r7
  if (Rem > NumBytes) {
 8001da6:	4296      	cmp	r6, r2
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8001da8:	4688      	mov	r8, r1
 8001daa:	4614      	mov	r4, r2
 8001dac:	6840      	ldr	r0, [r0, #4]
  unsigned WrOff;
  unsigned Rem;

  WrOff = pRing->WrOff;
  Rem = pRing->SizeOfBuffer - WrOff;
  if (Rem > NumBytes) {
 8001dae:	d904      	bls.n	8001dba <_WriteNoCheck+0x20>
    //
    // All data fits before wrap around
    //
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 8001db0:	4438      	add	r0, r7
 8001db2:	f000 fe43 	bl	8002a3c <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8001db6:	443c      	add	r4, r7
 8001db8:	e00a      	b.n	8001dd0 <_WriteNoCheck+0x36>
  } else {
    //
    // We reach the end of the buffer, so need to wrap around
    //
    NumBytesAtOnce = Rem;
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8001dba:	4632      	mov	r2, r6
 8001dbc:	4438      	add	r0, r7
    NumBytesAtOnce = NumBytes - Rem;
 8001dbe:	1ba4      	subs	r4, r4, r6
  } else {
    //
    // We reach the end of the buffer, so need to wrap around
    //
    NumBytesAtOnce = Rem;
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8001dc0:	f000 fe3c 	bl	8002a3c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8001dc4:	4622      	mov	r2, r4
 8001dc6:	eb08 0106 	add.w	r1, r8, r6
 8001dca:	6868      	ldr	r0, [r5, #4]
 8001dcc:	f000 fe36 	bl	8002a3c <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8001dd0:	60ec      	str	r4, [r5, #12]
 8001dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001dd6 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001dd6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dda:	4606      	mov	r6, r0
 8001ddc:	4689      	mov	r9, r1
 8001dde:	4617      	mov	r7, r2
  unsigned WrOff;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
  WrOff = pRing->WrOff;
 8001de0:	68c5      	ldr	r5, [r0, #12]
  unsigned RdOff;
  unsigned WrOff;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8001de2:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8001de6:	6933      	ldr	r3, [r6, #16]
 8001de8:	68b4      	ldr	r4, [r6, #8]
    if (RdOff > WrOff) {
 8001dea:	429d      	cmp	r5, r3
      NumBytesToWrite = RdOff - WrOff - 1u;
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001dec:	bf28      	it	cs
 8001dee:	191b      	addcs	r3, r3, r4
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8001df0:	1b64      	subs	r4, r4, r5
 8001df2:	42bc      	cmp	r4, r7
 8001df4:	bf28      	it	cs
 8001df6:	463c      	movcs	r4, r7
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    if (RdOff > WrOff) {
      NumBytesToWrite = RdOff - WrOff - 1u;
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	1b5b      	subs	r3, r3, r5
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8001dfc:	429c      	cmp	r4, r3
 8001dfe:	bf28      	it	cs
 8001e00:	461c      	movcs	r4, r3
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8001e02:	6870      	ldr	r0, [r6, #4]
 8001e04:	4649      	mov	r1, r9
 8001e06:	4428      	add	r0, r5
 8001e08:	4622      	mov	r2, r4
 8001e0a:	f000 fe17 	bl	8002a3c <memcpy>
    NumBytesWritten += NumBytesToWrite;
    pBuffer         += NumBytesToWrite;
    NumBytes        -= NumBytesToWrite;
    WrOff           += NumBytesToWrite;
    if (WrOff == pRing->SizeOfBuffer) {
 8001e0e:	68b3      	ldr	r3, [r6, #8]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    NumBytesWritten += NumBytesToWrite;
    pBuffer         += NumBytesToWrite;
    NumBytes        -= NumBytesToWrite;
    WrOff           += NumBytesToWrite;
 8001e10:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
      WrOff = 0u;
 8001e12:	429d      	cmp	r5, r3
 8001e14:	bf08      	it	eq
 8001e16:	2500      	moveq	r5, #0
    }
    pRing->WrOff = WrOff;
  } while (NumBytes);
 8001e18:	1b3f      	subs	r7, r7, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    NumBytesWritten += NumBytesToWrite;
 8001e1a:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
 8001e1c:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
    WrOff           += NumBytesToWrite;
    if (WrOff == pRing->SizeOfBuffer) {
      WrOff = 0u;
    }
    pRing->WrOff = WrOff;
 8001e1e:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
 8001e20:	d1e1      	bne.n	8001de6 <_WriteBlocking+0x10>
  //
  return NumBytesWritten;
}
 8001e22:	4640      	mov	r0, r8
 8001e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001e28 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8001e28:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001e2a:	4c10      	ldr	r4, [pc, #64]	; (8001e6c <_DoInit+0x44>)
 8001e2c:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001e2e:	4a10      	ldr	r2, [pc, #64]	; (8001e70 <_DoInit+0x48>)
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001e30:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001e32:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001e36:	61a2      	str	r2, [r4, #24]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001e38:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001e3a:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <_DoInit+0x50>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001e3c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8001e3e:	2340      	movs	r3, #64	; 0x40
 8001e40:	6223      	str	r3, [r4, #32]
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001e42:	6662      	str	r2, [r4, #100]	; 0x64
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
  p->aUp[0].pBuffer       = _acUpBuffer;
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
  p->aUp[0].RdOff         = 0u;
 8001e44:	2300      	movs	r3, #0
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
  p->aDown[0].pBuffer       = _acDownBuffer;
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8001e46:	2210      	movs	r2, #16
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
  p->aUp[0].pBuffer       = _acUpBuffer;
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
  p->aUp[0].RdOff         = 0u;
 8001e48:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001e4a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001e4c:	62e3      	str	r3, [r4, #44]	; 0x2c
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
  p->aDown[0].pBuffer       = _acDownBuffer;
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
  p->aDown[0].RdOff         = 0u;
 8001e4e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001e50:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001e52:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
  p->aDown[0].pBuffer       = _acDownBuffer;
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8001e54:	66a2      	str	r2, [r4, #104]	; 0x68
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8001e56:	4909      	ldr	r1, [pc, #36]	; (8001e7c <_DoInit+0x54>)
 8001e58:	1de0      	adds	r0, r4, #7
 8001e5a:	f000 fe02 	bl	8002a62 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
 8001e5e:	4908      	ldr	r1, [pc, #32]	; (8001e80 <_DoInit+0x58>)
 8001e60:	4620      	mov	r0, r4
 8001e62:	f000 fdfe 	bl	8002a62 <strcpy>
  p->acID[6] = ' ';
 8001e66:	2320      	movs	r3, #32
 8001e68:	71a3      	strb	r3, [r4, #6]
 8001e6a:	bd10      	pop	{r4, pc}
 8001e6c:	200014e8 	.word	0x200014e8
 8001e70:	08002ac7 	.word	0x08002ac7
 8001e74:	20000d84 	.word	0x20000d84
 8001e78:	20000d74 	.word	0x20000d74
 8001e7c:	08002ad0 	.word	0x08002ad0
 8001e80:	08002ad4 	.word	0x08002ad4

08001e84 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001e84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned                RdOff;
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  //
  INIT();
 8001e88:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <SEGGER_RTT_ReadNoLock+0x8c>)
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001e8a:	4616      	mov	r6, r2
  unsigned                RdOff;
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  //
  INIT();
 8001e8c:	781a      	ldrb	r2, [r3, #0]
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001e8e:	4682      	mov	sl, r0
 8001e90:	468b      	mov	fp, r1
 8001e92:	4699      	mov	r9, r3
  unsigned                RdOff;
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  //
  INIT();
 8001e94:	b90a      	cbnz	r2, 8001e9a <SEGGER_RTT_ReadNoLock+0x16>
 8001e96:	f7ff ffc7 	bl	8001e28 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
  pBuffer = (unsigned char*)pData;
  RdOff = pRing->RdOff;
 8001e9a:	f04f 0818 	mov.w	r8, #24
 8001e9e:	fb08 980a 	mla	r8, r8, sl, r9
 8001ea2:	f8d8 5070 	ldr.w	r5, [r8, #112]	; 0x70
  WrOff = pRing->WrOff;
 8001ea6:	f8d8 706c 	ldr.w	r7, [r8, #108]	; 0x6c
  NumBytesRead = 0u;
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001eaa:	42bd      	cmp	r5, r7
 8001eac:	d915      	bls.n	8001eda <SEGGER_RTT_ReadNoLock+0x56>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001eae:	f8d8 4068 	ldr.w	r4, [r8, #104]	; 0x68
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001eb2:	f8d8 1064 	ldr.w	r1, [r8, #100]	; 0x64
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001eb6:	1b64      	subs	r4, r4, r5
 8001eb8:	42b4      	cmp	r4, r6
 8001eba:	bf28      	it	cs
 8001ebc:	4634      	movcs	r4, r6
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001ebe:	4429      	add	r1, r5
 8001ec0:	4658      	mov	r0, fp
 8001ec2:	4622      	mov	r2, r4
 8001ec4:	f000 fdba 	bl	8002a3c <memcpy>
    BufferSize   -= NumBytesRem;
    RdOff        += NumBytesRem;
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001ec8:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
    NumBytesRem = MIN(NumBytesRem, BufferSize);
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
    NumBytesRead += NumBytesRem;
    pBuffer      += NumBytesRem;
    BufferSize   -= NumBytesRem;
    RdOff        += NumBytesRem;
 8001ecc:	4425      	add	r5, r4
  if (RdOff > WrOff) {
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
    NumBytesRem = MIN(NumBytesRem, BufferSize);
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
    NumBytesRead += NumBytesRem;
    pBuffer      += NumBytesRem;
 8001ece:	44a3      	add	fp, r4
    BufferSize   -= NumBytesRem;
 8001ed0:	1b36      	subs	r6, r6, r4
    RdOff        += NumBytesRem;
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
      RdOff = 0u;
 8001ed2:	429d      	cmp	r5, r3
 8001ed4:	bf08      	it	eq
 8001ed6:	2500      	moveq	r5, #0
 8001ed8:	e000      	b.n	8001edc <SEGGER_RTT_ReadNoLock+0x58>
  INIT();
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
  pBuffer = (unsigned char*)pData;
  RdOff = pRing->RdOff;
  WrOff = pRing->WrOff;
  NumBytesRead = 0u;
 8001eda:	2400      	movs	r4, #0
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001edc:	1b7f      	subs	r7, r7, r5
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001ede:	42be      	cmp	r6, r7
 8001ee0:	bf28      	it	cs
 8001ee2:	463e      	movcs	r6, r7
  if (NumBytesRem > 0u) {
 8001ee4:	b156      	cbz	r6, 8001efc <SEGGER_RTT_ReadNoLock+0x78>
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001ee6:	2318      	movs	r3, #24
 8001ee8:	fb03 930a 	mla	r3, r3, sl, r9
 8001eec:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001eee:	4632      	mov	r2, r6
 8001ef0:	4429      	add	r1, r5
 8001ef2:	4658      	mov	r0, fp
 8001ef4:	f000 fda2 	bl	8002a3c <memcpy>
    NumBytesRead += NumBytesRem;
 8001ef8:	4434      	add	r4, r6
    pBuffer      += NumBytesRem;
    BufferSize   -= NumBytesRem;
    RdOff        += NumBytesRem;
 8001efa:	4435      	add	r5, r6
  }
  if (NumBytesRead) {
 8001efc:	b124      	cbz	r4, 8001f08 <SEGGER_RTT_ReadNoLock+0x84>
    pRing->RdOff = RdOff;
 8001efe:	2318      	movs	r3, #24
 8001f00:	fb03 990a 	mla	r9, r3, sl, r9
 8001f04:	f8c9 5070 	str.w	r5, [r9, #112]	; 0x70
  }
  //
  return NumBytesRead;
}
 8001f08:	4620      	mov	r0, r4
 8001f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f0e:	bf00      	nop
 8001f10:	200014e8 	.word	0x200014e8

08001f14 <SEGGER_RTT_Read>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 8001f14:	b510      	push	{r4, lr}
 8001f16:	460b      	mov	r3, r1
  unsigned NumBytesRead;
  //
  SEGGER_RTT_LOCK();
 8001f18:	f3ef 8411 	mrs	r4, BASEPRI
 8001f1c:	f04f 0120 	mov.w	r1, #32
 8001f20:	f381 8811 	msr	BASEPRI, r1
  //
  // Call the non-locking read function
  //
  NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 8001f24:	4619      	mov	r1, r3
 8001f26:	f7ff ffad 	bl	8001e84 <SEGGER_RTT_ReadNoLock>
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8001f2a:	f384 8811 	msr	BASEPRI, r4
  //
  return NumBytesRead;
}
 8001f2e:	bd10      	pop	{r4, pc}

08001f30 <SEGGER_RTT_WriteNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001f32:	4f14      	ldr	r7, [pc, #80]	; (8001f84 <SEGGER_RTT_WriteNoLock+0x54>)
 8001f34:	2318      	movs	r3, #24
 8001f36:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8001f3a:	fb03 7000 	mla	r0, r3, r0, r7
 8001f3e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001f40:	460e      	mov	r6, r1
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8001f42:	2b01      	cmp	r3, #1
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001f44:	4614      	mov	r4, r2

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001f46:	443d      	add	r5, r7
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8001f48:	d00d      	beq.n	8001f66 <SEGGER_RTT_WriteNoLock+0x36>
 8001f4a:	d306      	bcc.n	8001f5a <SEGGER_RTT_WriteNoLock+0x2a>
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d116      	bne.n	8001f7e <SEGGER_RTT_WriteNoLock+0x4e>
    break;
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8001f50:	4628      	mov	r0, r5
  }
  //
  // Finish up.
  //
  return Status;
}
 8001f52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    break;
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8001f56:	f7ff bf3e 	b.w	8001dd6 <_WriteBlocking>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001f5a:	4628      	mov	r0, r5
 8001f5c:	f7ff ff11 	bl	8001d82 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 8001f60:	42a0      	cmp	r0, r4
 8001f62:	d30c      	bcc.n	8001f7e <SEGGER_RTT_WriteNoLock+0x4e>
 8001f64:	e005      	b.n	8001f72 <SEGGER_RTT_WriteNoLock+0x42>
    break;
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001f66:	4628      	mov	r0, r5
 8001f68:	f7ff ff0b 	bl	8001d82 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 8001f6c:	4284      	cmp	r4, r0
 8001f6e:	bf28      	it	cs
 8001f70:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
 8001f72:	4622      	mov	r2, r4
 8001f74:	4631      	mov	r1, r6
 8001f76:	4628      	mov	r0, r5
 8001f78:	f7ff ff0f 	bl	8001d9a <_WriteNoCheck>
    break;
 8001f7c:	e000      	b.n	8001f80 <SEGGER_RTT_WriteNoLock+0x50>
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    if (Avail < NumBytes) {
      Status = 0u;
 8001f7e:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
 8001f80:	4620      	mov	r0, r4
 8001f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f84:	200014e8 	.word	0x200014e8

08001f88 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned Status;
  //
  INIT();
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <SEGGER_RTT_Write+0x30>)
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001f8c:	4605      	mov	r5, r0
  unsigned Status;
  //
  INIT();
 8001f8e:	781b      	ldrb	r3, [r3, #0]
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001f90:	460e      	mov	r6, r1
 8001f92:	4617      	mov	r7, r2
  unsigned Status;
  //
  INIT();
 8001f94:	b90b      	cbnz	r3, 8001f9a <SEGGER_RTT_Write+0x12>
 8001f96:	f7ff ff47 	bl	8001e28 <_DoInit>
  SEGGER_RTT_LOCK();
 8001f9a:	f3ef 8411 	mrs	r4, BASEPRI
 8001f9e:	f04f 0120 	mov.w	r1, #32
 8001fa2:	f381 8811 	msr	BASEPRI, r1
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8001fa6:	463a      	mov	r2, r7
 8001fa8:	4631      	mov	r1, r6
 8001faa:	4628      	mov	r0, r5
 8001fac:	f7ff ffc0 	bl	8001f30 <SEGGER_RTT_WriteNoLock>
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8001fb0:	f384 8811 	msr	BASEPRI, r4
  //
  return Status;
}
 8001fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200014e8 	.word	0x200014e8

08001fbc <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int r;

  INIT();
 8001fc0:	4d18      	ldr	r5, [pc, #96]	; (8002024 <SEGGER_RTT_ConfigUpBuffer+0x68>)
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001fc2:	4698      	mov	r8, r3
  int r;

  INIT();
 8001fc4:	782b      	ldrb	r3, [r5, #0]
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8001fc6:	4604      	mov	r4, r0
 8001fc8:	4689      	mov	r9, r1
 8001fca:	4692      	mov	sl, r2
  int r;

  INIT();
 8001fcc:	b90b      	cbnz	r3, 8001fd2 <SEGGER_RTT_ConfigUpBuffer+0x16>
 8001fce:	f7ff ff2b 	bl	8001e28 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8001fd2:	692b      	ldr	r3, [r5, #16]
 8001fd4:	4813      	ldr	r0, [pc, #76]	; (8002024 <SEGGER_RTT_ConfigUpBuffer+0x68>)
 8001fd6:	42a3      	cmp	r3, r4
 8001fd8:	d91f      	bls.n	800201a <SEGGER_RTT_ConfigUpBuffer+0x5e>
    SEGGER_RTT_LOCK();
 8001fda:	f3ef 8711 	mrs	r7, BASEPRI
 8001fde:	f04f 0120 	mov.w	r1, #32
 8001fe2:	f381 8811 	msr	BASEPRI, r1
    if (BufferIndex > 0u) {
 8001fe6:	b174      	cbz	r4, 8002006 <SEGGER_RTT_ConfigUpBuffer+0x4a>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8001fe8:	2118      	movs	r1, #24
 8001fea:	fb04 1601 	mla	r6, r4, r1, r1
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8001fee:	fb01 0204 	mla	r2, r1, r4, r0

  INIT();
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
    SEGGER_RTT_LOCK();
    if (BufferIndex > 0u) {
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8001ff2:	1983      	adds	r3, r0, r6
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8001ff4:	f8c3 a004 	str.w	sl, [r3, #4]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8001ff8:	2300      	movs	r3, #0

  INIT();
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
    SEGGER_RTT_LOCK();
    if (BufferIndex > 0u) {
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8001ffa:	f840 9006 	str.w	r9, [r0, r6]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8001ffe:	f8c2 8020 	str.w	r8, [r2, #32]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8002002:	6293      	str	r3, [r2, #40]	; 0x28
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002004:	6253      	str	r3, [r2, #36]	; 0x24
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8002006:	2018      	movs	r0, #24
 8002008:	fb00 5404 	mla	r4, r0, r4, r5
 800200c:	9b08      	ldr	r3, [sp, #32]
 800200e:	62e3      	str	r3, [r4, #44]	; 0x2c
    SEGGER_RTT_UNLOCK();
 8002010:	f387 8811 	msr	BASEPRI, r7
    r =  0;
 8002014:	2000      	movs	r0, #0
 8002016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else {
    r = -1;
 800201a:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return r;
}
 800201e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002022:	bf00      	nop
 8002024:	200014e8 	.word	0x200014e8

08002028 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int r;

  INIT();
 800202c:	4d16      	ldr	r5, [pc, #88]	; (8002088 <SEGGER_RTT_ConfigDownBuffer+0x60>)
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800202e:	461f      	mov	r7, r3
  int r;

  INIT();
 8002030:	782b      	ldrb	r3, [r5, #0]
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002032:	4604      	mov	r4, r0
 8002034:	4689      	mov	r9, r1
 8002036:	4690      	mov	r8, r2
  int r;

  INIT();
 8002038:	b90b      	cbnz	r3, 800203e <SEGGER_RTT_ConfigDownBuffer+0x16>
 800203a:	f7ff fef5 	bl	8001e28 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800203e:	696b      	ldr	r3, [r5, #20]
 8002040:	42a3      	cmp	r3, r4
 8002042:	d91c      	bls.n	800207e <SEGGER_RTT_ConfigDownBuffer+0x56>
    SEGGER_RTT_LOCK();
 8002044:	f3ef 8611 	mrs	r6, BASEPRI
 8002048:	f04f 0120 	mov.w	r1, #32
 800204c:	f381 8811 	msr	BASEPRI, r1
    if (BufferIndex > 0u) {
 8002050:	b15c      	cbz	r4, 800206a <SEGGER_RTT_ConfigDownBuffer+0x42>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <SEGGER_RTT_ConfigDownBuffer+0x60>)
 8002054:	2118      	movs	r1, #24
 8002056:	fb01 3104 	mla	r1, r1, r4, r3
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800205a:	2300      	movs	r3, #0

  INIT();
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
    SEGGER_RTT_LOCK();
    if (BufferIndex > 0u) {
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800205c:	f8c1 9060 	str.w	r9, [r1, #96]	; 0x60
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002060:	f8c1 8064 	str.w	r8, [r1, #100]	; 0x64
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8002064:	668f      	str	r7, [r1, #104]	; 0x68
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8002066:	670b      	str	r3, [r1, #112]	; 0x70
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8002068:	66cb      	str	r3, [r1, #108]	; 0x6c
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800206a:	2018      	movs	r0, #24
 800206c:	fb00 5404 	mla	r4, r0, r4, r5
 8002070:	9b08      	ldr	r3, [sp, #32]
 8002072:	6763      	str	r3, [r4, #116]	; 0x74
    SEGGER_RTT_UNLOCK();
 8002074:	f386 8811 	msr	BASEPRI, r6
    r =  0;
 8002078:	2000      	movs	r0, #0
 800207a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else {
    r = -1;
 800207e:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return r;
}
 8002082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002086:	bf00      	nop
 8002088:	200014e8 	.word	0x200014e8

0800208c <TzCtrl>:
 *
 * Task for receiving commands from Tracealyzer and for recorder diagnostics.
 *
 ******************************************************************************/
static portTASK_FUNCTION( TzCtrl, pvParameters )
{
 800208c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			NoRoomForObjectData);

		NoRoomForObjectData_last = NoRoomForObjectData;
	}

	if (LongestSymbolName > LongestSymbolName_last)
 8002090:	4c2a      	ldr	r4, [pc, #168]	; (800213c <TzCtrl+0xb0>)
	{
		do
		{
			/* Listen for new commands */
			bytes = 0;
			TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), &bytes);
 8002092:	4e2b      	ldr	r6, [pc, #172]	; (8002140 <TzCtrl+0xb4>)
 8002094:	46a0      	mov	r8, r4
 8002096:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 800209a:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 800209e:	429a      	cmp	r2, r3
 80020a0:	d00d      	beq.n	80020be <TzCtrl+0x32>
 80020a2:	2208      	movs	r2, #8
 80020a4:	4669      	mov	r1, sp
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7ff ff34 	bl	8001f14 <SEGGER_RTT_Read>
			if (bytes == sizeof(TracealyzerCommandType))
 80020ac:	2808      	cmp	r0, #8
 80020ae:	d106      	bne.n	80020be <TzCtrl+0x32>
			{
				if (prvIsValidCommand(&msg))
 80020b0:	4668      	mov	r0, sp
 80020b2:	f000 f967 	bl	8002384 <prvIsValidCommand>
 80020b6:	b110      	cbz	r0, 80020be <TzCtrl+0x32>
				{
					prvProcessCommand(&msg); /* Start or Stop currently... */
 80020b8:	4668      	mov	r0, sp
 80020ba:	f000 fc6b 	bl	8002994 <prvProcessCommand>
 * Checks a number of diagnostic variables and give warnings as user events,
 * in most cases including a suggested solution.
 ******************************************************************************/
static void prvCheckRecorderStatus(void)
{
	if (NoRoomForSymbol > NoRoomForSymbol_last)
 80020be:	4d21      	ldr	r5, [pc, #132]	; (8002144 <TzCtrl+0xb8>)
 80020c0:	4f21      	ldr	r7, [pc, #132]	; (8002148 <TzCtrl+0xbc>)
 80020c2:	682a      	ldr	r2, [r5, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d907      	bls.n	80020da <TzCtrl+0x4e>
	{
		vTracePrintF(trcWarningChannel, "TRC_CFG_SYMBOL_TABLE_SLOTS too small. Add %d slots.",
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <TzCtrl+0xc0>)
 80020cc:	682a      	ldr	r2, [r5, #0]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	491f      	ldr	r1, [pc, #124]	; (8002150 <TzCtrl+0xc4>)
 80020d2:	f000 fa11 	bl	80024f8 <vTracePrintF>
			NoRoomForSymbol);

		NoRoomForSymbol_last = NoRoomForSymbol;
 80020d6:	682b      	ldr	r3, [r5, #0]
 80020d8:	603b      	str	r3, [r7, #0]
	}

	if (NoRoomForObjectData > NoRoomForObjectData_last)
 80020da:	4d1e      	ldr	r5, [pc, #120]	; (8002154 <TzCtrl+0xc8>)
 80020dc:	4f1e      	ldr	r7, [pc, #120]	; (8002158 <TzCtrl+0xcc>)
 80020de:	682a      	ldr	r2, [r5, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d907      	bls.n	80020f6 <TzCtrl+0x6a>
	{
		vTracePrintF(trcWarningChannel, "TRC_CFG_OBJECT_DATA_SLOTS too small. Add %d slots.",
 80020e6:	4b19      	ldr	r3, [pc, #100]	; (800214c <TzCtrl+0xc0>)
 80020e8:	682a      	ldr	r2, [r5, #0]
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	491b      	ldr	r1, [pc, #108]	; (800215c <TzCtrl+0xd0>)
 80020ee:	f000 fa03 	bl	80024f8 <vTracePrintF>
			NoRoomForObjectData);

		NoRoomForObjectData_last = NoRoomForObjectData;
 80020f2:	682b      	ldr	r3, [r5, #0]
 80020f4:	603b      	str	r3, [r7, #0]
	}

	if (LongestSymbolName > LongestSymbolName_last)
 80020f6:	4d1a      	ldr	r5, [pc, #104]	; (8002160 <TzCtrl+0xd4>)
 80020f8:	6822      	ldr	r2, [r4, #0]
 80020fa:	682b      	ldr	r3, [r5, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d90b      	bls.n	8002118 <TzCtrl+0x8c>
	{
		if (LongestSymbolName > TRC_CFG_SYMBOL_MAX_LENGTH)
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	2b19      	cmp	r3, #25
 8002104:	d905      	bls.n	8002112 <TzCtrl+0x86>
		{
			vTracePrintF(trcWarningChannel, "TRC_CFG_SYMBOL_MAX_LENGTH too small. Add %d chars.",
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <TzCtrl+0xc0>)
 8002108:	6822      	ldr	r2, [r4, #0]
 800210a:	4916      	ldr	r1, [pc, #88]	; (8002164 <TzCtrl+0xd8>)
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	f000 f9f3 	bl	80024f8 <vTracePrintF>
				LongestSymbolName);
		}
		LongestSymbolName_last = LongestSymbolName;
 8002112:	f8d8 3000 	ldr.w	r3, [r8]
 8002116:	602b      	str	r3, [r5, #0]
	}

	if (MaxBytesTruncated > MaxBytesTruncated_last)
 8002118:	4d13      	ldr	r5, [pc, #76]	; (8002168 <TzCtrl+0xdc>)
 800211a:	4f14      	ldr	r7, [pc, #80]	; (800216c <TzCtrl+0xe0>)
 800211c:	682a      	ldr	r2, [r5, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d907      	bls.n	8002134 <TzCtrl+0xa8>

		A PSF event may store maximum 60 bytes payload, including data arguments
		and string characters. For User Events, also the User Event Channel ptr
		must be squeezed in, if a channel is specified. */

		vTracePrintF(trcWarningChannel, "String event too long, up to %d bytes truncated.",
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <TzCtrl+0xc0>)
 8002126:	682a      	ldr	r2, [r5, #0]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	4911      	ldr	r1, [pc, #68]	; (8002170 <TzCtrl+0xe4>)
 800212c:	f000 f9e4 	bl	80024f8 <vTracePrintF>
			MaxBytesTruncated);

		MaxBytesTruncated_last = MaxBytesTruncated;
 8002130:	682b      	ldr	r3, [r5, #0]
 8002132:	603b      	str	r3, [r7, #0]
			/* If there was data sent (bytes != 0), immediately loop around and do all this again. Otherwise, step out of this loop and sleep for a while. */
		}
		while (bytes != 0);

		prvCheckRecorderStatus();
		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);	/* 10ms */
 8002134:	200a      	movs	r0, #10
 8002136:	f7ff fbc7 	bl	80018c8 <vTaskDelay>
	}
 800213a:	e7ac      	b.n	8002096 <TzCtrl+0xa>
 800213c:	2000145c 	.word	0x2000145c
 8002140:	200014e8 	.word	0x200014e8
 8002144:	20000e00 	.word	0x20000e00
 8002148:	20000dcc 	.word	0x20000dcc
 800214c:	20001978 	.word	0x20001978
 8002150:	08002adb 	.word	0x08002adb
 8002154:	20000e08 	.word	0x20000e08
 8002158:	20000df8 	.word	0x20000df8
 800215c:	08002b0f 	.word	0x08002b0f
 8002160:	20000dc8 	.word	0x20000dc8
 8002164:	08002b42 	.word	0x08002b42
 8002168:	20001464 	.word	0x20001464
 800216c:	20000dc4 	.word	0x20000dc4
 8002170:	08002b75 	.word	0x08002b75

08002174 <vTraceEnable>:
 * Function that enables the tracing and creates the control task. It will halt
 * execution until a Start command has been received if haltUntilStart is true.
 *
 ******************************************************************************/
void vTraceEnable(int startOption)
{
 8002174:	b570      	push	{r4, r5, r6, lr}
	int bytes = 0;
	extern uint32_t RecorderEnabled;
	TracealyzerCommandType msg;
	
	if (HandleTzCtrl != NULL)
 8002176:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <vTraceEnable+0xc0>)
 * Function that enables the tracing and creates the control task. It will halt
 * execution until a Start command has been received if haltUntilStart is true.
 *
 ******************************************************************************/
void vTraceEnable(int startOption)
{
 8002178:	b086      	sub	sp, #24
	int bytes = 0;
	extern uint32_t RecorderEnabled;
	TracealyzerCommandType msg;
	
	if (HandleTzCtrl != NULL)
 800217a:	681a      	ldr	r2, [r3, #0]
 * Function that enables the tracing and creates the control task. It will halt
 * execution until a Start command has been received if haltUntilStart is true.
 *
 ******************************************************************************/
void vTraceEnable(int startOption)
{
 800217c:	4604      	mov	r4, r0
 800217e:	461e      	mov	r6, r3
	int bytes = 0;
	extern uint32_t RecorderEnabled;
	TracealyzerCommandType msg;
	
	if (HandleTzCtrl != NULL)
 8002180:	2a00      	cmp	r2, #0
 8002182:	d154      	bne.n	800222e <vTraceEnable+0xba>
		return;	/* Seems we already initiated */
	
	TRC_STREAM_PORT_INIT();
 8002184:	2502      	movs	r5, #2
 8002186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218a:	4a2b      	ldr	r2, [pc, #172]	; (8002238 <vTraceEnable+0xc4>)
 800218c:	492b      	ldr	r1, [pc, #172]	; (800223c <vTraceEnable+0xc8>)
 800218e:	9500      	str	r5, [sp, #0]
 8002190:	2001      	movs	r0, #1
 8002192:	f7ff ff13 	bl	8001fbc <SEGGER_RTT_ConfigUpBuffer>
 8002196:	9500      	str	r5, [sp, #0]
 8002198:	2320      	movs	r3, #32
 800219a:	4a29      	ldr	r2, [pc, #164]	; (8002240 <vTraceEnable+0xcc>)
 800219c:	4929      	ldr	r1, [pc, #164]	; (8002244 <vTraceEnable+0xd0>)
 800219e:	2001      	movs	r0, #1
 80021a0:	f7ff ff42 	bl	8002028 <SEGGER_RTT_ConfigDownBuffer>
	
	if (startOption == TRC_START_AWAIT_HOST)
 80021a4:	42ac      	cmp	r4, r5
 80021a6:	d123      	bne.n	80021f0 <vTraceEnable+0x7c>
	{
		/* We keep trying to read commands until the recorder has been started */
		do
		{
			bytes = 0;
			TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), &bytes);
 80021a8:	4c27      	ldr	r4, [pc, #156]	; (8002248 <vTraceEnable+0xd4>)
					
					prvProcessCommand(&msg);
				}
			}
		}
		while (RecorderEnabled == 0);
 80021aa:	4d28      	ldr	r5, [pc, #160]	; (800224c <vTraceEnable+0xd8>)
	{
		/* We keep trying to read commands until the recorder has been started */
		do
		{
			bytes = 0;
			TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), &bytes);
 80021ac:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80021b0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d017      	beq.n	80021e8 <vTraceEnable+0x74>
 80021b8:	2208      	movs	r2, #8
 80021ba:	a904      	add	r1, sp, #16
 80021bc:	2001      	movs	r0, #1
 80021be:	f7ff fea9 	bl	8001f14 <SEGGER_RTT_Read>

			if (bytes == sizeof(TracealyzerCommandType))
 80021c2:	2808      	cmp	r0, #8
 80021c4:	d110      	bne.n	80021e8 <vTraceEnable+0x74>
			{
				if (prvIsValidCommand(&msg))
 80021c6:	a804      	add	r0, sp, #16
 80021c8:	f000 f8dc 	bl	8002384 <prvIsValidCommand>
 80021cc:	b160      	cbz	r0, 80021e8 <vTraceEnable+0x74>
				{
					if (msg.cmdCode == CMD_SET_ACTIVE && msg.param1 == 1)
 80021ce:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d105      	bne.n	80021e2 <vTraceEnable+0x6e>
 80021d6:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <vTraceEnable+0x6e>
					{
						/* On start, init and reset the timestamping */
						TRC_PORT_SPECIFIC_INIT();
 80021de:	f000 fbe1 	bl	80029a4 <prvTraceInitCortexM>
					}
					
					prvProcessCommand(&msg);
 80021e2:	a804      	add	r0, sp, #16
 80021e4:	f000 fbd6 	bl	8002994 <prvProcessCommand>
				}
			}
		}
		while (RecorderEnabled == 0);
 80021e8:	682b      	ldr	r3, [r5, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0de      	beq.n	80021ac <vTraceEnable+0x38>
 80021ee:	e00d      	b.n	800220c <vTraceEnable+0x98>
	}
	else if (startOption == TRC_START)
 80021f0:	2c01      	cmp	r4, #1
 80021f2:	d109      	bne.n	8002208 <vTraceEnable+0x94>
	{
		/* We start streaming directly - this assumes that the interface is ready! */
		TRC_PORT_SPECIFIC_INIT();
 80021f4:	f000 fbd6 	bl	80029a4 <prvTraceInitCortexM>
		
		msg.cmdCode = CMD_SET_ACTIVE;
		msg.param1 = 1;
		prvProcessCommand(&msg);
 80021f8:	a804      	add	r0, sp, #16
	else if (startOption == TRC_START)
	{
		/* We start streaming directly - this assumes that the interface is ready! */
		TRC_PORT_SPECIFIC_INIT();
		
		msg.cmdCode = CMD_SET_ACTIVE;
 80021fa:	f88d 4010 	strb.w	r4, [sp, #16]
		msg.param1 = 1;
 80021fe:	f88d 4011 	strb.w	r4, [sp, #17]
		prvProcessCommand(&msg);
 8002202:	f000 fbc7 	bl	8002994 <prvProcessCommand>
 8002206:	e001      	b.n	800220c <vTraceEnable+0x98>
	}
	else
	{
		/* On TRC_INIT */
		TRC_PORT_SPECIFIC_INIT();
 8002208:	f000 fbcc 	bl	80029a4 <prvTraceInitCortexM>
	}

	trcWarningChannel = xTraceRegisterString("Warnings from Recorder");
 800220c:	4810      	ldr	r0, [pc, #64]	; (8002250 <vTraceEnable+0xdc>)
 800220e:	f000 fa08 	bl	8002622 <xTraceRegisterString>
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <vTraceEnable+0xe0>)
  	/* Creates the TzCtrl task - receives trace commands (start, stop, ...) */
#if (configSUPPORT_STATIC_ALLOCATION == 1)
	HandleTzCtrl = xTaskCreateStatic(TzCtrl, "TzCtrl", TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
	(void)HandleTzCtrl;
#else 
	xTaskCreate( TzCtrl, "TzCtrl", TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl );
 8002214:	2201      	movs	r2, #1
	{
		/* On TRC_INIT */
		TRC_PORT_SPECIFIC_INIT();
	}

	trcWarningChannel = xTraceRegisterString("Warnings from Recorder");
 8002216:	6018      	str	r0, [r3, #0]
  	/* Creates the TzCtrl task - receives trace commands (start, stop, ...) */
#if (configSUPPORT_STATIC_ALLOCATION == 1)
	HandleTzCtrl = xTaskCreateStatic(TzCtrl, "TzCtrl", TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
	(void)HandleTzCtrl;
#else 
	xTaskCreate( TzCtrl, "TzCtrl", TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl );
 8002218:	2300      	movs	r3, #0
 800221a:	9200      	str	r2, [sp, #0]
 800221c:	9303      	str	r3, [sp, #12]
 800221e:	9302      	str	r3, [sp, #8]
 8002220:	9601      	str	r6, [sp, #4]
 8002222:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002226:	4907      	ldr	r1, [pc, #28]	; (8002244 <vTraceEnable+0xd0>)
 8002228:	480b      	ldr	r0, [pc, #44]	; (8002258 <vTraceEnable+0xe4>)
 800222a:	f7ff f90b 	bl	8001444 <xTaskGenericCreate>
#endif
}
 800222e:	b006      	add	sp, #24
 8002230:	bd70      	pop	{r4, r5, r6, pc}
 8002232:	bf00      	nop
 8002234:	20000dd4 	.word	0x20000dd4
 8002238:	20001590 	.word	0x20001590
 800223c:	08002ba6 	.word	0x08002ba6
 8002240:	20000dd8 	.word	0x20000dd8
 8002244:	08002bad 	.word	0x08002bad
 8002248:	200014e8 	.word	0x200014e8
 800224c:	20000e04 	.word	0x20000e04
 8002250:	08002bb4 	.word	0x08002bb4
 8002254:	20001978 	.word	0x20001978
 8002258:	0800208d 	.word	0x0800208d

0800225c <prvTraceOnBegin>:
 800225c:	4770      	bx	lr

0800225e <prvTraceOnEnd>:
 * prvTraceOnEnd
 *
 * Called on trace end.
 ******************************************************************************/
void prvTraceOnEnd()
{
 800225e:	4770      	bx	lr

08002260 <prvTraceGetCurrentTaskHandle>:
 * Function that returns the handle to the currently executing task.
 *
 ******************************************************************************/
void* prvTraceGetCurrentTaskHandle(void)
{
	return xTaskGetCurrentTaskHandle();
 8002260:	f7ff bbde 	b.w	8001a20 <xTaskGetCurrentTaskHandle>

08002264 <prvIsNewTCB>:
 * Tells if this task is already executing, or if there has been a task-switch.
 * Assumed to be called within a trace hook in kernel context.
 ******************************************************************************/
uint32_t prvIsNewTCB(void* pNewTCB)
{
	if (pCurrentTCB != pNewTCB)
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <prvIsNewTCB+0x10>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4282      	cmp	r2, r0
	{
		pCurrentTCB = pNewTCB;
 800226a:	bf1a      	itte	ne
 800226c:	6018      	strne	r0, [r3, #0]
		return 1;
 800226e:	2001      	movne	r0, #1
	}
	return 0;
 8002270:	2000      	moveq	r0, #0
}
 8002272:	4770      	bx	lr
 8002274:	20000dd0 	.word	0x20000dd0

08002278 <prvTraceSaveSymbol>:
	TRACE_EXIT_CRITICAL_SECTION();
}

/* Saves a symbol name (task name etc.) in symbol table */
void prvTraceSaveSymbol(const void *address, const char *name)
{
 8002278:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800227a:	f3ef 8510 	mrs	r5, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800227e:	2301      	movs	r3, #1
 8002280:	f383 8810 	msr	PRIMASK, r3
	uint8_t *ptrSymbol;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
	
	foundSlot = firstFreeSymbolTableIndex;
 8002284:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <prvTraceSaveSymbol+0x88>)

	/* First look for previous entries using this address */
	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
 8002286:	2300      	movs	r3, #0
	uint8_t *ptrSymbol;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
	
	foundSlot = firstFreeSymbolTableIndex;
 8002288:	6817      	ldr	r7, [r2, #0]
 800228a:	4616      	mov	r6, r2
	/* First look for previous entries using this address */
	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
	{
		/* We access the symbol table via the union member pSymbolTableBufferUINT32 to avoid strict-aliasing issues */
		ptrAddress = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i / sizeof(uint32_t)];
		if (*ptrAddress == (uint32_t)address)
 800228c:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <prvTraceSaveSymbol+0x8c>)
	TRACE_ENTER_CRITICAL_SECTION();
	
	foundSlot = firstFreeSymbolTableIndex;

	/* First look for previous entries using this address */
	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
 800228e:	42bb      	cmp	r3, r7
 8002290:	d206      	bcs.n	80022a0 <prvTraceSaveSymbol+0x28>
	{
		/* We access the symbol table via the union member pSymbolTableBufferUINT32 to avoid strict-aliasing issues */
		ptrAddress = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i / sizeof(uint32_t)];
		if (*ptrAddress == (uint32_t)address)
 8002292:	089c      	lsrs	r4, r3, #2
 8002294:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8002298:	42a0      	cmp	r0, r4
 800229a:	d002      	beq.n	80022a2 <prvTraceSaveSymbol+0x2a>
	TRACE_ENTER_CRITICAL_SECTION();
	
	foundSlot = firstFreeSymbolTableIndex;

	/* First look for previous entries using this address */
	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
 800229c:	3320      	adds	r3, #32
 800229e:	e7f6      	b.n	800228e <prvTraceSaveSymbol+0x16>
 80022a0:	463b      	mov	r3, r7
			foundSlot = i;
			break;
		}
	}

	if (foundSlot < SYMBOL_TABLE_BUFFER_SIZE)
 80022a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80022a6:	d223      	bcs.n	80022f0 <prvTraceSaveSymbol+0x78>
	{
		/* We access the symbol table via the union member pSymbolTableBufferUINT32 to avoid strict-aliasing issues */
		symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
 80022a8:	4c16      	ldr	r4, [pc, #88]	; (8002304 <prvTraceSaveSymbol+0x8c>)
 80022aa:	089a      	lsrs	r2, r3, #2
 80022ac:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
		
		/* We access the symbol table via the union member pSymbolTableBufferUINT8 to avoid strict-aliasing issues */
		ptrSymbol = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[foundSlot + sizeof(uint32_t)];
 80022b0:	1d1a      	adds	r2, r3, #4
 80022b2:	4414      	add	r4, r2
 80022b4:	1e48      	subs	r0, r1, #1
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 80022b6:	2200      	movs	r2, #0
        {
			ptrSymbol[i] = (uint8_t)name[i];	/* We do this first to ensure we also get the 0 termination, if there is one */
 80022b8:	f810 ef01 	ldrb.w	lr, [r0, #1]!
 80022bc:	f804 e002 	strb.w	lr, [r4, r2]

			if (name[i] == 0)
 80022c0:	f890 e000 	ldrb.w	lr, [r0]
 80022c4:	f1be 0f00 	cmp.w	lr, #0
 80022c8:	d008      	beq.n	80022dc <prvTraceSaveSymbol+0x64>
		/* We access the symbol table via the union member pSymbolTableBufferUINT32 to avoid strict-aliasing issues */
		symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
		
		/* We access the symbol table via the union member pSymbolTableBufferUINT8 to avoid strict-aliasing issues */
		ptrSymbol = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[foundSlot + sizeof(uint32_t)];
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 80022ca:	3201      	adds	r2, #1
 80022cc:	2a19      	cmp	r2, #25
 80022ce:	d1f3      	bne.n	80022b8 <prvTraceSaveSymbol+0x40>
			if (name[i] == 0)
				break;
		}

		/* Check the length of "name", if longer than SYMBOL_MAX_LENGTH */
		while ((name[i] != 0) && i < 128)
 80022d0:	5c88      	ldrb	r0, [r1, r2]
 80022d2:	b118      	cbz	r0, 80022dc <prvTraceSaveSymbol+0x64>
 80022d4:	2a80      	cmp	r2, #128	; 0x80
 80022d6:	d001      	beq.n	80022dc <prvTraceSaveSymbol+0x64>
		{
			i++;
 80022d8:	3201      	adds	r2, #1
 80022da:	e7f9      	b.n	80022d0 <prvTraceSaveSymbol+0x58>
		}

		/* Remember the longest symbol name, for diagnostic purposes */
		if (i > LongestSymbolName)
 80022dc:	490a      	ldr	r1, [pc, #40]	; (8002308 <prvTraceSaveSymbol+0x90>)
 80022de:	6808      	ldr	r0, [r1, #0]
 80022e0:	4290      	cmp	r0, r2
		{
			LongestSymbolName = i;
 80022e2:	bf38      	it	cc
 80022e4:	600a      	strcc	r2, [r1, #0]
		}

		/* Is this the last entry in the symbol table? */
		if (foundSlot == firstFreeSymbolTableIndex)
 80022e6:	42bb      	cmp	r3, r7
 80022e8:	d106      	bne.n	80022f8 <prvTraceSaveSymbol+0x80>
		{
			firstFreeSymbolTableIndex += SYMBOL_TABLE_SLOT_SIZE;
 80022ea:	3320      	adds	r3, #32
 80022ec:	6033      	str	r3, [r6, #0]
 80022ee:	e003      	b.n	80022f8 <prvTraceSaveSymbol+0x80>
		}
	}
	else
	{
		NoRoomForSymbol++;
 80022f0:	4a06      	ldr	r2, [pc, #24]	; (800230c <prvTraceSaveSymbol+0x94>)
 80022f2:	6813      	ldr	r3, [r2, #0]
 80022f4:	3301      	adds	r3, #1
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	f385 8810 	msr	PRIMASK, r5
 80022fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022fe:	bf00      	nop
 8002300:	20001458 	.word	0x20001458
 8002304:	20000f50 	.word	0x20000f50
 8002308:	2000145c 	.word	0x2000145c
 800230c:	20000e00 	.word	0x20000e00

08002310 <prvTraceSaveObjectData>:
	TRACE_EXIT_CRITICAL_SECTION();
}

/* Saves an object data entry (current task priority) in object data table */
void prvTraceSaveObjectData(const void *address, uint32_t data)
{
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002312:	f3ef 8510 	mrs	r5, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002316:	2301      	movs	r3, #1
 8002318:	f383 8810 	msr	PRIMASK, r3
	uint32_t *ptr;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
	
	foundSlot = firstFreeObjectDataTableIndex;
 800231c:	4c16      	ldr	r4, [pc, #88]	; (8002378 <prvTraceSaveObjectData+0x68>)
	/* First look for previous entries using this address */
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
	{
		/* We access the data table via the union member pObjectDataTableBufferUINT32 to avoid strict-aliasing issues */
		ptr = &objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i / sizeof(uint32_t)];
		if (*ptr == (uint32_t)address)
 800231e:	4f17      	ldr	r7, [pc, #92]	; (800237c <prvTraceSaveObjectData+0x6c>)
 8002320:	46a6      	mov	lr, r4
	uint32_t *ptr;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
	
	foundSlot = firstFreeObjectDataTableIndex;
 8002322:	6823      	ldr	r3, [r4, #0]

	/* First look for previous entries using this address */
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 8002324:	2200      	movs	r2, #0
 8002326:	429a      	cmp	r2, r3
 8002328:	d21a      	bcs.n	8002360 <prvTraceSaveObjectData+0x50>
	{
		/* We access the data table via the union member pObjectDataTableBufferUINT32 to avoid strict-aliasing issues */
		ptr = &objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i / sizeof(uint32_t)];
 800232a:	0894      	lsrs	r4, r2, #2
		if (*ptr == (uint32_t)address)
 800232c:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 8002330:	42b0      	cmp	r0, r6
 8002332:	d001      	beq.n	8002338 <prvTraceSaveObjectData+0x28>
	TRACE_ENTER_CRITICAL_SECTION();
	
	foundSlot = firstFreeObjectDataTableIndex;

	/* First look for previous entries using this address */
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 8002334:	3208      	adds	r2, #8
 8002336:	e7f6      	b.n	8002326 <prvTraceSaveObjectData+0x16>
			foundSlot = i;
			break;
		}
	}

	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
 8002338:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
 800233c:	d209      	bcs.n	8002352 <prvTraceSaveObjectData+0x42>
	{
		/* We access the data table via the union member pObjectDataTableBufferUINT32 to avoid strict-aliasing issues */
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 800233e:	480f      	ldr	r0, [pc, #60]	; (800237c <prvTraceSaveObjectData+0x6c>)
 8002340:	3401      	adds	r4, #1

		/* Is this the last entry in the object data table? */
		if (foundSlot == firstFreeObjectDataTableIndex)
 8002342:	429a      	cmp	r2, r3

	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
	{
		/* We access the data table via the union member pObjectDataTableBufferUINT32 to avoid strict-aliasing issues */
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 8002344:	f840 1024 	str.w	r1, [r0, r4, lsl #2]

		/* Is this the last entry in the object data table? */
		if (foundSlot == firstFreeObjectDataTableIndex)
 8002348:	d107      	bne.n	800235a <prvTraceSaveObjectData+0x4a>
		{
			firstFreeObjectDataTableIndex += OBJECT_DATA_SLOT_SIZE;
 800234a:	3308      	adds	r3, #8
 800234c:	f8ce 3000 	str.w	r3, [lr]
 8002350:	e003      	b.n	800235a <prvTraceSaveObjectData+0x4a>
		}
	}
	else
	{
		NoRoomForObjectData++;
 8002352:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <prvTraceSaveObjectData+0x70>)
 8002354:	6813      	ldr	r3, [r2, #0]
 8002356:	3301      	adds	r3, #1
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	f385 8810 	msr	PRIMASK, r5
	}

	TRACE_EXIT_CRITICAL_SECTION();
}
 800235e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			foundSlot = i;
			break;
		}
	}

	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
 8002360:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002364:	d2f5      	bcs.n	8002352 <prvTraceSaveObjectData+0x42>
	{
		/* We access the data table via the union member pObjectDataTableBufferUINT32 to avoid strict-aliasing issues */
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
 8002366:	4c05      	ldr	r4, [pc, #20]	; (800237c <prvTraceSaveObjectData+0x6c>)
 8002368:	089a      	lsrs	r2, r3, #2
 800236a:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 800236e:	3201      	adds	r2, #1
 8002370:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8002374:	e7e9      	b.n	800234a <prvTraceSaveObjectData+0x3a>
 8002376:	bf00      	nop
 8002378:	20001460 	.word	0x20001460
 800237c:	20000e0c 	.word	0x20000e0c
 8002380:	20000e08 	.word	0x20000e08

08002384 <prvIsValidCommand>:
}

/* Checks if the provided command is a valid command */
int prvIsValidCommand(TracealyzerCommandType* cmd)
{
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8002384:	7802      	ldrb	r2, [r0, #0]
 8002386:	7843      	ldrb	r3, [r0, #1]
 8002388:	7881      	ldrb	r1, [r0, #2]
 800238a:	4413      	add	r3, r2
 800238c:	440b      	add	r3, r1
 800238e:	78c1      	ldrb	r1, [r0, #3]
 8002390:	440b      	add	r3, r1
 8002392:	7901      	ldrb	r1, [r0, #4]
 8002394:	440b      	add	r3, r1
 8002396:	7941      	ldrb	r1, [r0, #5]
 8002398:	440b      	add	r3, r1
 800239a:	43db      	mvns	r3, r3
												cmd->param2 +
												cmd->param3 +
												cmd->param4 +
												cmd->param5));

	if (cmd->checksumMSB != (unsigned char)(checksum >> 8))
 800239c:	79c1      	ldrb	r1, [r0, #7]
}

/* Checks if the provided command is a valid command */
int prvIsValidCommand(TracealyzerCommandType* cmd)
{
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 800239e:	b29b      	uxth	r3, r3
												cmd->param2 +
												cmd->param3 +
												cmd->param4 +
												cmd->param5));

	if (cmd->checksumMSB != (unsigned char)(checksum >> 8))
 80023a0:	ebb1 2f13 	cmp.w	r1, r3, lsr #8
 80023a4:	d108      	bne.n	80023b8 <prvIsValidCommand+0x34>
		return 0;

	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFF))
 80023a6:	7981      	ldrb	r1, [r0, #6]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4299      	cmp	r1, r3
 80023ac:	d104      	bne.n	80023b8 <prvIsValidCommand+0x34>
												cmd->param3 +
												cmd->param4 +
												cmd->param5));

	if (cmd->checksumMSB != (unsigned char)(checksum >> 8))
		return 0;
 80023ae:	2a01      	cmp	r2, #1
 80023b0:	bf8c      	ite	hi
 80023b2:	2000      	movhi	r0, #0
 80023b4:	2001      	movls	r0, #1
 80023b6:	4770      	bx	lr
 80023b8:	2000      	movs	r0, #0

	if (cmd->cmdCode > CMD_LAST_COMMAND)
		return 0;

	return 1;
}
 80023ba:	4770      	bx	lr

080023bc <prvTraceError>:
}

/* Called on critical errors in the recorder. Stops the recorder! */
void prvTraceError(int errCode)
{
	if (! errorCode)
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <prvTraceError+0x24>)
	}
}

/* Called on critical errors in the recorder. Stops the recorder! */
void prvTraceError(int errCode)
{
 80023be:	b510      	push	{r4, lr}
	if (! errorCode)
 80023c0:	681c      	ldr	r4, [r3, #0]
 80023c2:	b964      	cbnz	r4, 80023de <prvTraceError+0x22>
	{
		errorCode = errCode;
 80023c4:	6018      	str	r0, [r3, #0]
		prvTraceStoreWarnings();
 80023c6:	f000 f8bf 	bl	8002548 <prvTraceStoreWarnings>
		vTracePrintF(trcWarningChannel, "Error detected. Stopped recorder.");
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <prvTraceError+0x28>)
 80023cc:	4906      	ldr	r1, [pc, #24]	; (80023e8 <prvTraceError+0x2c>)
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	f000 f892 	bl	80024f8 <vTracePrintF>

		prvSetRecorderEnabled(0);
 80023d4:	4620      	mov	r0, r4
	}
}
 80023d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	{
		errorCode = errCode;
		prvTraceStoreWarnings();
		vTracePrintF(trcWarningChannel, "Error detected. Stopped recorder.");

		prvSetRecorderEnabled(0);
 80023da:	f000 ba25 	b.w	8002828 <prvSetRecorderEnabled>
 80023de:	bd10      	pop	{r4, pc}
 80023e0:	20001454 	.word	0x20001454
 80023e4:	20001978 	.word	0x20001978
 80023e8:	08002c5a 	.word	0x08002c5a

080023ec <prvTraceStoreStringEventHelper>:
/* Internal common function for storing string events */
static void prvTraceStoreStringEventHelper(	int nArgs,
										uint16_t eventID,
										traceString userEvtChannel,
										const char* str, va_list* vl)
{
 80023ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int nStrWords;
	int i;
	int offset = 0;
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80023f0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
/* Internal common function for storing string events */
static void prvTraceStoreStringEventHelper(	int nArgs,
										uint16_t eventID,
										traceString userEvtChannel,
										const char* str, va_list* vl)
{
 80023f4:	b092      	sub	sp, #72	; 0x48
 80023f6:	4694      	mov	ip, r2
 80023f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
	int nStrWords;
	int i;
	int offset = 0;
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80023fc:	d201      	bcs.n	8002402 <prvTraceStoreStringEventHelper+0x16>
 80023fe:	2500      	movs	r5, #0
 8002400:	e006      	b.n	8002410 <prvTraceStoreStringEventHelper+0x24>
 8002402:	2001      	movs	r0, #1
 8002404:	f7ff ffda 	bl	80023bc <prvTraceError>
 8002408:	e06b      	b.n	80024e2 <prvTraceStoreStringEventHelper+0xf6>

	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 800240a:	2d34      	cmp	r5, #52	; 0x34
 800240c:	d003      	beq.n	8002416 <prvTraceStoreStringEventHelper+0x2a>
 800240e:	3501      	adds	r5, #1
 8002410:	5d5a      	ldrb	r2, [r3, r5]
 8002412:	2a00      	cmp	r2, #0
 8002414:	d1f9      	bne.n	800240a <prvTraceStoreStringEventHelper+0x1e>
	
	/* The string length in multiples of 32 bit words (+1 for null character) */
	nStrWords = (len+1+3)/4;
 8002416:	1d2c      	adds	r4, r5, #4
 8002418:	10a4      	asrs	r4, r4, #2

	/* If a user event channel is specified, add in the list */
	if (userEvtChannel)
 800241a:	f1bc 0f00 	cmp.w	ip, #0
 800241e:	d000      	beq.n	8002422 <prvTraceStoreStringEventHelper+0x36>
		nArgs++;
 8002420:	3001      	adds	r0, #1

	offset = nArgs * 4;

	/* The total number of 32-bit words needed for the whole payload */
	nWords = nStrWords + nArgs;
 8002422:	4404      	add	r4, r0

	if (nWords > 15) /* if attempting to store more than 60 byte (= max) */
 8002424:	2c0f      	cmp	r4, #15

	/* If a user event channel is specified, add in the list */
	if (userEvtChannel)
		nArgs++;

	offset = nArgs * 4;
 8002426:	ea4f 0680 	mov.w	r6, r0, lsl #2

	/* The total number of 32-bit words needed for the whole payload */
	nWords = nStrWords + nArgs;

	if (nWords > 15) /* if attempting to store more than 60 byte (= max) */
 800242a:	dd09      	ble.n	8002440 <prvTraceStoreStringEventHelper+0x54>
		of parameters... */

		/* Diagnostics ... */
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;

		if (bytesTruncated > MaxBytesTruncated)
 800242c:	4a2e      	ldr	r2, [pc, #184]	; (80024e8 <prvTraceStoreStringEventHelper+0xfc>)
		/* Truncate event if too large. The	string characters are stored
		last, so usually only the string is truncated, unless there a lot
		of parameters... */

		/* Diagnostics ... */
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 800242e:	3c0f      	subs	r4, #15

		if (bytesTruncated > MaxBytesTruncated)
 8002430:	6815      	ldr	r5, [r2, #0]
		/* Truncate event if too large. The	string characters are stored
		last, so usually only the string is truncated, unless there a lot
		of parameters... */

		/* Diagnostics ... */
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 8002432:	00a4      	lsls	r4, r4, #2

		if (bytesTruncated > MaxBytesTruncated)
 8002434:	42ac      	cmp	r4, r5
		{
			MaxBytesTruncated = bytesTruncated;
 8002436:	bf88      	it	hi
 8002438:	6014      	strhi	r4, [r2, #0]
		}

		nWords = 15;
		len = 15 * 4 - offset;
 800243a:	f1c6 053c 	rsb	r5, r6, #60	; 0x3c
		if (bytesTruncated > MaxBytesTruncated)
		{
			MaxBytesTruncated = bytesTruncated;
		}

		nWords = 15;
 800243e:	240f      	movs	r4, #15
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002440:	f3ef 8710 	mrs	r7, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002444:	2201      	movs	r2, #1
 8002446:	f382 8810 	msr	PRIMASK, r2
		len = 15 * 4 - offset;
	}

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
 800244a:	4a28      	ldr	r2, [pc, #160]	; (80024ec <prvTraceStoreStringEventHelper+0x100>)
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	2a00      	cmp	r2, #0
 8002450:	d045      	beq.n	80024de <prvTraceStoreStringEventHelper+0xf2>
	{
		int eventSize;
	  	TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
		eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);

		eventCounter++;
 8002452:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80024f4 <prvTraceStoreStringEventHelper+0x108>

	if (RecorderEnabled)
	{
		int eventSize;
	  	TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
		eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 8002456:	1ca2      	adds	r2, r4, #2
 8002458:	ea4f 0a82 	mov.w	sl, r2, lsl #2

		eventCounter++;
 800245c:	f8d9 2000 	ldr.w	r2, [r9]
		if (event != NULL)
		{
			uint32_t* data32;
			uint8_t* data8;
			event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8002460:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
	{
		int eventSize;
	  	TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
		eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);

		eventCounter++;
 8002464:	f102 0e01 	add.w	lr, r2, #1
		if (event != NULL)
		{
			uint32_t* data32;
			uint8_t* data8;
			event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 8002468:	f8ad 1004 	strh.w	r1, [sp, #4]

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
 800246c:	4920      	ldr	r1, [pc, #128]	; (80024f0 <prvTraceStoreStringEventHelper+0x104>)
	{
		int eventSize;
	  	TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
		eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);

		eventCounter++;
 800246e:	f8c9 e000 	str.w	lr, [r9]

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
 8002472:	6809      	ldr	r1, [r1, #0]
		if (event != NULL)
		{
			uint32_t* data32;
			uint8_t* data8;
			event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
			event->base.EventCount = (uint16_t)eventCounter;
 8002474:	f8ad e006 	strh.w	lr, [sp, #6]
			event->base.TS = prvGetTimestamp32();
 8002478:	9102      	str	r1, [sp, #8]

			/* 32-bit write-pointer for the data argument */
			data32 = (uint32_t*) &(event->data[0]);

			for (i = 0; i < nArgs; i++)
 800247a:	2100      	movs	r1, #0
 800247c:	4288      	cmp	r0, r1
 800247e:	dd15      	ble.n	80024ac <prvTraceStoreStringEventHelper+0xc0>
			{
				if ((userEvtChannel != NULL) && (i == 0))
 8002480:	f1bc 0f00 	cmp.w	ip, #0
 8002484:	d003      	beq.n	800248e <prvTraceStoreStringEventHelper+0xa2>
 8002486:	b911      	cbnz	r1, 800248e <prvTraceStoreStringEventHelper+0xa2>
				{
					/* First, add the User Event Channel if not NULL */
					data32[i] = (uint32_t)userEvtChannel;
 8002488:	f8cd c00c 	str.w	ip, [sp, #12]
 800248c:	e00c      	b.n	80024a8 <prvTraceStoreStringEventHelper+0xbc>
				}
				else
				{
					/* Add data arguments... */
					data32[i] = va_arg(*vl, uint32_t);
 800248e:	f8d8 4000 	ldr.w	r4, [r8]
 8002492:	aa01      	add	r2, sp, #4
 8002494:	f104 0e04 	add.w	lr, r4, #4
 8002498:	f8c8 e000 	str.w	lr, [r8]
 800249c:	f8d4 e000 	ldr.w	lr, [r4]
 80024a0:	eb02 0481 	add.w	r4, r2, r1, lsl #2
 80024a4:	f8c4 e008 	str.w	lr, [r4, #8]
			event->base.TS = prvGetTimestamp32();

			/* 32-bit write-pointer for the data argument */
			data32 = (uint32_t*) &(event->data[0]);

			for (i = 0; i < nArgs; i++)
 80024a8:	3101      	adds	r1, #1
 80024aa:	e7e7      	b.n	800247c <prvTraceStoreStringEventHelper+0x90>
 80024ac:	2100      	movs	r1, #0
					/* Add data arguments... */
					data32[i] = va_arg(*vl, uint32_t);
				}
			}
			data8 = (uint8_t*)&(event->data[0]);
			for (i = 0; i < len; i++)
 80024ae:	428d      	cmp	r5, r1
 80024b0:	dd06      	ble.n	80024c0 <prvTraceStoreStringEventHelper+0xd4>
			{
		  		data8[offset + i] = str[i];
 80024b2:	1870      	adds	r0, r6, r1
 80024b4:	5c5c      	ldrb	r4, [r3, r1]
 80024b6:	aa01      	add	r2, sp, #4
 80024b8:	4410      	add	r0, r2
 80024ba:	7204      	strb	r4, [r0, #8]
					/* Add data arguments... */
					data32[i] = va_arg(*vl, uint32_t);
				}
			}
			data8 = (uint8_t*)&(event->data[0]);
			for (i = 0; i < len; i++)
 80024bc:	3101      	adds	r1, #1
 80024be:	e7f6      	b.n	80024ae <prvTraceStoreStringEventHelper+0xc2>
			{
		  		data8[offset + i] = str[i];
			}

			if (len < (15 * 4 - offset))
 80024c0:	f1c6 033c 	rsb	r3, r6, #60	; 0x3c
 80024c4:	429d      	cmp	r5, r3
 80024c6:	da05      	bge.n	80024d4 <prvTraceStoreStringEventHelper+0xe8>
				data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 80024c8:	ab12      	add	r3, sp, #72	; 0x48
 80024ca:	441d      	add	r5, r3
 80024cc:	4435      	add	r5, r6
 80024ce:	2300      	movs	r3, #0
 80024d0:	f805 3c3c 	strb.w	r3, [r5, #-60]
			TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 80024d4:	4652      	mov	r2, sl
 80024d6:	a901      	add	r1, sp, #4
 80024d8:	2001      	movs	r0, #1
 80024da:	f7ff fd55 	bl	8001f88 <SEGGER_RTT_Write>
 80024de:	f387 8810 	msr	PRIMASK, r7
		}
	}
	
	TRACE_EXIT_CRITICAL_SECTION();
}
 80024e2:	b012      	add	sp, #72	; 0x48
 80024e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024e8:	20001464 	.word	0x20001464
 80024ec:	20000e04 	.word	0x20000e04
 80024f0:	e0001004 	.word	0xe0001004
 80024f4:	20000dfc 	.word	0x20000dfc

080024f8 <vTracePrintF>:
 * one data argument, the maximum string length is 48 chars. If this is exceeded
 * the string is truncated (4 bytes at a time).
 *
 ******************************************************************************/
void vTracePrintF(traceString chn, const char* fmt, ...)
{
 80024f8:	b40e      	push	{r1, r2, r3}
 80024fa:	4602      	mov	r2, r0
	va_list vl;
	int i = 0;

	int nArgs = 0;
 80024fc:	2000      	movs	r0, #0

	/* Count the number of arguments in the format string (e.g., %d) */
	for (i = 0; (fmt[i] != 0) && (i < 52); i++)
 80024fe:	4601      	mov	r1, r0
 * one data argument, the maximum string length is 48 chars. If this is exceeded
 * the string is truncated (4 bytes at a time).
 *
 ******************************************************************************/
void vTracePrintF(traceString chn, const char* fmt, ...)
{
 8002500:	b510      	push	{r4, lr}
 8002502:	b085      	sub	sp, #20
 8002504:	9b07      	ldr	r3, [sp, #28]
	int i = 0;

	int nArgs = 0;

	/* Count the number of arguments in the format string (e.g., %d) */
	for (i = 0; (fmt[i] != 0) && (i < 52); i++)
 8002506:	5c5c      	ldrb	r4, [r3, r1]
 8002508:	b93c      	cbnz	r4, 800251a <vTracePrintF+0x22>
			
			i++;      /* Move past format specifier or non-argument '%' */
		}
	}

	va_start(vl, fmt);
 800250a:	ac04      	add	r4, sp, #16
 800250c:	a908      	add	r1, sp, #32
 800250e:	f844 1d04 	str.w	r1, [r4, #-4]!
	
	if (chn != NULL)
 8002512:	b172      	cbz	r2, 8002532 <vTracePrintF+0x3a>
	{
		prvTraceStoreStringEventHelper(nArgs, (uint16_t)(PSF_EVENT_USER_EVENT + nArgs + 1), chn, fmt, &vl);
 8002514:	f100 0191 	add.w	r1, r0, #145	; 0x91
 8002518:	e00d      	b.n	8002536 <vTracePrintF+0x3e>
	int i = 0;

	int nArgs = 0;

	/* Count the number of arguments in the format string (e.g., %d) */
	for (i = 0; (fmt[i] != 0) && (i < 52); i++)
 800251a:	2933      	cmp	r1, #51	; 0x33
 800251c:	dcf5      	bgt.n	800250a <vTracePrintF+0x12>
	{
		if (fmt[i] == '%')
 800251e:	2c25      	cmp	r4, #37	; 0x25
 8002520:	d105      	bne.n	800252e <vTracePrintF+0x36>
		{
			if (fmt[i + 1] != '%')
 8002522:	185c      	adds	r4, r3, r1
 8002524:	7864      	ldrb	r4, [r4, #1]
			{
				nArgs++;        /* Found an argument */
			}
			
			i++;      /* Move past format specifier or non-argument '%' */
 8002526:	3101      	adds	r1, #1
	/* Count the number of arguments in the format string (e.g., %d) */
	for (i = 0; (fmt[i] != 0) && (i < 52); i++)
	{
		if (fmt[i] == '%')
		{
			if (fmt[i + 1] != '%')
 8002528:	2c25      	cmp	r4, #37	; 0x25
			{
				nArgs++;        /* Found an argument */
 800252a:	bf18      	it	ne
 800252c:	3001      	addne	r0, #1
	int i = 0;

	int nArgs = 0;

	/* Count the number of arguments in the format string (e.g., %d) */
	for (i = 0; (fmt[i] != 0) && (i < 52); i++)
 800252e:	3101      	adds	r1, #1
 8002530:	e7e9      	b.n	8002506 <vTracePrintF+0xe>
	{
		prvTraceStoreStringEventHelper(nArgs, (uint16_t)(PSF_EVENT_USER_EVENT + nArgs + 1), chn, fmt, &vl);
	}
	else
	{
		prvTraceStoreStringEventHelper(nArgs, (uint16_t)(PSF_EVENT_USER_EVENT + nArgs), chn, fmt, &vl);
 8002532:	f100 0190 	add.w	r1, r0, #144	; 0x90
 8002536:	9400      	str	r4, [sp, #0]
 8002538:	b289      	uxth	r1, r1
 800253a:	f7ff ff57 	bl	80023ec <prvTraceStoreStringEventHelper>
	}

	va_end(vl);
}
 800253e:	b005      	add	sp, #20
 8002540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002544:	b003      	add	sp, #12
 8002546:	4770      	bx	lr

08002548 <prvTraceStoreWarnings>:
	TRACE_EXIT_CRITICAL_SECTION();
}

/* Store the current warnings */
static void prvTraceStoreWarnings()
{
 8002548:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800254a:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800254e:	2301      	movs	r3, #1
 8002550:	f383 8810 	msr	PRIMASK, r3
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
 8002554:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <prvTraceStoreWarnings+0x84>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d033      	beq.n	80025c4 <prvTraceStoreWarnings+0x7c>
	{
		if (NoRoomForSymbol > 0)
 800255c:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <prvTraceStoreWarnings+0x88>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	b12a      	cbz	r2, 800256e <prvTraceStoreWarnings+0x26>
		{
			vTracePrintF(trcWarningChannel, "TRC_CFG_SYMBOL_TABLE_SLOTS too small. Add %d slots.", NoRoomForSymbol);
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <prvTraceStoreWarnings+0x8c>)
 8002566:	491c      	ldr	r1, [pc, #112]	; (80025d8 <prvTraceStoreWarnings+0x90>)
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	f7ff ffc5 	bl	80024f8 <vTracePrintF>
		}

		if (LongestSymbolName > 0)
 800256e:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <prvTraceStoreWarnings+0x94>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	b14a      	cbz	r2, 8002588 <prvTraceStoreWarnings+0x40>
		{
			if (LongestSymbolName > (TRC_CFG_SYMBOL_MAX_LENGTH))
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	2a19      	cmp	r2, #25
 8002578:	d906      	bls.n	8002588 <prvTraceStoreWarnings+0x40>
			{
				vTracePrintF(trcWarningChannel, "TRC_CFG_SYMBOL_MAX_LENGTH too small. Add %d chars.", LongestSymbolName - (TRC_CFG_SYMBOL_MAX_LENGTH));
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <prvTraceStoreWarnings+0x8c>)
 800257e:	3a19      	subs	r2, #25
 8002580:	4917      	ldr	r1, [pc, #92]	; (80025e0 <prvTraceStoreWarnings+0x98>)
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	f7ff ffb8 	bl	80024f8 <vTracePrintF>
			}
		}

		if (NoRoomForObjectData > 0)
 8002588:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <prvTraceStoreWarnings+0x9c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	b123      	cbz	r3, 8002598 <prvTraceStoreWarnings+0x50>
		{
			/* We don't know how many objects we actually need to make room for since NoRoomForObjectData can be increased multiple times for the same object! */
			vTracePrintF(trcWarningChannel, "TRC_CFG_OBJECT_DATA_SLOTS too small. Add more slots.");
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <prvTraceStoreWarnings+0x8c>)
 8002590:	4915      	ldr	r1, [pc, #84]	; (80025e8 <prvTraceStoreWarnings+0xa0>)
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	f7ff ffb0 	bl	80024f8 <vTracePrintF>
		}

		if (MaxBytesTruncated > 0)
 8002598:	4b14      	ldr	r3, [pc, #80]	; (80025ec <prvTraceStoreWarnings+0xa4>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	b12a      	cbz	r2, 80025aa <prvTraceStoreWarnings+0x62>

			A PSF event may store maximum 60 bytes payload, including data arguments
			and string characters. For User Events, also the User Event Channel ptr
			must be squeezed in, if a channel is specified. */

			vTracePrintF(trcWarningChannel, "String event too long, up to %d bytes truncated.", MaxBytesTruncated);
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <prvTraceStoreWarnings+0x8c>)
 80025a2:	4913      	ldr	r1, [pc, #76]	; (80025f0 <prvTraceStoreWarnings+0xa8>)
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	f7ff ffa7 	bl	80024f8 <vTracePrintF>
		}

		switch (errorCode)
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <prvTraceStoreWarnings+0xac>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d003      	beq.n	80025ba <prvTraceStoreWarnings+0x72>
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d106      	bne.n	80025c4 <prvTraceStoreWarnings+0x7c>
			break;
		case PSF_ERROR_DWT_NOT_SUPPORTED:
			vTracePrintF(trcWarningChannel, "DWT not supported, see prvTraceInitCortexM.");
			break;
		case PSF_ERROR_DWT_CYCCNT_NOT_SUPPORTED:
			vTracePrintF(trcWarningChannel, "DWT_CYCCNT not supported, see prvTraceInitCortexM.");
 80025b6:	4910      	ldr	r1, [pc, #64]	; (80025f8 <prvTraceStoreWarnings+0xb0>)
 80025b8:	e000      	b.n	80025bc <prvTraceStoreWarnings+0x74>
		case PSF_ERROR_EVENT_CODE_TOO_LARGE:
			break;
		case PSF_ERROR_ISR_NESTING_OVERFLOW:			
			break;
		case PSF_ERROR_DWT_NOT_SUPPORTED:
			vTracePrintF(trcWarningChannel, "DWT not supported, see prvTraceInitCortexM.");
 80025ba:	4910      	ldr	r1, [pc, #64]	; (80025fc <prvTraceStoreWarnings+0xb4>)
			break;
		case PSF_ERROR_DWT_CYCCNT_NOT_SUPPORTED:
			vTracePrintF(trcWarningChannel, "DWT_CYCCNT not supported, see prvTraceInitCortexM.");
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <prvTraceStoreWarnings+0x8c>)
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	f7ff ff9a 	bl	80024f8 <vTracePrintF>
 80025c4:	f384 8810 	msr	PRIMASK, r4
 80025c8:	bd10      	pop	{r4, pc}
 80025ca:	bf00      	nop
 80025cc:	20000e04 	.word	0x20000e04
 80025d0:	20000e00 	.word	0x20000e00
 80025d4:	20001978 	.word	0x20001978
 80025d8:	08002adb 	.word	0x08002adb
 80025dc:	2000145c 	.word	0x2000145c
 80025e0:	08002b42 	.word	0x08002b42
 80025e4:	20000e08 	.word	0x20000e08
 80025e8:	08002c7c 	.word	0x08002c7c
 80025ec:	20001464 	.word	0x20001464
 80025f0:	08002b75 	.word	0x08002b75
 80025f4:	20001454 	.word	0x20001454
 80025f8:	08002cdd 	.word	0x08002cdd
 80025fc:	08002cb1 	.word	0x08002cb1

08002600 <prvTraceStoreStringEvent>:
	TRACE_EXIT_CRITICAL_SECTION();
}

/* Stories an event with a string and <nParam> 32-bit integer parameters */
void prvTraceStoreStringEvent(int nArgs, uint16_t eventID, const char* str, ...)
{
 8002600:	b40c      	push	{r2, r3}
 8002602:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002604:	ac06      	add	r4, sp, #24
 8002606:	f854 3b04 	ldr.w	r3, [r4], #4
  	va_list vl;

	va_start(vl, str);
 800260a:	aa04      	add	r2, sp, #16
 800260c:	f842 4d04 	str.w	r4, [r2, #-4]!
	prvTraceStoreStringEventHelper(nArgs, eventID, NULL, str, &vl);
 8002610:	9200      	str	r2, [sp, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	f7ff feea 	bl	80023ec <prvTraceStoreStringEventHelper>
	va_end(vl);
}
 8002618:	b004      	add	sp, #16
 800261a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800261e:	b002      	add	sp, #8
 8002620:	4770      	bx	lr

08002622 <xTraceRegisterString>:
 * xTraceRegisterString
 *
 * Stores a name for a user event channel, returns the handle.
 ******************************************************************************/
traceString xTraceRegisterString(const char* name)
{
 8002622:	b510      	push	{r4, lr}
 8002624:	4604      	mov	r4, r0
    prvTraceSaveSymbol((const void*)name, name);
 8002626:	4601      	mov	r1, r0
 8002628:	f7ff fe26 	bl	8002278 <prvTraceSaveSymbol>

	/* Always save in symbol table, if the recording has not yet started */
	prvTraceStoreStringEvent(1, PSF_EVENT_OBJ_NAME, (const char*)name, (uint32_t)name);
 800262c:	4623      	mov	r3, r4
 800262e:	4622      	mov	r2, r4
 8002630:	2103      	movs	r1, #3
 8002632:	2001      	movs	r0, #1
 8002634:	f7ff ffe4 	bl	8002600 <prvTraceStoreStringEvent>

	return (traceString)name;
}
 8002638:	4620      	mov	r0, r4
 800263a:	bd10      	pop	{r4, pc}

0800263c <prvTraceStoreEvent0>:
/* Store an event with zero parameters (event ID only) */
void prvTraceStoreEvent0(uint16_t eventID)
{
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 800263c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	TRACE_EXIT_CRITICAL_SECTION();
}

/* Store an event with zero parameters (event ID only) */
void prvTraceStoreEvent0(uint16_t eventID)
{
 8002640:	b513      	push	{r0, r1, r4, lr}
 8002642:	4602      	mov	r2, r0
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8002644:	d303      	bcc.n	800264e <prvTraceStoreEvent0+0x12>
 8002646:	2001      	movs	r0, #1
 8002648:	f7ff feb8 	bl	80023bc <prvTraceError>
 800264c:	e018      	b.n	8002680 <prvTraceStoreEvent0+0x44>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800264e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002652:	2001      	movs	r0, #1
 8002654:	f380 8810 	msr	PRIMASK, r0

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <prvTraceStoreEvent0+0x48>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	b173      	cbz	r3, 800267c <prvTraceStoreEvent0+0x40>
	{
		eventCounter++;
 800265e:	490a      	ldr	r1, [pc, #40]	; (8002688 <prvTraceStoreEvent0+0x4c>)

		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(BaseEvent, event, sizeof(BaseEvent));
			if (event != NULL)
			{
				event->EventID = eventID | PARAM_COUNT(0);
 8002660:	f8ad 2000 	strh.w	r2, [sp]

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
	{
		eventCounter++;
 8002664:	680b      	ldr	r3, [r1, #0]
			if (event != NULL)
			{
				event->EventID = eventID | PARAM_COUNT(0);
				event->EventCount = (uint16_t)eventCounter;
				event->TS = prvGetTimestamp32();
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(BaseEvent));
 8002666:	2208      	movs	r2, #8

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
	{
		eventCounter++;
 8002668:	4403      	add	r3, r0
 800266a:	600b      	str	r3, [r1, #0]
		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(BaseEvent, event, sizeof(BaseEvent));
			if (event != NULL)
			{
				event->EventID = eventID | PARAM_COUNT(0);
				event->EventCount = (uint16_t)eventCounter;
 800266c:	f8ad 3002 	strh.w	r3, [sp, #2]

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <prvTraceStoreEvent0+0x50>)
			if (event != NULL)
			{
				event->EventID = eventID | PARAM_COUNT(0);
				event->EventCount = (uint16_t)eventCounter;
				event->TS = prvGetTimestamp32();
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(BaseEvent));
 8002672:	4669      	mov	r1, sp

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
 8002674:	681b      	ldr	r3, [r3, #0]
			TRC_STREAM_PORT_ALLOCATE_EVENT(BaseEvent, event, sizeof(BaseEvent));
			if (event != NULL)
			{
				event->EventID = eventID | PARAM_COUNT(0);
				event->EventCount = (uint16_t)eventCounter;
				event->TS = prvGetTimestamp32();
 8002676:	9301      	str	r3, [sp, #4]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(BaseEvent));
 8002678:	f7ff fc86 	bl	8001f88 <SEGGER_RTT_Write>
 800267c:	f384 8810 	msr	PRIMASK, r4
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 8002680:	b002      	add	sp, #8
 8002682:	bd10      	pop	{r4, pc}
 8002684:	20000e04 	.word	0x20000e04
 8002688:	20000dfc 	.word	0x20000dfc
 800268c:	e0001004 	.word	0xe0001004

08002690 <prvTraceStoreEvent1>:

/* Store an event with one 32-bit parameter (pointer address or an int) */
void prvTraceStoreEvent1(uint16_t eventID, uint32_t param1)
{
 8002690:	b530      	push	{r4, r5, lr}
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8002692:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	TRACE_EXIT_CRITICAL_SECTION();
}

/* Store an event with one 32-bit parameter (pointer address or an int) */
void prvTraceStoreEvent1(uint16_t eventID, uint32_t param1)
{
 8002696:	b085      	sub	sp, #20
 8002698:	4602      	mov	r2, r0
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 800269a:	d303      	bcc.n	80026a4 <prvTraceStoreEvent1+0x14>
 800269c:	2001      	movs	r0, #1
 800269e:	f7ff fe8d 	bl	80023bc <prvTraceError>
 80026a2:	e01b      	b.n	80026dc <prvTraceStoreEvent1+0x4c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026a4:	f3ef 8510 	mrs	r5, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a8:	2001      	movs	r0, #1
 80026aa:	f380 8810 	msr	PRIMASK, r0

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <prvTraceStoreEvent1+0x50>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	b18b      	cbz	r3, 80026d8 <prvTraceStoreEvent1+0x48>
	{
		eventCounter++;
 80026b4:	4c0b      	ldr	r4, [pc, #44]	; (80026e4 <prvTraceStoreEvent1+0x54>)
		
		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_1, event, sizeof(EventWithParam_1));
			if (event != NULL)
			{
				event->base.EventID = eventID | PARAM_COUNT(1);
 80026b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
	{
		eventCounter++;
 80026ba:	6823      	ldr	r3, [r4, #0]
		
		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_1, event, sizeof(EventWithParam_1));
			if (event != NULL)
			{
				event->base.EventID = eventID | PARAM_COUNT(1);
 80026bc:	f8ad 2004 	strh.w	r2, [sp, #4]

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
	{
		eventCounter++;
 80026c0:	4403      	add	r3, r0
 80026c2:	6023      	str	r3, [r4, #0]
		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_1, event, sizeof(EventWithParam_1));
			if (event != NULL)
			{
				event->base.EventID = eventID | PARAM_COUNT(1);
				event->base.EventCount = (uint16_t)eventCounter;
 80026c4:	f8ad 3006 	strh.w	r3, [sp, #6]

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <prvTraceStoreEvent1+0x58>)
			{
				event->base.EventID = eventID | PARAM_COUNT(1);
				event->base.EventCount = (uint16_t)eventCounter;
				event->base.TS = prvGetTimestamp32();
				event->param1 = (uint32_t)param1;
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_1));
 80026ca:	220c      	movs	r2, #12

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
 80026cc:	681b      	ldr	r3, [r3, #0]
			if (event != NULL)
			{
				event->base.EventID = eventID | PARAM_COUNT(1);
				event->base.EventCount = (uint16_t)eventCounter;
				event->base.TS = prvGetTimestamp32();
				event->param1 = (uint32_t)param1;
 80026ce:	9103      	str	r1, [sp, #12]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_1));
 80026d0:	a901      	add	r1, sp, #4
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_1, event, sizeof(EventWithParam_1));
			if (event != NULL)
			{
				event->base.EventID = eventID | PARAM_COUNT(1);
				event->base.EventCount = (uint16_t)eventCounter;
				event->base.TS = prvGetTimestamp32();
 80026d2:	9302      	str	r3, [sp, #8]
				event->param1 = (uint32_t)param1;
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_1));
 80026d4:	f7ff fc58 	bl	8001f88 <SEGGER_RTT_Write>
 80026d8:	f385 8810 	msr	PRIMASK, r5
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 80026dc:	b005      	add	sp, #20
 80026de:	bd30      	pop	{r4, r5, pc}
 80026e0:	20000e04 	.word	0x20000e04
 80026e4:	20000dfc 	.word	0x20000dfc
 80026e8:	e0001004 	.word	0xe0001004

080026ec <prvTraceStoreEvent2>:
/* Store an event with two 32-bit parameters */
void prvTraceStoreEvent2(uint16_t eventID, uint32_t param1, uint32_t param2)
{
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80026ec:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	TRACE_EXIT_CRITICAL_SECTION();
}

/* Store an event with two 32-bit parameters */
void prvTraceStoreEvent2(uint16_t eventID, uint32_t param1, uint32_t param2)
{
 80026f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80026f2:	d303      	bcc.n	80026fc <prvTraceStoreEvent2+0x10>
 80026f4:	2001      	movs	r0, #1
 80026f6:	f7ff fe61 	bl	80023bc <prvTraceError>
 80026fa:	e01d      	b.n	8002738 <prvTraceStoreEvent2+0x4c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026fc:	f3ef 8610 	mrs	r6, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002700:	2501      	movs	r5, #1
 8002702:	f385 8810 	msr	PRIMASK, r5

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <prvTraceStoreEvent2+0x50>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b19b      	cbz	r3, 8002734 <prvTraceStoreEvent2+0x48>
	{
		eventCounter++;
 800270c:	4c0c      	ldr	r4, [pc, #48]	; (8002740 <prvTraceStoreEvent2+0x54>)
 800270e:	6823      	ldr	r3, [r4, #0]
 8002710:	442b      	add	r3, r5
 8002712:	6023      	str	r3, [r4, #0]
		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_2, event, sizeof(EventWithParam_2));
			if (event != NULL)
			{
				event->base.EventID = eventID | PARAM_COUNT(2);
				event->base.EventCount = (uint16_t)eventCounter;
 8002714:	f8ad 3002 	strh.w	r3, [sp, #2]

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <prvTraceStoreEvent2+0x58>)

		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_2, event, sizeof(EventWithParam_2));
			if (event != NULL)
			{
				event->base.EventID = eventID | PARAM_COUNT(2);
 800271a:	f440 5400 	orr.w	r4, r0, #8192	; 0x2000

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
 800271e:	681b      	ldr	r3, [r3, #0]
				event->base.EventID = eventID | PARAM_COUNT(2);
				event->base.EventCount = (uint16_t)eventCounter;
				event->base.TS = prvGetTimestamp32();
				event->param1 = (uint32_t)param1;
				event->param2 = param2;
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_2));
 8002720:	4628      	mov	r0, r5
			if (event != NULL)
			{
				event->base.EventID = eventID | PARAM_COUNT(2);
				event->base.EventCount = (uint16_t)eventCounter;
				event->base.TS = prvGetTimestamp32();
				event->param1 = (uint32_t)param1;
 8002722:	9102      	str	r1, [sp, #8]
				event->param2 = param2;
 8002724:	9203      	str	r2, [sp, #12]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_2));
 8002726:	4669      	mov	r1, sp
 8002728:	2210      	movs	r2, #16

		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_2, event, sizeof(EventWithParam_2));
			if (event != NULL)
			{
				event->base.EventID = eventID | PARAM_COUNT(2);
 800272a:	f8ad 4000 	strh.w	r4, [sp]
				event->base.EventCount = (uint16_t)eventCounter;
				event->base.TS = prvGetTimestamp32();
 800272e:	9301      	str	r3, [sp, #4]
				event->param1 = (uint32_t)param1;
				event->param2 = param2;
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_2));
 8002730:	f7ff fc2a 	bl	8001f88 <SEGGER_RTT_Write>
 8002734:	f386 8810 	msr	PRIMASK, r6
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 8002738:	b004      	add	sp, #16
 800273a:	bd70      	pop	{r4, r5, r6, pc}
 800273c:	20000e04 	.word	0x20000e04
 8002740:	20000dfc 	.word	0x20000dfc
 8002744:	e0001004 	.word	0xe0001004

08002748 <prvTraceStoreEvent3>:
/* Store an event with three 32-bit parameters */
void prvTraceStoreEvent3(	uint16_t eventID,
						uint32_t param1,
						uint32_t param2,
						uint32_t param3)
{
 8002748:	b5f0      	push	{r4, r5, r6, r7, lr}
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 800274a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
/* Store an event with three 32-bit parameters */
void prvTraceStoreEvent3(	uint16_t eventID,
						uint32_t param1,
						uint32_t param2,
						uint32_t param3)
{
 800274e:	b087      	sub	sp, #28
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8002750:	d303      	bcc.n	800275a <prvTraceStoreEvent3+0x12>
 8002752:	2001      	movs	r0, #1
 8002754:	f7ff fe32 	bl	80023bc <prvTraceError>
 8002758:	e01e      	b.n	8002798 <prvTraceStoreEvent3+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800275a:	f3ef 8710 	mrs	r7, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800275e:	2601      	movs	r6, #1
 8002760:	f386 8810 	msr	PRIMASK, r6

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
 8002764:	4c0d      	ldr	r4, [pc, #52]	; (800279c <prvTraceStoreEvent3+0x54>)
 8002766:	6824      	ldr	r4, [r4, #0]
 8002768:	b1a4      	cbz	r4, 8002794 <prvTraceStoreEvent3+0x4c>
	{
  		eventCounter++;
 800276a:	4d0d      	ldr	r5, [pc, #52]	; (80027a0 <prvTraceStoreEvent3+0x58>)
 800276c:	682c      	ldr	r4, [r5, #0]
 800276e:	4434      	add	r4, r6
 8002770:	602c      	str	r4, [r5, #0]

		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_3, event, sizeof(EventWithParam_3));
			if (event != NULL)
			{
				event->base.EventID = eventID | PARAM_COUNT(3);
 8002772:	f440 5540 	orr.w	r5, r0, #12288	; 0x3000

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
 8002776:	480b      	ldr	r0, [pc, #44]	; (80027a4 <prvTraceStoreEvent3+0x5c>)

		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_3, event, sizeof(EventWithParam_3));
			if (event != NULL)
			{
				event->base.EventID = eventID | PARAM_COUNT(3);
 8002778:	f8ad 5004 	strh.w	r5, [sp, #4]

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
 800277c:	6800      	ldr	r0, [r0, #0]
			if (event != NULL)
			{
				event->base.EventID = eventID | PARAM_COUNT(3);
				event->base.EventCount = (uint16_t)eventCounter;
				event->base.TS = prvGetTimestamp32();
				event->param1 = (uint32_t)param1;
 800277e:	9103      	str	r1, [sp, #12]
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_3, event, sizeof(EventWithParam_3));
			if (event != NULL)
			{
				event->base.EventID = eventID | PARAM_COUNT(3);
				event->base.EventCount = (uint16_t)eventCounter;
				event->base.TS = prvGetTimestamp32();
 8002780:	9002      	str	r0, [sp, #8]
				event->param1 = (uint32_t)param1;
				event->param2 = param2;
 8002782:	9204      	str	r2, [sp, #16]
				event->param3 = param3;
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_3));
 8002784:	a901      	add	r1, sp, #4
 8002786:	2214      	movs	r2, #20
 8002788:	4630      	mov	r0, r6
		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_3, event, sizeof(EventWithParam_3));
			if (event != NULL)
			{
				event->base.EventID = eventID | PARAM_COUNT(3);
				event->base.EventCount = (uint16_t)eventCounter;
 800278a:	f8ad 4006 	strh.w	r4, [sp, #6]
				event->base.TS = prvGetTimestamp32();
				event->param1 = (uint32_t)param1;
				event->param2 = param2;
				event->param3 = param3;
 800278e:	9305      	str	r3, [sp, #20]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_3));
 8002790:	f7ff fbfa 	bl	8001f88 <SEGGER_RTT_Write>
 8002794:	f387 8810 	msr	PRIMASK, r7
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 8002798:	b007      	add	sp, #28
 800279a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800279c:	20000e04 	.word	0x20000e04
 80027a0:	20000dfc 	.word	0x20000dfc
 80027a4:	e0001004 	.word	0xe0001004

080027a8 <prvTraceStoreEvent>:

/* Stores an event with <nParam> 32-bit integer parameters */
void prvTraceStoreEvent(int nParam, uint16_t eventID, ...)
{
 80027a8:	b40e      	push	{r1, r2, r3}
 80027aa:	b570      	push	{r4, r5, r6, lr}
 80027ac:	b093      	sub	sp, #76	; 0x4c
 80027ae:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
	va_list vl;
	int i;
    TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80027b2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80027b6:	d303      	bcc.n	80027c0 <prvTraceStoreEvent+0x18>
 80027b8:	2001      	movs	r0, #1
 80027ba:	f7ff fdff 	bl	80023bc <prvTraceError>
 80027be:	e028      	b.n	8002812 <prvTraceStoreEvent+0x6a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80027c0:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c4:	2301      	movs	r3, #1
 80027c6:	f383 8810 	msr	PRIMASK, r3

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <prvTraceStoreEvent+0x74>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	b1f3      	cbz	r3, 800280e <prvTraceStoreEvent+0x66>
	{
	  	int eventSize = (int)sizeof(BaseEvent) + nParam * (int)sizeof(uint32_t);

		eventCounter++;
 80027d0:	4d13      	ldr	r5, [pc, #76]	; (8002820 <prvTraceStoreEvent+0x78>)

		{
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
			if (event != NULL)
			{
				event->base.EventID = eventID | (uint16_t)PARAM_COUNT(nParam);
 80027d2:	ea41 3100 	orr.w	r1, r1, r0, lsl #12

	if (RecorderEnabled)
	{
	  	int eventSize = (int)sizeof(BaseEvent) + nParam * (int)sizeof(uint32_t);

		eventCounter++;
 80027d6:	682b      	ldr	r3, [r5, #0]

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
	{
	  	int eventSize = (int)sizeof(BaseEvent) + nParam * (int)sizeof(uint32_t);
 80027d8:	1c82      	adds	r2, r0, #2

		eventCounter++;
 80027da:	3301      	adds	r3, #1
 80027dc:	602b      	str	r3, [r5, #0]
		{
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
			if (event != NULL)
			{
				event->base.EventID = eventID | (uint16_t)PARAM_COUNT(nParam);
				event->base.EventCount = (uint16_t)eventCounter;
 80027de:	f8ad 3006 	strh.w	r3, [sp, #6]

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <prvTraceStoreEvent+0x7c>)
			{
				event->base.EventID = eventID | (uint16_t)PARAM_COUNT(nParam);
				event->base.EventCount = (uint16_t)eventCounter;
				event->base.TS = prvGetTimestamp32();

				va_start(vl, eventID);
 80027e4:	ad18      	add	r5, sp, #96	; 0x60

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
 80027e6:	681b      	ldr	r3, [r3, #0]

		{
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
			if (event != NULL)
			{
				event->base.EventID = eventID | (uint16_t)PARAM_COUNT(nParam);
 80027e8:	f8ad 1004 	strh.w	r1, [sp, #4]
				event->base.EventCount = (uint16_t)eventCounter;
				event->base.TS = prvGetTimestamp32();
 80027ec:	9302      	str	r3, [sp, #8]

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
	{
	  	int eventSize = (int)sizeof(BaseEvent) + nParam * (int)sizeof(uint32_t);
 80027ee:	0092      	lsls	r2, r2, #2
			{
				event->base.EventID = eventID | (uint16_t)PARAM_COUNT(nParam);
				event->base.EventCount = (uint16_t)eventCounter;
				event->base.TS = prvGetTimestamp32();

				va_start(vl, eventID);
 80027f0:	9500      	str	r5, [sp, #0]
 80027f2:	a902      	add	r1, sp, #8
				for (i = 0; i < nParam; i++)
 80027f4:	2300      	movs	r3, #0
 80027f6:	4283      	cmp	r3, r0
 80027f8:	da05      	bge.n	8002806 <prvTraceStoreEvent+0x5e>
				{
					uint32_t* tmp = (uint32_t*) &(event->data[i]);
					*tmp = va_arg(vl, uint32_t);
 80027fa:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
				event->base.EventID = eventID | (uint16_t)PARAM_COUNT(nParam);
				event->base.EventCount = (uint16_t)eventCounter;
				event->base.TS = prvGetTimestamp32();

				va_start(vl, eventID);
				for (i = 0; i < nParam; i++)
 80027fe:	3301      	adds	r3, #1
				{
					uint32_t* tmp = (uint32_t*) &(event->data[i]);
					*tmp = va_arg(vl, uint32_t);
 8002800:	f841 6f04 	str.w	r6, [r1, #4]!
 8002804:	e7f7      	b.n	80027f6 <prvTraceStoreEvent+0x4e>
				}
				va_end(vl);

				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 8002806:	a901      	add	r1, sp, #4
 8002808:	2001      	movs	r0, #1
 800280a:	f7ff fbbd 	bl	8001f88 <SEGGER_RTT_Write>
 800280e:	f384 8810 	msr	PRIMASK, r4
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 8002812:	b013      	add	sp, #76	; 0x4c
 8002814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002818:	b003      	add	sp, #12
 800281a:	4770      	bx	lr
 800281c:	20000e04 	.word	0x20000e04
 8002820:	20000dfc 	.word	0x20000dfc
 8002824:	e0001004 	.word	0xe0001004

08002828 <prvSetRecorderEnabled>:
/*** INTERNAL FUNCTIONS *******************************************************/
/******************************************************************************/

/* Internal function for starting/stopping the recorder. */
static void prvSetRecorderEnabled(uint32_t isEnabled)
{
 8002828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800282c:	b08a      	sub	sp, #40	; 0x28
 800282e:	4680      	mov	r8, r0
  	void* currentTask;
	
	TRACE_ALLOC_CRITICAL_SECTION();
	
	currentTask = TRACE_GET_CURRENT_TASK();
 8002830:	f7ff fd16 	bl	8002260 <prvTraceGetCurrentTaskHandle>
 8002834:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002836:	f3ef 8710 	mrs	r7, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283a:	2601      	movs	r6, #1
 800283c:	f386 8810 	msr	PRIMASK, r6

	TRACE_ENTER_CRITICAL_SECTION();

    RecorderEnabled = isEnabled;
 8002840:	4c4a      	ldr	r4, [pc, #296]	; (800296c <prvSetRecorderEnabled+0x144>)

    if (currentTask == NULL)
    {
		currentTask = (void*)HANDLE_NO_TASK;
 8002842:	2800      	cmp	r0, #0
	
	currentTask = TRACE_GET_CURRENT_TASK();

	TRACE_ENTER_CRITICAL_SECTION();

    RecorderEnabled = isEnabled;
 8002844:	f8c4 8000 	str.w	r8, [r4]

    if (currentTask == NULL)
    {
		currentTask = (void*)HANDLE_NO_TASK;
 8002848:	bf08      	it	eq
 800284a:	2502      	moveq	r5, #2
	}

	if (RecorderEnabled)
 800284c:	f1b8 0f00 	cmp.w	r8, #0
 8002850:	f000 8084 	beq.w	800295c <prvSetRecorderEnabled+0x134>
	{
        prvTraceOnBegin();
 8002854:	f7ff fd02 	bl	800225c <prvTraceOnBegin>
        
     	eventCounter = 0;
 8002858:	4a45      	ldr	r2, [pc, #276]	; (8002970 <prvSetRecorderEnabled+0x148>)
 800285a:	2300      	movs	r3, #0
 800285c:	6013      	str	r3, [r2, #0]
        ISR_stack_index = -1;
 800285e:	4a45      	ldr	r2, [pc, #276]	; (8002974 <prvSetRecorderEnabled+0x14c>)
 8002860:	21ff      	movs	r1, #255	; 0xff
 8002862:	7011      	strb	r1, [r2, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002864:	f3ef 8810 	mrs	r8, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002868:	f386 8810 	msr	PRIMASK, r6
{
  	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
 800286c:	6822      	ldr	r2, [r4, #0]
 800286e:	b1ca      	cbz	r2, 80028a4 <prvSetRecorderEnabled+0x7c>
	{
	  	TRC_STREAM_PORT_ALLOCATE_EVENT(PSFHeaderInfo, header, sizeof(PSFHeaderInfo));
		if (header != NULL)
		{
			header->psf = PSFEndianessIdentifier;
 8002870:	4a41      	ldr	r2, [pc, #260]	; (8002978 <prvSetRecorderEnabled+0x150>)
			header->version = FormatVersion;
			header->platform = TRACE_KERNEL_VERSION;
            header->options = 0;
 8002872:	9304      	str	r3, [sp, #16]
	if (RecorderEnabled)
	{
	  	TRC_STREAM_PORT_ALLOCATE_EVENT(PSFHeaderInfo, header, sizeof(PSFHeaderInfo));
		if (header != NULL)
		{
			header->psf = PSFEndianessIdentifier;
 8002874:	9202      	str	r2, [sp, #8]
			header->version = FormatVersion;
 8002876:	2204      	movs	r2, #4
 8002878:	f8ad 200c 	strh.w	r2, [sp, #12]
			header->platform = TRACE_KERNEL_VERSION;
 800287c:	f641 22a1 	movw	r2, #6817	; 0x1aa1
            header->options = 0;
            /* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
            header->options = header->options | (TRC_IRQ_PRIORITY_ORDER << 0);
			header->symbolSize = SYMBOL_TABLE_SLOT_SIZE;
 8002880:	2320      	movs	r3, #32
	  	TRC_STREAM_PORT_ALLOCATE_EVENT(PSFHeaderInfo, header, sizeof(PSFHeaderInfo));
		if (header != NULL)
		{
			header->psf = PSFEndianessIdentifier;
			header->version = FormatVersion;
			header->platform = TRACE_KERNEL_VERSION;
 8002882:	f8ad 200e 	strh.w	r2, [sp, #14]
            header->options = 0;
            /* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
            header->options = header->options | (TRC_IRQ_PRIORITY_ORDER << 0);
			header->symbolSize = SYMBOL_TABLE_SLOT_SIZE;
			header->symbolCount = (TRC_CFG_SYMBOL_TABLE_SLOTS);
			header->objectDataSize = 8;
 8002886:	2208      	movs	r2, #8
			header->version = FormatVersion;
			header->platform = TRACE_KERNEL_VERSION;
            header->options = 0;
            /* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
            header->options = header->options | (TRC_IRQ_PRIORITY_ORDER << 0);
			header->symbolSize = SYMBOL_TABLE_SLOT_SIZE;
 8002888:	f8ad 3014 	strh.w	r3, [sp, #20]
			header->symbolCount = (TRC_CFG_SYMBOL_TABLE_SLOTS);
			header->objectDataSize = 8;
 800288c:	f8ad 2018 	strh.w	r2, [sp, #24]
			header->platform = TRACE_KERNEL_VERSION;
            header->options = 0;
            /* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
            header->options = header->options | (TRC_IRQ_PRIORITY_ORDER << 0);
			header->symbolSize = SYMBOL_TABLE_SLOT_SIZE;
			header->symbolCount = (TRC_CFG_SYMBOL_TABLE_SLOTS);
 8002890:	2328      	movs	r3, #40	; 0x28
			header->objectDataSize = 8;
			header->objectDataCount = TRC_CFG_OBJECT_DATA_SLOTS;
			TRC_STREAM_PORT_COMMIT_EVENT(header, sizeof(PSFHeaderInfo));
 8002892:	2214      	movs	r2, #20
 8002894:	a902      	add	r1, sp, #8
 8002896:	4630      	mov	r0, r6
			header->platform = TRACE_KERNEL_VERSION;
            header->options = 0;
            /* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
            header->options = header->options | (TRC_IRQ_PRIORITY_ORDER << 0);
			header->symbolSize = SYMBOL_TABLE_SLOT_SIZE;
			header->symbolCount = (TRC_CFG_SYMBOL_TABLE_SLOTS);
 8002898:	f8ad 3016 	strh.w	r3, [sp, #22]
			header->objectDataSize = 8;
			header->objectDataCount = TRC_CFG_OBJECT_DATA_SLOTS;
 800289c:	f8ad 301a 	strh.w	r3, [sp, #26]
			TRC_STREAM_PORT_COMMIT_EVENT(header, sizeof(PSFHeaderInfo));
 80028a0:	f7ff fb72 	bl	8001f88 <SEGGER_RTT_Write>
 80028a4:	f388 8810 	msr	PRIMASK, r8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028a8:	f3ef 8910 	mrs	r9, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ac:	2301      	movs	r3, #1
 80028ae:	f383 8810 	msr	PRIMASK, r3
	uint32_t j = 0;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
	
	if (RecorderEnabled)
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	b1b3      	cbz	r3, 80028e4 <prvSetRecorderEnabled+0xbc>
            TRC_STREAM_PORT_ALLOCATE_EVENT(uint32_t, data, SYMBOL_TABLE_SLOT_SIZE);
            if (data != NULL)
            {
                for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
                {
                        data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 80028b6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002990 <prvSetRecorderEnabled+0x168>
	uint32_t j = 0;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
	
	if (RecorderEnabled)
 80028ba:	2600      	movs	r6, #0
            TRC_STREAM_PORT_ALLOCATE_EVENT(uint32_t, data, SYMBOL_TABLE_SLOT_SIZE);
            if (data != NULL)
            {
                for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
                {
                        data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 80028bc:	f10d 0808 	add.w	r8, sp, #8

    RecorderEnabled = isEnabled;

    if (currentTask == NULL)
    {
		currentTask = (void*)HANDLE_NO_TASK;
 80028c0:	2300      	movs	r3, #0
            TRC_STREAM_PORT_ALLOCATE_EVENT(uint32_t, data, SYMBOL_TABLE_SLOT_SIZE);
            if (data != NULL)
            {
                for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
                {
                        data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 80028c2:	18f2      	adds	r2, r6, r3
 80028c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80028c8:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
		{
            TRC_STREAM_PORT_ALLOCATE_EVENT(uint32_t, data, SYMBOL_TABLE_SLOT_SIZE);
            if (data != NULL)
            {
                for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
 80028cc:	3301      	adds	r3, #1
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d1f7      	bne.n	80028c2 <prvSetRecorderEnabled+0x9a>
                {
                        data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
                }
			    TRC_STREAM_PORT_COMMIT_EVENT(data, SYMBOL_TABLE_SLOT_SIZE);
 80028d2:	2220      	movs	r2, #32
 80028d4:	4641      	mov	r1, r8
 80028d6:	2001      	movs	r0, #1

	TRACE_ENTER_CRITICAL_SECTION();
	
	if (RecorderEnabled)
	{
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
 80028d8:	3608      	adds	r6, #8
            {
                for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
                {
                        data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
                }
			    TRC_STREAM_PORT_COMMIT_EVENT(data, SYMBOL_TABLE_SLOT_SIZE);
 80028da:	f7ff fb55 	bl	8001f88 <SEGGER_RTT_Write>

	TRACE_ENTER_CRITICAL_SECTION();
	
	if (RecorderEnabled)
	{
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
 80028de:	f5b6 7fa0 	cmp.w	r6, #320	; 0x140
 80028e2:	d1ed      	bne.n	80028c0 <prvSetRecorderEnabled+0x98>
 80028e4:	f389 8810 	msr	PRIMASK, r9
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028e8:	f3ef 8810 	mrs	r8, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ec:	2301      	movs	r3, #1
 80028ee:	f383 8810 	msr	PRIMASK, r3
	uint32_t j = 0;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	b993      	cbnz	r3, 800291c <prvSetRecorderEnabled+0xf4>
 80028f6:	f388 8810 	msr	PRIMASK, r8
     	eventCounter = 0;
        ISR_stack_index = -1;
        prvTraceStoreHeader();
		prvTraceStoreSymbolTable();
    	prvTraceStoreObjectDataTable();
        prvTraceStoreEvent3(	PSF_EVENT_TRACE_START,
 80028fa:	4a20      	ldr	r2, [pc, #128]	; (800297c <prvSetRecorderEnabled+0x154>)
 80028fc:	4b20      	ldr	r3, [pc, #128]	; (8002980 <prvSetRecorderEnabled+0x158>)
 80028fe:	6819      	ldr	r1, [r3, #0]
 8002900:	6813      	ldr	r3, [r2, #0]
 8002902:	1c58      	adds	r0, r3, #1
 8002904:	6010      	str	r0, [r2, #0]
 8002906:	462a      	mov	r2, r5
 8002908:	2001      	movs	r0, #1
 800290a:	f7ff ff1d 	bl	8002748 <prvTraceStoreEvent3>

/* Store the Timestamp Config event */
static void prvTraceStoreTSConfig(void)
{
	/* If not overridden using vTraceSetFrequency, use default value */
	if (timestampFrequency == 0)
 800290e:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <prvSetRecorderEnabled+0x15c>)
 8002910:	6813      	ldr	r3, [r2, #0]
 8002912:	b9ab      	cbnz	r3, 8002940 <prvSetRecorderEnabled+0x118>
	{
		timestampFrequency = TRC_HWTC_FREQ_HZ;
 8002914:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <prvSetRecorderEnabled+0x160>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e011      	b.n	8002940 <prvSetRecorderEnabled+0x118>
            TRC_STREAM_PORT_ALLOCATE_EVENT(uint32_t, data, OBJECT_DATA_SLOT_SIZE);
            if (data != NULL)
            {
                for (j = 0; j < (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)); j++)
                {
                        data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 800291c:	4e1b      	ldr	r6, [pc, #108]	; (800298c <prvSetRecorderEnabled+0x164>)
	uint32_t j = 0;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
 800291e:	2400      	movs	r4, #0
            TRC_STREAM_PORT_ALLOCATE_EVENT(uint32_t, data, OBJECT_DATA_SLOT_SIZE);
            if (data != NULL)
            {
                for (j = 0; j < (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)); j++)
                {
                        data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 8002920:	59a3      	ldr	r3, [r4, r6]
                }
                TRC_STREAM_PORT_COMMIT_EVENT(data, OBJECT_DATA_SLOT_SIZE);
 8002922:	2208      	movs	r2, #8
            TRC_STREAM_PORT_ALLOCATE_EVENT(uint32_t, data, OBJECT_DATA_SLOT_SIZE);
            if (data != NULL)
            {
                for (j = 0; j < (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)); j++)
                {
                        data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 8002924:	9302      	str	r3, [sp, #8]
 8002926:	1933      	adds	r3, r6, r4
 8002928:	685b      	ldr	r3, [r3, #4]
                }
                TRC_STREAM_PORT_COMMIT_EVENT(data, OBJECT_DATA_SLOT_SIZE);
 800292a:	eb0d 0102 	add.w	r1, sp, r2
 800292e:	2001      	movs	r0, #1
 8002930:	3408      	adds	r4, #8
            TRC_STREAM_PORT_ALLOCATE_EVENT(uint32_t, data, OBJECT_DATA_SLOT_SIZE);
            if (data != NULL)
            {
                for (j = 0; j < (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)); j++)
                {
                        data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 8002932:	9303      	str	r3, [sp, #12]
                }
                TRC_STREAM_PORT_COMMIT_EVENT(data, OBJECT_DATA_SLOT_SIZE);
 8002934:	f7ff fb28 	bl	8001f88 <SEGGER_RTT_Write>

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
	{
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 8002938:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 800293c:	d1f0      	bne.n	8002920 <prvSetRecorderEnabled+0xf8>
 800293e:	e7da      	b.n	80028f6 <prvSetRecorderEnabled+0xce>
							(uint32_t)TRC_CFG_ISR_TAILCHAINING_THRESHOLD,
							(uint32_t)TRC_HWTC_PERIOD);
	}
	else
	{
	prvTraceStoreEvent(4, 
 8002940:	2101      	movs	r1, #1
 8002942:	2300      	movs	r3, #0
 8002944:	e88d 000a 	stmia.w	sp, {r1, r3}
 8002948:	2004      	movs	r0, #4
 800294a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	2102      	movs	r1, #2
 8002952:	f7ff ff29 	bl	80027a8 <prvTraceStoreEvent>
        prvTraceStoreEvent3(	PSF_EVENT_TRACE_START,
							(uint32_t)TRACE_GET_OS_TICKS(),
							(uint32_t)currentTask,
							SessionCounter++);
        prvTraceStoreTSConfig();
		prvTraceStoreWarnings();
 8002956:	f7ff fdf7 	bl	8002548 <prvTraceStoreWarnings>
 800295a:	e001      	b.n	8002960 <prvSetRecorderEnabled+0x138>
	}
    else
    {
        prvTraceOnEnd();
 800295c:	f7ff fc7f 	bl	800225e <prvTraceOnEnd>
 8002960:	f387 8810 	msr	PRIMASK, r7
    }

	TRACE_EXIT_CRITICAL_SECTION();
}
 8002964:	b00a      	add	sp, #40	; 0x28
 8002966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800296a:	bf00      	nop
 800296c:	20000e04 	.word	0x20000e04
 8002970:	20000dfc 	.word	0x20000dfc
 8002974:	20000008 	.word	0x20000008
 8002978:	50534600 	.word	0x50534600
 800297c:	20001468 	.word	0x20001468
 8002980:	20001450 	.word	0x20001450
 8002984:	20000f4c 	.word	0x20000f4c
 8002988:	20000004 	.word	0x20000004
 800298c:	20000e0c 	.word	0x20000e0c
 8002990:	20000f50 	.word	0x20000f50

08002994 <prvProcessCommand>:
}

/* Executed the received command (Start or Stop) */
void prvProcessCommand(TracealyzerCommandType* cmd)
{
  	switch(cmd->cmdCode)
 8002994:	7803      	ldrb	r3, [r0, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d102      	bne.n	80029a0 <prvProcessCommand+0xc>
	{
		case CMD_SET_ACTIVE:
		  	prvSetRecorderEnabled(cmd->param1);
 800299a:	7840      	ldrb	r0, [r0, #1]
 800299c:	f7ff bf44 	b.w	8002828 <prvSetRecorderEnabled>
 80029a0:	4770      	bx	lr
	...

080029a4 <prvTraceInitCortexM>:
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))

void prvTraceInitCortexM()
{
	/* Make sure the DWT registers are unlocked, in case the debugger doesn't do this. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 80029a4:	4a0e      	ldr	r2, [pc, #56]	; (80029e0 <prvTraceInitCortexM+0x3c>)
 80029a6:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <prvTraceInitCortexM+0x40>)
 80029a8:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 80029aa:	f503 434e 	add.w	r3, r3, #52736	; 0xce00
 80029ae:	334c      	adds	r3, #76	; 0x4c
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80029b6:	601a      	str	r2, [r3, #0]

	do
	{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	b90b      	cbnz	r3, 80029c0 <prvTraceInitCortexM+0x1c>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError(PSF_ERROR_DWT_NOT_SUPPORTED);
 80029bc:	2003      	movs	r0, #3
 80029be:	e005      	b.n	80029cc <prvTraceInitCortexM+0x28>
			break;
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 80029c0:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <prvTraceInitCortexM+0x44>)
 80029c2:	6813      	ldr	r3, [r2, #0]
 80029c4:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80029c8:	d002      	beq.n	80029d0 <prvTraceInitCortexM+0x2c>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError(PSF_ERROR_DWT_CYCCNT_NOT_SUPPORTED);
 80029ca:	2004      	movs	r0, #4
 80029cc:	f7ff bcf6 	b.w	80023bc <prvTraceError>
			break;
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 80029d0:	4906      	ldr	r1, [pc, #24]	; (80029ec <prvTraceInitCortexM+0x48>)
 80029d2:	600b      	str	r3, [r1, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 80029d4:	6813      	ldr	r3, [r2, #0]
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	c5acce55 	.word	0xc5acce55
 80029e4:	e0001fb0 	.word	0xe0001fb0
 80029e8:	e0001000 	.word	0xe0001000
 80029ec:	e0001004 	.word	0xe0001004

080029f0 <__libc_init_array>:
 80029f0:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <__libc_init_array+0x3c>)
 80029f2:	b570      	push	{r4, r5, r6, lr}
 80029f4:	461e      	mov	r6, r3
 80029f6:	4c0e      	ldr	r4, [pc, #56]	; (8002a30 <__libc_init_array+0x40>)
 80029f8:	2500      	movs	r5, #0
 80029fa:	1ae4      	subs	r4, r4, r3
 80029fc:	10a4      	asrs	r4, r4, #2
 80029fe:	42a5      	cmp	r5, r4
 8002a00:	d004      	beq.n	8002a0c <__libc_init_array+0x1c>
 8002a02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a06:	4798      	blx	r3
 8002a08:	3501      	adds	r5, #1
 8002a0a:	e7f8      	b.n	80029fe <__libc_init_array+0xe>
 8002a0c:	f000 f832 	bl	8002a74 <_init>
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <__libc_init_array+0x44>)
 8002a12:	4c09      	ldr	r4, [pc, #36]	; (8002a38 <__libc_init_array+0x48>)
 8002a14:	461e      	mov	r6, r3
 8002a16:	1ae4      	subs	r4, r4, r3
 8002a18:	10a4      	asrs	r4, r4, #2
 8002a1a:	2500      	movs	r5, #0
 8002a1c:	42a5      	cmp	r5, r4
 8002a1e:	d004      	beq.n	8002a2a <__libc_init_array+0x3a>
 8002a20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a24:	4798      	blx	r3
 8002a26:	3501      	adds	r5, #1
 8002a28:	e7f8      	b.n	8002a1c <__libc_init_array+0x2c>
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
 8002a2c:	08002d90 	.word	0x08002d90
 8002a30:	08002d90 	.word	0x08002d90
 8002a34:	08002d90 	.word	0x08002d90
 8002a38:	08002d94 	.word	0x08002d94

08002a3c <memcpy>:
 8002a3c:	b510      	push	{r4, lr}
 8002a3e:	1e43      	subs	r3, r0, #1
 8002a40:	440a      	add	r2, r1
 8002a42:	4291      	cmp	r1, r2
 8002a44:	d004      	beq.n	8002a50 <memcpy+0x14>
 8002a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a4e:	e7f8      	b.n	8002a42 <memcpy+0x6>
 8002a50:	bd10      	pop	{r4, pc}

08002a52 <memset>:
 8002a52:	4603      	mov	r3, r0
 8002a54:	4402      	add	r2, r0
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d002      	beq.n	8002a60 <memset+0xe>
 8002a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a5e:	e7fa      	b.n	8002a56 <memset+0x4>
 8002a60:	4770      	bx	lr

08002a62 <strcpy>:
 8002a62:	4603      	mov	r3, r0
 8002a64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a68:	f803 2b01 	strb.w	r2, [r3], #1
 8002a6c:	2a00      	cmp	r2, #0
 8002a6e:	d1f9      	bne.n	8002a64 <strcpy+0x2>
 8002a70:	4770      	bx	lr
	...

08002a74 <_init>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	bf00      	nop
 8002a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7a:	bc08      	pop	{r3}
 8002a7c:	469e      	mov	lr, r3
 8002a7e:	4770      	bx	lr

08002a80 <_fini>:
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a82:	bf00      	nop
 8002a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a86:	bc08      	pop	{r3}
 8002a88:	469e      	mov	lr, r3
 8002a8a:	4770      	bx	lr
